{"_id":"node-pty","_rev":"83-089efd350bd8f9ea906afbefd997ef01","name":"node-pty","description":"Fork pseudoterminals in Node.JS","dist-tags":{"latest":"0.8.1","beta":"0.9.0-beta24","conpty":"0.7.8-conpty1","alpha":"0.9.0-alpha3"},"versions":{"0.0.1":{"name":"node-pty","description":"Pseudo terminals for node","author":{"name":"Daniel Imms"},"version":"0.0.1","license":"MIT","main":"./index.js","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal"],"scripts":{"install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"NODE_ENV=test mocha -R spec","test-windows":"set \"NODE_ENV=test\" && mocha -R spec test-windows"},"tags":["pty","tty","terminal"],"dependencies":{"extend":"~1.2.1","nan":"2.2.1"},"devDependencies":{"mocha":"~1.17.1"},"gitHead":"404144b67ce09cd1a0e7f1fc4788da6d435dabaa","_id":"node-pty@0.0.1","_shasum":"531ae8e3ea66e88472987b23295506f812e5f328","_from":".","_npmVersion":"3.10.8","_nodeVersion":"6.9.1","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"shasum":"531ae8e3ea66e88472987b23295506f812e5f328","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.0.1.tgz"},"maintainers":[{"name":"tyriar","email":"tyriar@tyriar.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/node-pty-0.0.1.tgz_1483768781384_0.6664465197827667"},"directories":{}},"0.1.0":{"name":"node-pty","description":"Pseudo terminals for node","author":{"name":"Daniel Imms"},"version":"0.1.0","license":"MIT","main":"./index.js","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal"],"scripts":{"install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec test"},"tags":["pty","tty","terminal"],"dependencies":{"extend":"~1.2.1","nan":"2.2.1"},"devDependencies":{"cross-env":"^3.1.3","mocha":"^3.1.2"},"gitHead":"f92f87f2dbb0ef92ddf5ca83cf7eea384fa61d2b","_id":"node-pty@0.1.0","_shasum":"fe6572e76b6a535c2d202e73d4932d85c52bae48","_from":".","_npmVersion":"3.10.8","_nodeVersion":"6.9.1","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"shasum":"fe6572e76b6a535c2d202e73d4932d85c52bae48","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.1.0.tgz"},"maintainers":[{"name":"tyriar","email":"tyriar@tyriar.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/node-pty-0.1.0.tgz_1483771014552_0.675373466219753"},"directories":{}},"0.4.1":{"name":"node-pty","description":"Pseudo terminals for node","author":{"name":"Daniel Imms"},"version":"0.4.1","license":"MIT","main":"./index.js","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal"],"scripts":{"install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"NODE_ENV=test mocha -R spec","test-windows":"set \"NODE_ENV=test\" && mocha -R spec test-windows"},"tags":["pty","tty","terminal"],"dependencies":{"extend":"~1.2.1","nan":"2.2.1"},"devDependencies":{"mocha":"~1.17.1"},"gitHead":"f55ad7eabc2c120c309545fb183d1e148e86f4a8","_id":"node-pty@0.4.1","_shasum":"a80b35fe57b64f055ab19b2d7aa604d836155c04","_from":".","_npmVersion":"3.10.8","_nodeVersion":"6.9.1","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"shasum":"a80b35fe57b64f055ab19b2d7aa604d836155c04","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.4.1.tgz"},"maintainers":[{"name":"tyriar","email":"tyriar@tyriar.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/node-pty-0.4.1.tgz_1483771975444_0.8660708584357053"},"directories":{}},"0.5.0":{"name":"node-pty","description":"Pseudo terminals for node","author":{"name":"Daniel Imms"},"version":"0.5.0","license":"MIT","main":"./lib/index.js","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"files":["lib/"],"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal"],"scripts":{"tsc":"tsc","tslint":"tslint src/**/*.ts","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec test"},"tags":["pty","tty","terminal"],"dependencies":{"extend":"~1.2.1","nan":"2.2.1"},"devDependencies":{"@types/node":"^6.0.58","cross-env":"^3.1.3","mocha":"^3.1.2","tslint":"^4.3.1","typescript":"^2.1.4"},"gitHead":"fb561c0e618e4b895dd16ff21cceffc0ee6205a4","_id":"node-pty@0.5.0","_shasum":"d3d9ab0bef55bba43fb90d663f700ff093602c4e","_from":".","_npmVersion":"3.10.7","_nodeVersion":"6.9.2","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"shasum":"d3d9ab0bef55bba43fb90d663f700ff093602c4e","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.5.0.tgz"},"maintainers":[{"name":"tyriar","email":"tyriar@tyriar.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/node-pty-0.5.0.tgz_1483870164873_0.9005387418437749"},"directories":{}},"0.5.0-beta":{"name":"node-pty","description":"Pseudo terminals for node","author":{"name":"Daniel Imms"},"version":"0.5.0-beta","license":"MIT","main":"./lib/index.js","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"files":["lib/","scripts/"],"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal"],"scripts":{"tsc":"tsc","tslint":"tslint src/**/*.ts","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec test"},"tags":["pty","tty","terminal"],"dependencies":{"extend":"~1.2.1","nan":"2.2.1"},"devDependencies":{"@types/node":"^6.0.58","cross-env":"^3.1.3","mocha":"^3.1.2","tslint":"^4.3.1","typescript":"^2.1.4"},"gitHead":"3993ea2ce7ac3fea6ecf3c01e7163c23a17867bd","_id":"node-pty@0.5.0-beta","_shasum":"f1e05ea67c33360b19fd804eb2fb5430e962bd61","_from":".","_npmVersion":"3.10.7","_nodeVersion":"6.9.2","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"shasum":"f1e05ea67c33360b19fd804eb2fb5430e962bd61","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.5.0-beta.tgz"},"maintainers":[{"name":"tyriar","email":"tyriar@tyriar.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/node-pty-0.5.0-beta.tgz_1483870565882_0.20701295207254589"},"directories":{}},"0.5.0-beta2":{"name":"node-pty","description":"Pseudo terminals for node","author":{"name":"Daniel Imms"},"version":"0.5.0-beta2","license":"MIT","main":"./lib/index.js","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"files":["lib/","scripts/","src","deps"],"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal"],"scripts":{"tsc":"tsc","tslint":"tslint src/**/*.ts","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec test"},"tags":["pty","tty","terminal"],"dependencies":{"extend":"~1.2.1","nan":"2.2.1"},"devDependencies":{"@types/node":"^6.0.58","cross-env":"^3.1.3","mocha":"^3.1.2","tslint":"^4.3.1","typescript":"^2.1.4"},"gitHead":"90243cca8bbcda0502063ebb883f9b7947dd9647","_id":"node-pty@0.5.0-beta2","_shasum":"ffadacfb59043a0fa46dfefa57651432eec79e83","_from":".","_npmVersion":"3.10.7","_nodeVersion":"6.9.2","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"shasum":"ffadacfb59043a0fa46dfefa57651432eec79e83","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.5.0-beta2.tgz"},"maintainers":[{"name":"tyriar","email":"tyriar@tyriar.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/node-pty-0.5.0-beta2.tgz_1483871119486_0.04497514688409865"},"directories":{}},"0.5.0-beta3":{"name":"node-pty","description":"Pseudo terminals for node","author":{"name":"Daniel Imms"},"version":"0.5.0-beta3","license":"MIT","main":"./lib/index.js","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"files":["binding.gyp","lib/","scripts/","src/","deps/"],"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal"],"scripts":{"tsc":"tsc","tslint":"tslint src/**/*.ts","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec test"},"tags":["pty","tty","terminal"],"dependencies":{"extend":"~1.2.1","nan":"2.2.1"},"devDependencies":{"@types/node":"^6.0.58","cross-env":"^3.1.3","mocha":"^3.1.2","tslint":"^4.3.1","typescript":"^2.1.4"},"gitHead":"ae05d8601d908c1a445686e6fecf0a766662f6fa","_id":"node-pty@0.5.0-beta3","_shasum":"483c9b06a58aa8c68b9b0a310935a07765e042b1","_from":".","_npmVersion":"3.10.7","_nodeVersion":"6.9.2","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"shasum":"483c9b06a58aa8c68b9b0a310935a07765e042b1","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.5.0-beta3.tgz"},"maintainers":[{"name":"tyriar","email":"tyriar@tyriar.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/node-pty-0.5.0-beta3.tgz_1483871378840_0.15209147660061717"},"directories":{}},"0.5.0-beta4":{"name":"node-pty","description":"Pseudo terminals for node","author":{"name":"Daniel Imms"},"version":"0.5.0-beta4","license":"MIT","main":"./lib/index.js","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"files":["binding.gyp","lib/","scripts/","src/","deps/"],"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal"],"scripts":{"tsc":"tsc","tslint":"tslint src/**/*.ts","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec test"},"tags":["pty","tty","terminal"],"dependencies":{"extend":"~1.2.1","nan":"2.2.1"},"devDependencies":{"@types/node":"^6.0.58","cross-env":"^3.1.3","mocha":"^3.1.2","tslint":"^4.3.1","typescript":"^2.1.4"},"gitHead":"59923c3d6f052e5b2ef89438c9463355b57097e1","_id":"node-pty@0.5.0-beta4","_shasum":"c49a88dae56ce67776327de75873cf2e83e1ccae","_from":".","_npmVersion":"3.10.8","_nodeVersion":"6.9.1","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"shasum":"c49a88dae56ce67776327de75873cf2e83e1ccae","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.5.0-beta4.tgz"},"maintainers":[{"name":"tyriar","email":"tyriar@tyriar.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/node-pty-0.5.0-beta4.tgz_1483875128474_0.3181510416325182"},"directories":{}},"0.5.0-beta5":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Daniel Imms"},"version":"0.5.0-beta5","license":"MIT","main":"./lib/index.js","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"files":["binding.gyp","lib/","scripts/","src/","deps/"],"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","tslint":"tslint src/**/*.ts","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec test"},"dependencies":{"extend":"~1.2.1","nan":"2.2.1"},"devDependencies":{"@types/node":"^6.0.58","cross-env":"^3.1.3","mocha":"^3.1.2","tslint":"^4.3.1","typescript":"^2.1.4"},"gitHead":"99fd664d8cfc14a212f686ead436e0484e3ea993","_id":"node-pty@0.5.0-beta5","_shasum":"992c2c72ca3618ac0bca847b4c14d5e6c9215831","_from":".","_npmVersion":"3.8.5","_nodeVersion":"6.9.2","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"shasum":"992c2c72ca3618ac0bca847b4c14d5e6c9215831","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.5.0-beta5.tgz"},"maintainers":[{"name":"tyriar","email":"tyriar@tyriar.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/node-pty-0.5.0-beta5.tgz_1484541690331_0.4733062796294689"},"directories":{}},"0.5.1":{"name":"node-pty","description":"Pseudo terminals for node","author":{"name":"Daniel Imms"},"version":"0.5.1","license":"MIT","main":"./index.js","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal"],"scripts":{"install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"NODE_ENV=test mocha -R spec","test-windows":"set \"NODE_ENV=test\" && mocha -R spec test-windows"},"tags":["pty","tty","terminal"],"dependencies":{"extend":"~1.2.1","nan":"2.2.1"},"devDependencies":{"mocha":"~1.17.1"},"gitHead":"21ffafe0dca07849a512399bd36321099e9176db","_id":"node-pty@0.5.1","_shasum":"571a304d562903e758d82cd2e7370b8016442c90","_from":".","_npmVersion":"3.10.9","_nodeVersion":"6.9.2","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"shasum":"571a304d562903e758d82cd2e7370b8016442c90","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.5.1.tgz"},"maintainers":[{"name":"tyriar","email":"tyriar@tyriar.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/node-pty-0.5.1.tgz_1484542570062_0.24110370757989585"},"directories":{}},"0.6.0-beta1":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Daniel Imms"},"version":"0.6.0-beta1","license":"MIT","main":"./lib/index.js","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"files":["binding.gyp","lib/","scripts/","src/","deps/"],"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","tslint":"tslint src/**/*.ts","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec test"},"dependencies":{"extend":"~1.2.1","nan":"2.2.1"},"devDependencies":{"@types/node":"^6.0.58","cross-env":"^3.1.3","mocha":"^3.1.2","tslint":"^4.3.1","typescript":"^2.1.4"},"gitHead":"99fd664d8cfc14a212f686ead436e0484e3ea993","_id":"node-pty@0.6.0-beta1","_shasum":"941985f9f73b16417d0ce0d3553ee7782b33e1d1","_from":".","_npmVersion":"3.10.9","_nodeVersion":"6.9.2","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"shasum":"941985f9f73b16417d0ce0d3553ee7782b33e1d1","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.6.0-beta1.tgz"},"maintainers":[{"name":"tyriar","email":"tyriar@tyriar.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/node-pty-0.6.0-beta1.tgz_1484542749618_0.38245847215875983"},"directories":{}},"0.6.0-beta2":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Daniel Imms"},"version":"0.6.0-beta2","license":"MIT","main":"./lib/index.js","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"files":["binding.gyp","lib/","scripts/","src/","deps/"],"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","tslint":"tslint src/**/*.ts","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec test"},"dependencies":{"extend":"~1.2.1","nan":"2.2.1"},"devDependencies":{"@types/node":"^6.0.58","cross-env":"^3.1.3","mocha":"^3.1.2","tslint":"^4.3.1","typescript":"^2.1.4"},"gitHead":"06767c2e57626841bfb04b7744dcd956de2b68ad","_id":"node-pty@0.6.0-beta2","_shasum":"f1192cc2ad6d679af4855d3719108077ef7a0746","_from":".","_npmVersion":"3.10.9","_nodeVersion":"6.9.2","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"shasum":"f1192cc2ad6d679af4855d3719108077ef7a0746","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.6.0-beta2.tgz"},"maintainers":[{"name":"tyriar","email":"tyriar@tyriar.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/node-pty-0.6.0-beta2.tgz_1484543495651_0.9239159466233104"},"directories":{}},"0.6.0-beta3":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Daniel Imms"},"version":"0.6.0-beta3","license":"MIT","main":"./lib/index.js","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"files":["binding.gyp","lib/","scripts/","src/","deps/"],"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","tslint":"tslint src/**/*.ts","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec test"},"dependencies":{"extend":"~1.2.1","nan":"2.2.1"},"devDependencies":{"@types/node":"^6.0.58","cross-env":"^3.1.3","mocha":"^3.1.2","tslint":"^4.3.1","typescript":"^2.1.4"},"gitHead":"642b7bf25a4cdb747b229f5fe23554f34a7ea21f","_id":"node-pty@0.6.0-beta3","_shasum":"83de79f7a8a5a68e1c73422f9cbd1e1c7b281b14","_from":".","_npmVersion":"3.10.7","_nodeVersion":"6.9.2","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"shasum":"83de79f7a8a5a68e1c73422f9cbd1e1c7b281b14","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.6.0-beta3.tgz"},"maintainers":[{"name":"tyriar","email":"tyriar@tyriar.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/node-pty-0.6.0-beta3.tgz_1484758267445_0.35854533896781504"},"directories":{}},"0.6.0":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Daniel Imms"},"version":"0.6.0","license":"MIT","main":"./lib/index.js","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"files":["binding.gyp","lib/","scripts/","src/","deps/"],"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","tslint":"tslint src/**/*.ts","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec test"},"dependencies":{"extend":"~1.2.1","nan":"2.2.1"},"devDependencies":{"@types/node":"^6.0.58","cross-env":"^3.1.3","mocha":"^3.1.2","tslint":"^4.3.1","typescript":"^2.1.4"},"gitHead":"31c9936ff23ae8a7c905746bef6c808bb67bc16f","_id":"node-pty@0.6.0","_shasum":"6bb7e58e871b903773595e9ca393c07d077b1ca5","_from":".","_npmVersion":"3.10.8","_nodeVersion":"6.9.1","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"shasum":"6bb7e58e871b903773595e9ca393c07d077b1ca5","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.6.0.tgz"},"maintainers":[{"name":"tyriar","email":"tyriar@tyriar.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/node-pty-0.6.0.tgz_1484886352889_0.16580186947248876"},"directories":{}},"0.6.1":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Daniel Imms"},"version":"0.6.1","license":"MIT","main":"./lib/index.js","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"files":["binding.gyp","lib/","scripts/","src/","deps/"],"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","tslint":"tslint src/**/*.ts","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec test"},"dependencies":{"extend":"~1.2.1","nan":"2.2.1"},"devDependencies":{"@types/node":"^6.0.58","cross-env":"^3.1.3","mocha":"^3.1.2","tslint":"^4.3.1","typescript":"^2.1.4"},"gitHead":"c93027b4d185183f55347968852c9fac748e6543","_id":"node-pty@0.6.1","_shasum":"dbfe292be5d95063675083fd0a6c399acb3a9b94","_from":".","_npmVersion":"3.10.7","_nodeVersion":"6.9.4","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"shasum":"dbfe292be5d95063675083fd0a6c399acb3a9b94","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.6.1.tgz"},"maintainers":[{"name":"tyriar","email":"tyriar@tyriar.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/node-pty-0.6.1.tgz_1485037141965_0.9482021473813802"},"directories":{}},"0.6.2-beta1":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Daniel Imms"},"version":"0.6.2-beta1","license":"MIT","main":"./lib/index.js","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"files":["binding.gyp","lib/","scripts/","src/","deps/"],"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","tslint":"tslint src/**/*.ts","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec test"},"dependencies":{"nan":"2.5.0"},"devDependencies":{"@types/node":"^6.0.58","cross-env":"^3.1.3","mocha":"^3.1.2","tslint":"^4.3.1","typescript":"^2.1.4"},"gitHead":"4d37f7be20481f438a26309cc1a9e1ce6a5ef49e","_id":"node-pty@0.6.2-beta1","_shasum":"b8a66bb8d3644ac4fb0c3096c1d11135f6fbb3c6","_from":".","_npmVersion":"3.10.7","_nodeVersion":"6.9.4","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"shasum":"b8a66bb8d3644ac4fb0c3096c1d11135f6fbb3c6","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.6.2-beta1.tgz"},"maintainers":[{"name":"tyriar","email":"tyriar@tyriar.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/node-pty-0.6.2-beta1.tgz_1485042493641_0.5916524350177497"},"directories":{}},"0.6.2":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Daniel Imms"},"version":"0.6.2","license":"MIT","main":"./lib/index.js","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"files":["binding.gyp","lib/","scripts/","src/","deps/"],"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","tslint":"tslint src/**/*.ts","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec test"},"dependencies":{"nan":"2.5.0"},"devDependencies":{"@types/node":"^6.0.58","cross-env":"^3.1.3","mocha":"^3.1.2","tslint":"^4.3.1","typescript":"^2.1.4"},"gitHead":"a3416484232c1d830f56a2d18f2ffdb15d19d849","_id":"node-pty@0.6.2","_shasum":"d990a447926bbf59b80242c8ae4a85c232040a0c","_from":".","_npmVersion":"3.10.7","_nodeVersion":"6.9.4","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"shasum":"d990a447926bbf59b80242c8ae4a85c232040a0c","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.6.2.tgz"},"maintainers":[{"name":"tyriar","email":"tyriar@tyriar.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/node-pty-0.6.2.tgz_1485071278420_0.3899673311971128"},"directories":{}},"0.6.3-beta1":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Daniel Imms"},"version":"0.6.3-beta1","license":"MIT","main":"./lib/index.js","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"files":["binding.gyp","lib/","scripts/","src/","deps/"],"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","tslint":"tslint src/**/*.ts","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec test"},"dependencies":{"nan":"2.5.0"},"devDependencies":{"@types/node":"^6.0.58","cross-env":"^3.1.3","mocha":"^3.1.2","tslint":"^4.3.1","typescript":"^2.1.4"},"gitHead":"d2524d782603f116a0d454a949d5a9e3969784c5","_id":"node-pty@0.6.3-beta1","_shasum":"8f3e11079dcab3dab8114a96247bda0aff6732b3","_from":".","_npmVersion":"3.10.10","_nodeVersion":"6.10.0","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"shasum":"8f3e11079dcab3dab8114a96247bda0aff6732b3","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.6.3-beta1.tgz"},"maintainers":[{"name":"tyriar","email":"tyriar@tyriar.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/node-pty-0.6.3-beta1.tgz_1489438683294_0.2699669203720987"},"directories":{}},"0.6.3":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Daniel Imms"},"version":"0.6.3","license":"MIT","main":"./lib/index.js","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"files":["binding.gyp","lib/","scripts/","src/","deps/"],"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","tslint":"tslint src/**/*.ts","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec test"},"dependencies":{"nan":"2.5.0"},"devDependencies":{"@types/node":"^6.0.58","cross-env":"^3.1.3","mocha":"^3.1.2","tslint":"^4.3.1","typescript":"^2.1.4"},"gitHead":"d2524d782603f116a0d454a949d5a9e3969784c5","_id":"node-pty@0.6.3","_shasum":"38ad9f7f2a2fe36a9ca54a3cdf3d97320042d659","_from":".","_npmVersion":"3.10.10","_nodeVersion":"6.10.0","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"shasum":"38ad9f7f2a2fe36a9ca54a3cdf3d97320042d659","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.6.3.tgz"},"maintainers":[{"name":"tyriar","email":"tyriar@tyriar.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/node-pty-0.6.3.tgz_1489440004716_0.5367304102983326"},"directories":{}},"0.6.4":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Daniel Imms"},"version":"0.6.4","license":"MIT","main":"./lib/index.js","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"files":["binding.gyp","lib/","scripts/","src/","deps/"],"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","tslint":"tslint src/**/*.ts","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec test"},"dependencies":{"nan":"2.5.0"},"devDependencies":{"@types/node":"^6.0.58","cross-env":"^3.1.3","mocha":"^3.1.2","tslint":"^4.3.1","typescript":"^2.1.4"},"gitHead":"ee0204bee015df627b3c8684560baaf4d46a94c1","_id":"node-pty@0.6.4","_shasum":"8d90c8bfa18514a3d600e528c87bdd932f10bc57","_from":".","_npmVersion":"3.8.5","_nodeVersion":"6.9.2","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"shasum":"8d90c8bfa18514a3d600e528c87bdd932f10bc57","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.6.4.tgz"},"maintainers":[{"name":"tyriar","email":"tyriar@tyriar.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/node-pty-0.6.4.tgz_1492971837289_0.7637171414680779"},"directories":{}},"0.6.5-beta1":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Daniel Imms"},"version":"0.6.5-beta1","license":"MIT","main":"./lib/index.js","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"files":["binding.gyp","lib/","scripts/","src/","deps/"],"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","tslint":"tslint src/**/*.ts","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec test"},"dependencies":{"nan":"2.5.0"},"devDependencies":{"@types/node":"^6.0.58","cross-env":"^3.1.3","mocha":"^3.1.2","tslint":"^4.3.1","typescript":"^2.1.4"},"gitHead":"9876fb3d02ce8cb2f79fd19f2b8b25109afcc725","_id":"node-pty@0.6.5-beta1","_shasum":"7ff191d6ba379126fc6fc357b0bb19fc8de35c6b","_from":".","_npmVersion":"3.10.7","_nodeVersion":"6.9.4","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"shasum":"7ff191d6ba379126fc6fc357b0bb19fc8de35c6b","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.6.5-beta1.tgz"},"maintainers":[{"name":"tyriar","email":"tyriar@tyriar.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/node-pty-0.6.5-beta1.tgz_1495040662523_0.4459340323228389"},"directories":{}},"0.6.5":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Daniel Imms"},"version":"0.6.5","license":"MIT","main":"./lib/index.js","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"files":["binding.gyp","lib/","scripts/","src/","deps/"],"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","tslint":"tslint src/**/*.ts","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec test"},"dependencies":{"nan":"2.5.0"},"devDependencies":{"@types/node":"^6.0.58","cross-env":"^3.1.3","mocha":"^3.1.2","tslint":"^4.3.1","typescript":"^2.1.4"},"gitHead":"7cee8cede8fe2540b035afab5343c39b92d2c295","_id":"node-pty@0.6.5","_shasum":"d2fd1ba59a76442f82143520bcd030dbb7c26afa","_from":".","_npmVersion":"3.10.7","_nodeVersion":"6.9.4","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"shasum":"d2fd1ba59a76442f82143520bcd030dbb7c26afa","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.6.5.tgz"},"maintainers":[{"name":"tyriar","email":"tyriar@tyriar.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/node-pty-0.6.5.tgz_1495043239718_0.41791936848312616"},"directories":{}},"0.6.6":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Daniel Imms"},"version":"0.6.6","license":"MIT","main":"./lib/index.js","types":"./lib/index.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"files":["binding.gyp","lib/","scripts/","src/","deps/"],"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","tslint":"tslint src/**/*.ts","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec test"},"dependencies":{"nan":"2.5.0"},"devDependencies":{"@types/node":"^6.0.58","cross-env":"^3.1.3","mocha":"^3.1.2","tslint":"^4.3.1","typescript":"^2.1.4"},"gitHead":"8be7fb95d6cf703eec8dfde097e8e6c201b76749","_id":"node-pty@0.6.6","_shasum":"7f507148f917aa809a714c2864d98f0e6d3afcd6","_from":".","_npmVersion":"3.9.3","_nodeVersion":"6.2.1","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"shasum":"7f507148f917aa809a714c2864d98f0e6d3afcd6","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.6.6.tgz"},"maintainers":[{"name":"tyriar","email":"tyriar@tyriar.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty-0.6.6.tgz_1495422679759_0.9548842585645616"},"directories":{}},"0.6.7":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Daniel Imms"},"version":"0.6.7","license":"MIT","main":"./lib/index.js","types":"./lib/index.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"files":["binding.gyp","lib/","scripts/","src/","deps/"],"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","tslint":"tslint src/**/*.ts","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec test"},"dependencies":{"nan":"2.5.0"},"devDependencies":{"@types/node":"^6.0.58","cross-env":"^3.1.3","mocha":"^3.1.2","tslint":"^4.3.1","typescript":"^2.1.4"},"gitHead":"e899b87376c95c81187cee8bc4aad32d2d8aebdb","_id":"node-pty@0.6.7","_shasum":"bc139284300686587d8dc9cd8948b453dc31059c","_from":".","_npmVersion":"3.10.10","_nodeVersion":"6.11.0","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"shasum":"bc139284300686587d8dc9cd8948b453dc31059c","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.6.7.tgz"},"maintainers":[{"name":"tyriar","email":"tyriar@tyriar.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty-0.6.7.tgz_1497302657122_0.667706549866125"},"directories":{}},"0.6.8":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Daniel Imms"},"version":"0.6.8","license":"MIT","main":"./lib/index.js","types":"./lib/index.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"files":["binding.gyp","lib/","scripts/","src/","deps/"],"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","tslint":"tslint src/**/*.ts","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec test"},"dependencies":{"nan":"2.5.0"},"devDependencies":{"@types/node":"^6.0.58","cross-env":"^3.1.3","mocha":"^3.1.2","tslint":"^4.3.1","typescript":"^2.1.4"},"gitHead":"085f1b180f7cfbb66e6656dd8dc95dbde685351f","_id":"node-pty@0.6.8","_shasum":"a7b145397bef23a719128a75b20d4821726dfe90","_from":".","_npmVersion":"3.10.10","_nodeVersion":"6.11.0","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"shasum":"a7b145397bef23a719128a75b20d4821726dfe90","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.6.8.tgz"},"maintainers":[{"name":"tyriar","email":"tyriar@tyriar.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty-0.6.8.tgz_1497302885790_0.23550547170452774"},"directories":{}},"0.6.9":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Daniel Imms"},"version":"0.6.9","license":"MIT","main":"./lib/index.js","types":"./lib/index.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"files":["binding.gyp","lib/","scripts/","src/","deps/"],"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","tslint":"tslint src/**/*.ts","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec test","prepublish":"npm run tsc"},"dependencies":{"nan":"2.5.0"},"devDependencies":{"@types/node":"^6.0.58","cross-env":"^3.1.3","mocha":"^3.1.2","tslint":"^4.3.1","typescript":"^2.1.4"},"gitHead":"92b394fdb08dd4fa1c7962284bf80cd6c5b6e348","_id":"node-pty@0.6.9","_shasum":"94dfbc005e7edfddc5a94a4e8c316a0fa10f5a81","_from":".","_npmVersion":"3.9.3","_nodeVersion":"6.2.1","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"shasum":"94dfbc005e7edfddc5a94a4e8c316a0fa10f5a81","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.6.9.tgz"},"maintainers":[{"name":"tyriar","email":"tyriar@tyriar.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty-0.6.9.tgz_1499645126441_0.8202012442052364"},"directories":{}},"0.6.10":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Daniel Imms"},"version":"0.6.10","license":"MIT","main":"./lib/index.js","types":"./lib/index.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"files":["binding.gyp","lib/","scripts/","src/","deps/"],"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","tslint":"tslint src/**/*.ts","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec test","prepublish":"npm run tsc"},"dependencies":{"nan":"2.5.0"},"devDependencies":{"@types/node":"^6.0.58","cross-env":"^3.1.3","mocha":"^3.1.2","tslint":"^4.3.1","typescript":"^2.1.4"},"gitHead":"54af6d52bab80ac5823cb3cb8176491a0ace1041","_id":"node-pty@0.6.10","_shasum":"b7d355bb2002d16e14c3c353e58c48f7ee131a67","_from":".","_npmVersion":"3.10.10","_nodeVersion":"6.11.0","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"shasum":"b7d355bb2002d16e14c3c353e58c48f7ee131a67","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.6.10.tgz"},"maintainers":[{"name":"tyriar","email":"tyriar@tyriar.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty-0.6.10.tgz_1499889114474_0.28367445594631135"},"directories":{}},"0.7.0":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Daniel Imms"},"version":"0.7.0","license":"MIT","main":"./lib/index.js","types":"./lib/index.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"files":["binding.gyp","lib/","scripts/","src/","deps/"],"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","tslint":"tslint src/**/*.ts","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec lib/*.test.js","prepublish":"npm run tsc"},"dependencies":{"nan":"^2.6.2"},"devDependencies":{"@types/mocha":"^2.2.41","@types/node":"^6.0.58","cross-env":"^3.2.4","mocha":"^3.1.2","pollUntil":"^1.0.3","tslint":"^4.3.1","typescript":"^2.1.4"},"gitHead":"a1d161cba7396849116b94d8fa6bb0041a9a7ea6","_id":"node-pty@0.7.0","_shasum":"993038692d3a2921811a152658fc7dc211323ac2","_from":".","_npmVersion":"3.9.3","_nodeVersion":"6.2.1","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"shasum":"993038692d3a2921811a152658fc7dc211323ac2","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.7.0.tgz"},"maintainers":[{"name":"tyriar","email":"tyriar@tyriar.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty-0.7.0.tgz_1503336211915_0.7109534835908562"},"directories":{}},"0.7.1":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Daniel Imms"},"version":"0.7.1","license":"MIT","main":"./lib/index.js","types":"./lib/index.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"files":["binding.gyp","lib/","scripts/","src/","deps/"],"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","tslint":"tslint src/**/*.ts","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec lib/*.test.js","prepublish":"npm run tsc"},"dependencies":{"nan":"^2.6.2"},"devDependencies":{"@types/mocha":"^2.2.41","@types/node":"^6.0.58","cross-env":"^3.2.4","mocha":"^3.1.2","pollUntil":"^1.0.3","tslint":"^4.3.1","typescript":"^2.1.4"},"gitHead":"ac669a01a7f77713abae82c705dceec51db98482","_id":"node-pty@0.7.1","_shasum":"8f5ba9bf9bfa3ba4fe15dbd75a9876c37c401eed","_from":".","_npmVersion":"4.2.0","_nodeVersion":"7.10.1","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"shasum":"8f5ba9bf9bfa3ba4fe15dbd75a9876c37c401eed","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.7.1.tgz"},"maintainers":[{"name":"tyriar","email":"tyriar@tyriar.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty-0.7.1.tgz_1507063670171_0.41183474473655224"},"directories":{}},"0.7.2":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Daniel Imms"},"version":"0.7.2","license":"MIT","main":"./lib/index.js","types":"./lib/index.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"files":["binding.gyp","lib/","scripts/","src/","deps/"],"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","tslint":"tslint src/**/*.ts","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec lib/*.test.js","prepublish":"npm run tsc"},"dependencies":{"nan":"^2.6.2"},"devDependencies":{"@types/mocha":"^2.2.41","@types/node":"^6.0.58","cross-env":"^3.2.4","mocha":"^3.1.2","pollUntil":"^1.0.3","tslint":"^4.3.1","typescript":"^2.1.4"},"gitHead":"8085eae9bf5a71dea35f250a86db961bfbd85e21","_id":"node-pty@0.7.2","_shasum":"b6cff79fd01f58b84947c034434c8cbeb157da43","_from":".","_npmVersion":"4.2.0","_nodeVersion":"7.9.0","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"shasum":"b6cff79fd01f58b84947c034434c8cbeb157da43","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.7.2.tgz"},"maintainers":[{"name":"tyriar","email":"tyriar@tyriar.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty-0.7.2.tgz_1509129022961_0.6600126556586474"},"directories":{}},"0.7.3-beta1":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Daniel Imms"},"version":"0.7.3-beta1","license":"MIT","main":"./lib/index.js","types":"./lib/index.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"files":["binding.gyp","lib/","scripts/","src/","deps/"],"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","tslint":"tslint src/**/*.ts","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec lib/*.test.js","prepublish":"npm run tsc"},"dependencies":{"nan":"^2.6.2"},"devDependencies":{"@types/mocha":"^2.2.41","@types/node":"^6.0.58","cross-env":"^3.2.4","mocha":"^3.1.2","pollUntil":"^1.0.3","tslint":"^4.3.1","typescript":"^2.1.4"},"gitHead":"a3b0a3c9fdfe6fd85005d433a5d6d9124055ec75","_id":"node-pty@0.7.3-beta1","_shasum":"9d3c7c31f2ef28bec37b97690e71288f3939b685","_from":".","_npmVersion":"3.10.10","_nodeVersion":"6.9.4","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"shasum":"9d3c7c31f2ef28bec37b97690e71288f3939b685","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.7.3-beta1.tgz"},"maintainers":[{"name":"tyriar","email":"tyriar@tyriar.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty-0.7.3-beta1.tgz_1510437738327_0.832238398026675"},"directories":{}},"0.7.3":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Daniel Imms"},"version":"0.7.3","license":"MIT","main":"./lib/index.js","types":"./lib/index.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"files":["binding.gyp","lib/","scripts/","src/","deps/"],"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","tslint":"tslint src/**/*.ts","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec lib/*.test.js","prepublish":"npm run tsc"},"dependencies":{"nan":"^2.6.2"},"devDependencies":{"@types/mocha":"^2.2.41","@types/node":"^6.0.58","cross-env":"^3.2.4","mocha":"^3.1.2","pollUntil":"^1.0.3","tslint":"^4.3.1","typescript":"^2.1.4"},"gitHead":"e9c790871b55c8fe9920409f59fb12360adda999","_id":"node-pty@0.7.3","_shasum":"4bb36a24a62ee9f3332e2e2310d6642d9daed1f7","_from":".","_npmVersion":"3.10.10","_nodeVersion":"6.9.4","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"shasum":"4bb36a24a62ee9f3332e2e2310d6642d9daed1f7","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.7.3.tgz"},"maintainers":[{"name":"tyriar","email":"tyriar@tyriar.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty-0.7.3.tgz_1510437997788_0.5776945459656417"},"directories":{}},"0.7.4":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Daniel Imms"},"version":"0.7.4","license":"MIT","main":"./lib/index.js","types":"./lib/index.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"files":["binding.gyp","lib/","scripts/","src/","deps/"],"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","tslint":"tslint src/**/*.ts","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec lib/*.test.js","prepublish":"npm run tsc"},"dependencies":{"nan":"^2.6.2"},"devDependencies":{"@types/mocha":"^2.2.41","@types/node":"^6.0.58","cross-env":"^3.2.4","mocha":"^3.1.2","pollUntil":"^1.0.3","tslint":"^4.3.1","typescript":"^2.1.4"},"gitHead":"22dd8bb121fa23a8a366aafae554a1ca7c96bba3","_id":"node-pty@0.7.4","_npmVersion":"5.5.1","_nodeVersion":"8.9.3","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"integrity":"sha512-WxMY1BsGcHJ2Z2qWpYL7QbfOSnkkCzV0H/9+dJ7uQEIJyz0A4fVBLymswBCTc7RoweY5ingib2gNvf87KvJxuA==","shasum":"07146b2b40b76e432e57ce6750bda40f0da5c99f","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.7.4.tgz"},"maintainers":[{"name":"tyriar","email":"tyriar@tyriar.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty-0.7.4.tgz_1512777822144_0.9660667560528964"},"directories":{}},"0.7.4-node-10":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Daniel Imms"},"version":"0.7.4-node-10","license":"MIT","main":"./lib/index.js","types":"./typings/node-pty.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"files":["binding.gyp","lib/","scripts/","src/","deps/"],"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","lint":"tslint 'src/**/*.ts'","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec --exit lib/*.test.js","prepublish":"npm run tsc"},"dependencies":{"nan":"2.10.0"},"devDependencies":{"@types/mocha":"^5.0.0","@types/node":"^6.0.104","cross-env":"^5.1.4","mocha":"^5.0.5","pollUntil":"^1.0.3","tslint":"^5.9.1","tslint-consistent-codestyle":"^1.13.0","typescript":"^2.8.1"},"readme":"# node-pty\n\n[![Build status](https://tyriar.visualstudio.com/_apis/public/build/definitions/2d361770-e039-4acc-b2b2-ef8396473589/1/badge)](https://tyriar.visualstudio.com/node-pty/_build/index?definitionId=1)\n\n`forkpty(3)` bindings for node.js. This allows you to fork processes with pseudoterminal file descriptors. It returns a terminal object which allows reads and writes.\n\nThis is useful for:\n\n- Writing a terminal emulator (eg. via [xterm.js](https://github.com/sourcelair/xterm.js)).\n- Getting certain programs to *think* you're a terminal, such as when you need a program to send you control sequences.\n\n`node-pty` supports Linux, macOS and Windows. Windows support is possible by utilizing the [winpty](https://github.com/rprichard/winpty) library.\n\n## Real-world Uses\n\n`node-pty` powers many different terminal emulators, including:\n\n- [Microsoft Visual Studio Code](https://code.visualstudio.com)\n- [Hyper](https://hyper.is/)\n- [Upterm](https://github.com/railsware/upterm)\n- [Script Runner](https://github.com/ioquatix/script-runner) for Atom.\n- [Theia](https://github.com/theia-ide/theia)\n- [FreeMAN](https://github.com/matthew-matvei/freeman) file manager\n- [atom-xterm](https://atom.io/packages/atom-xterm) - Atom plugin for providing terminals inside your Atom workspace.\n\nDo you use node-pty in your application as well? Please open a [Pull Request](https://github.com/Tyriar/node-pty/pulls) to include it here. We would love to have it in our list.\n\n## Example Usage\n\n```js\nvar os = require('os');\nvar pty = require('node-pty');\n\nvar shell = os.platform() === 'win32' ? 'powershell.exe' : 'bash';\n\nvar ptyProcess = pty.spawn(shell, [], {\n  name: 'xterm-color',\n  cols: 80,\n  rows: 30,\n  cwd: process.env.HOME,\n  env: process.env\n});\n\nptyProcess.on('data', function(data) {\n  console.log(data);\n});\n\nptyProcess.write('ls\\r');\nptyProcess.resize(100, 40);\nptyProcess.write('ls\\r');\n```\n\n## Building\n\n```bash\n# Install dependencies and build C++\nnpm install\n# Compile TypeScript -> JavaScript\nnpm run tsc\n```\n\n### Dependencies on Windows\n\n`npm install` requires some tools to be present in the system like Python and C++ compiler. Windows users can easily install them by running the following command in PowerShell as administrator. For more information see https://github.com/felixrieseberg/windows-build-tools:\n\n```sh\nnpm install --global --production windows-build-tools\n```\n\n## Debugging\n\nOn Windows, you can show the winpty agent console window by adding the environment variable `WINPTY_SHOW_CONSOLE=1` to the pty's environment. See https://github.com/rprichard/winpty#debugging-winpty for more information.\n\n## Troubleshooting\n\n**Powershell gives error 8009001d**\n\n> Internal Windows PowerShell error.  Loading managed Windows PowerShell failed with error 8009001d.\n\nThis happens when PowerShell is launched with no `SystemRoot` environment variable present.\n\n## pty.js\n\nThis project is forked from [chjj/pty.js](https://github.com/chjj/pty.js) with the primary goals being to provide better support for later Node.JS versions and Windows.\n\n## License\n\nCopyright (c) 2012-2015, Christopher Jeffrey (MIT License).\nCopyright (c) 2016, Daniel Imms (MIT License).\n","readmeFilename":"README.md","gitHead":"7387d9983f7fe4ffa5866c3f9837ae6b6ea6eda5","_id":"node-pty@0.7.4-node-10","_npmVersion":"5.6.0","_nodeVersion":"8.9.3","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"integrity":"sha512-kUtNy5EBUgw0fm6/xzroyi3t0vTtRe1NvNku/issknWUlVei5EHBC0LHO4rj+YXK5rUJ3Npp5XfSJZjXUvPWOg==","shasum":"162e5646496eb582459a442b55689ac9f3564180","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.7.4-node-10.tgz","fileCount":226,"unpackedSize":991154,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbK+jGCRA9TVsSAnZWagAAUNEP/Awdgs2G9GkVCeYqHQaP\n5KFjtLXaX+YEVHYSr9jL7e8lW8cy99roqofxnA4SzJjP2bjunDLuiduBuM/M\nR1LlVljNSAnrnH72w/T7DUEaxPDh0Fkl7yHZBHNTgoIGvqiN6yEGuR6W7fTc\nsTxy1WDMKkP/RjTT9NZ0XPanu6ZqWd94csk0l41qcMSFgiXzbOOBUQjNUMf8\no0Wt9R+mz//MGQziFoys9jggKU7cFTmGVR3eV9SjSFIpuy1lXqfWko7GeWYu\nsGlZrdF44gHEqYx8Nbqo3iNylxQuywb3JIGA741zEA9M+D1K1TQUpC4Drey0\ntmRohmQW4XwM8odrYgLL8xlP8CS1sG1VqdAe9AYCMqmuzLQVIdYo+PrGgze6\no0K8g4ofa6c9VyLD/oooPivOWcXNssCzSWkNMbt7tkxRxFAtbpvwneaEtMmC\nwfyvcWK8dhdqBQXVi7I9NaJSbCX/NodsWju6YATMRFjWSg+ufk7ivwa+Zzm3\norjbEqKKneXa/MzEUPYuScHIpc5VFhSvYfMyzvbgj8L8OiwRZ146tgR9d84K\nUen4+gKastLcd27WBJTfM0M33C1gvwqKyKwkNWSWcaFqXAbg84ZXtCO/Uunx\nx71xv8y3rbCRGNV7wMJilQOPcmESxGSGT/P2iogHqBZOB6RZHDwtdkDduDSS\ndlwJ\r\n=+ZOC\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"tyriar","email":"tyriar@tyriar.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty_0.7.4-node-10_1529604294230_0.6403149275400517"},"_hasShrinkwrap":false},"0.7.5":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Daniel Imms"},"version":"0.7.5","license":"MIT","main":"./lib/index.js","types":"./typings/node-pty.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"files":["binding.gyp","lib/","scripts/","src/","deps/"],"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","lint":"tslint 'src/**/*.ts'","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec --exit lib/*.test.js","prepublish":"npm run tsc"},"dependencies":{"nan":"2.10.0"},"devDependencies":{"@types/mocha":"^5.0.0","@types/node":"^6.0.104","cross-env":"^5.1.4","mocha":"^5.0.5","pollUntil":"^1.0.3","tslint":"^5.9.1","tslint-consistent-codestyle":"^1.13.0","typescript":"^2.8.1"},"gitHead":"a9b59da4a8b2928e915abab50b2c2faa14743997","_id":"node-pty@0.7.5","_npmVersion":"5.6.0","_nodeVersion":"8.9.3","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"integrity":"sha512-0PGzk3ilFzyBYNy7m2NcdxY9HvSh1fngqyUmWEScKhUcKqQIon50n6m4S90nadZGE0FDaKOw1qs/xEKd52ZtfA==","shasum":"dd7fa8df90a5bf7c5f5273ec5aeecabcbfbc921f","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.7.5.tgz","fileCount":226,"unpackedSize":991146,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbK/bNCRA9TVsSAnZWagAAXooP/RQ7Xu/pcuVSw/HF/YmP\ngQxqJuVx0ktS7/g/USDM/RhubPnOald4F7O8yFjtQyMzfTFIlx/zUxyvGvQk\nTbFB4Ft1ITs3W9LV7BWy9jN2Hj4swkRlOtlRkKM9p5OUCv8lKOjss+K0CpYB\nQh+1VEnTuaJiTRrhJW1rxzTn5rQ0JLpyg0yS3dzhqlYHVg8j4E9A+q8OJhJd\ntNbOHW0aiYrSj70kAQF7LFAkg+Cck2Qw+mqjTjoQIS31A9hUR/8hTpZ8pQBu\nzvlZWMYcLsw4L6AS7DIHXDWHGNFFe/gSi3EsQBGFxBV8k7e4hZEBJ/rBqnCM\n43i9G5/GCc3UGEASxpS5GKLNNXQWxLRWk7n4Ma2rXAjTp4ZXr/Zu6X8bVRK2\nn+5HThQnL9zZWfIw8RG2HGeOfWy77UsCuCh5TNCUYySIuk/jiHFgo3WOmshO\nrvGYY4+50k+24MagDjdqMxG/+21zTSEUk55gfRVgC/mYl4Nl/U3Dg3wnvhvP\nZXfb9sSt6jC24ILNCMQHfRVLplRKL5FWj173I5tGya3ihMZw8TuqNbon1Xl+\nDTK0tTJZ7f8t0Eqv+Gl7Jwsr0SZw9Tco8qt31kGr97SIlpzP1V2AH/PQT27A\nZHM/9hrvLmkXmloddg5GMNSFAZRLrYOZelLtLSz6QnVPD9g4ORvCsFeqeLsx\nzLW+\r\n=gLzR\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"tyriar","email":"tyriar@tyriar.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty_0.7.5_1529607885630_0.2191408927501377"},"_hasShrinkwrap":false},"0.7.6":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Daniel Imms"},"version":"0.7.6","license":"MIT","main":"./lib/index.js","types":"./typings/node-pty.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"files":["binding.gyp","lib/","scripts/","src/","deps/","typings/"],"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","lint":"tslint 'src/**/*.ts'","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec --exit lib/*.test.js","prepublish":"npm run tsc"},"dependencies":{"nan":"2.10.0"},"devDependencies":{"@types/mocha":"^5.0.0","@types/node":"^6.0.104","cross-env":"^5.1.4","mocha":"^5.0.5","pollUntil":"^1.0.3","tslint":"^5.9.1","tslint-consistent-codestyle":"^1.13.0","typescript":"^2.8.1"},"gitHead":"2c1c0e78c8f110b4e3da87a3f9b88ebc9e7b33b8","_id":"node-pty@0.7.6","_npmVersion":"5.5.1","_nodeVersion":"8.9.3","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"integrity":"sha512-ECzKUB7KkAFZ0cjyjMXp5WLJ+7YIZ1xnNmiiegOI6WdDaKABUNV5NbB1Dw9MXD4KrZipWII0wQ7RGZ6StU/7jA==","shasum":"bff6148c9c5836ca7e73c7aaaec067dcbdac2f7b","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.7.6.tgz","fileCount":227,"unpackedSize":993829,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbMTATCRA9TVsSAnZWagAAVZgQAIuSEZBhOIBltJDL9WWk\nGG9yMUO8dIpUUW8uH6RtZXWn1D0HscYyHLkJOUjdhP5bGbE5tL9Ow4UiRxFG\nWBKMQ5rSrWl+9Vqb/Q3w+QrxEMh6Sjvre33cWbQsD/BEmf3vG7O0LoVxwjv2\nmUtEu+mTHQrPR6zOaaT3zBFX86xr3kpOm/YeBi8hlEqpZYPtAEBxMQX47zLw\nyodzG7akA88yrIFaKon12lxJFZNNU43vxiVBaXQ1iOLPnp5oewcwUkdJPa4b\n7Th0E8ASzxASK51JCj28GBC7RRamC4m8XIIMExNxfOzt8gGGwJ2GMhtpoUbF\nEwzaROxCWSFpYiiYdjFBZ+4aHZfXrWhX+YjAFEM1+OUZDNnrmx/aQmrmuWUQ\nghrHC08nFJxlDmvkxQLEzICg5pAfHr53mXpshgUJPquUsb9GKxTDilzkK8P2\nt83teKOR4LI/fqaCRO68JtR4efx9uVkjFAP1xI/MKkTE45hYRGo3wdhjm7yK\nW9IfJlCvRSJeT+YYUgyWRAT6eJC90o7fyoXpe1/UPDEgD/mlyAV3LouGTNbn\npQKAoEl99u8I15vKbhfdvwEJxDaqGqRPugRCvcxRQmIiNy5/5MReB8WbXzqT\ncaTBAOxjCv7QNHYL8pg1/najrtchoHLMVIA/9NIV/iyctaAIBzFkL93qhrIr\niSX4\r\n=bYLf\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"tyriar","email":"tyriar@tyriar.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty_0.7.6_1529950227205_0.6622241835281364"},"_hasShrinkwrap":false},"0.7.7":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Daniel Imms"},"version":"0.7.7","license":"MIT","main":"./lib/index.js","types":"./typings/node-pty.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","lint":"tslint 'src/**/*.ts'","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec --exit lib/*.test.js","prepublish":"npm run tsc"},"dependencies":{"nan":"2.10.0"},"devDependencies":{"@types/mocha":"^5.0.0","@types/node":"^6.0.104","cross-env":"^5.1.4","mocha":"^5.0.5","pollUntil":"^1.0.3","tslint":"^5.9.1","tslint-consistent-codestyle":"^1.13.0","typescript":"^2.8.1"},"gitHead":"d66e6a3e4baf112ea9b4506bca736e65dd38d115","_id":"node-pty@0.7.7","_npmVersion":"5.6.0","_nodeVersion":"8.11.4","_npmUser":{"name":"alexr00","email":"alros@microsoft.com"},"dist":{"integrity":"sha512-KJAIfES0eLrZvwJ5yipaomsq+qKc9dPZRIjkmKFnaEjNDvaBaH6wAXQgo9lzHPhHVfUb8MLb2USrljPWe8tT0w==","shasum":"919a9de7f0462ee72b260a6e4d5459d28fde2d25","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.7.7.tgz","fileCount":227,"unpackedSize":1023170,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbkFelCRA9TVsSAnZWagAAGmEP/1hAnfPTFl99qE5C/U7Y\nGUGHoikZbsz8SRg4DeonNpeGcWTSOZ3Mc/+Zt47lAGzhzAeqcuvLM62lAvRf\nvTnncO0v7GucbFvemZnpPTD6lw67uWsGQ8ieAUdFvGIO8YaSEWUazPYwbw3/\nPw6H4omqTFgLyp/aZ8bU7Li6gfMMBDAWLa+2ZOMW9Ebp6GiB9mknp4QdjL1U\nXJ5oQNFzSvviE2b52TMZRmJifLAlHO4xVAvzRqjhcgcJZeqfSIgvXVy+1J45\na77Qa3aQYfy8YbVE3pCcthFbe3DoVzsG++mVkOKRzGDNUAe3tf+DCFbXOMRo\n1GMudjryjhAHisuEK8SjORl4yya+jdnjZMcSij9Lf8DLr3RjoXi9i8FQz/wI\nHujsoaZPdKHSbUbQW/VaF5SDWNqrtaGcg/FCrJcKrkz0alANRuHv3JWCR23k\nI6V1g3uIyZJ9GsAJnf8lRMacChIZiFN/C7O7pYGyAsQsLJXEzPj4szdhaO9O\nSWGbB/M6lV9o11H9nHfFSuZb9Kzk1/VrS4uyKkn+gOgXI99LWIYYZ19MzP4L\nI5P917HVpKKaTWMHhxpUNMbI5sAoaEBOf4AYEJlE1wye6tvgycLQSlqt4g8G\nG6nL8HVD5VackLrkPszJC5adqLzH6YE8200h4Sac/utok+oXdu9/NbmdZorP\nCOAq\r\n=V7SQ\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"alros@microsoft.com","name":"alexr00"},{"email":"npmjs@microsoft.com","name":"microsoft"},{"email":"tyriar@tyriar.com","name":"tyriar"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty_0.7.7_1536186276211_0.5064504740888525"},"_hasShrinkwrap":false},"0.7.8":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Daniel Imms"},"version":"0.7.8","license":"MIT","main":"./lib/index.js","types":"./typings/node-pty.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","lint":"tslint 'src/**/*.ts'","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec --exit lib/*.test.js","prepublish":"npm run tsc"},"dependencies":{"nan":"2.10.0"},"devDependencies":{"@types/mocha":"^5.0.0","@types/node":"^6.0.104","cross-env":"^5.1.4","mocha":"^5.0.5","pollUntil":"^1.0.3","tslint":"^5.9.1","tslint-consistent-codestyle":"^1.13.0","typescript":"^2.8.1"},"gitHead":"fd1a3290ebe89617d96b08b15a63a284c13f1fcf","_id":"node-pty@0.7.8","_npmVersion":"5.6.0","_nodeVersion":"8.9.3","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"integrity":"sha512-2c2tZtGnvIJUWw8fDipxO953Mytqc5/IdRZK+YF52NtFMNTuWCQ41QDLEx76W64MEZkfDMoZyah6KPmyW1LO7g==","shasum":"9ed2f01f84263acc96982876e734aa75490bf3d8","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.7.8.tgz","fileCount":227,"unpackedSize":996971,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbrmwHCRA9TVsSAnZWagAAl9cP/34L9+1DveXRfSWqjIKx\n1ZPiAxr/QaQxS2/TUIzG5Yf45DPjU8/mZ5pGU2xLOVZNdD0GmMZQdgn9zRFi\n8JElc877k+g5UtzSZN5ax5NuRC00hDnwzhPrP/anxX7rxsaBt+oRErKlhrtq\nrsBNOtv1P0+Zi6TnESCIouQSTs0145ars6XXZ42/sZy/ipHnkuII8T+eqtl9\n5rfFsbHCTVtgLL6Pq6/KVr2+UMmFJ1V7g+XEj/PZNMf55B4O2SWoczzPEb4D\nY3/W6bMUHViHmoSWaJOaflaDHAc+79G4+SWBHe/atwWMheip9Ng4lWv/fkYi\n+UwI6+2lY/eBOGKyXqJdBA5w8O6dZxTM0rIcKSd0OgjakBWsRzKEbIbxmAft\nGhY7a0leGVAyZFBtj8yTnHDwQYe/oq7OCWfK+3nZ2BwhmcFcBJ98iMF0+5G4\nShmdjeWT+8y1VC+RR+A9KVEmH0TSa/iLS+cObu82IevBnNQd/Cp/JUDsKtiF\nWC+ltSzoS+jWee1ZLVgjpHmxiy8+NaANXLKKgGZxN+ynEc9EP4vFpFAUnOKh\n4gnNlr9VZCfKlk5M4/n8b7xaiJPG2MQUFjzIMVQBPQkAv+PH86dFt/94PeL/\n3CtF+414v703mSJLKMw2rjYz4eG125RZJk4aDSJp7GcWCyzAUuVop18tDEem\nHyfN\r\n=m3t5\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"alros@microsoft.com","name":"alexr00"},{"email":"npmjs@microsoft.com","name":"microsoft"},{"email":"tyriar@tyriar.com","name":"tyriar"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty_0.7.8_1538157574982_0.527986771719853"},"_hasShrinkwrap":false},"0.7.6-conpty1":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Daniel Imms"},"version":"0.7.6-conpty1","license":"MIT","main":"./lib/index.js","types":"./typings/node-pty.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","lint":"tslint 'src/**/*.ts'","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec --exit lib/*.test.js","prepublish":"npm run tsc"},"dependencies":{"nan":"2.10.0"},"devDependencies":{"@types/mocha":"^5.0.0","@types/node":"^6.0.104","cross-env":"^5.1.4","mocha":"^5.0.5","pollUntil":"^1.0.3","tslint":"^5.9.1","tslint-consistent-codestyle":"^1.13.0","typescript":"^2.8.1"},"readme":"# node-pty\r\n\r\n[![Build status](https://tyriar.visualstudio.com/_apis/public/build/definitions/2d361770-e039-4acc-b2b2-ef8396473589/1/badge)](https://tyriar.visualstudio.com/node-pty/_build/index?definitionId=1)\r\n\r\n`forkpty(3)` bindings for node.js. This allows you to fork processes with pseudoterminal file descriptors. It returns a terminal object which allows reads and writes.\r\n\r\nThis is useful for:\r\n\r\n- Writing a terminal emulator (eg. via [xterm.js](https://github.com/sourcelair/xterm.js)).\r\n- Getting certain programs to *think* you're a terminal, such as when you need a program to send you control sequences.\r\n\r\n`node-pty` supports Linux, macOS and Windows. Windows support is possible by utilizing the [winpty](https://github.com/rprichard/winpty) library.\r\n\r\n## Real-world Uses\r\n\r\n`node-pty` powers many different terminal emulators, including:\r\n\r\n- [Microsoft Visual Studio Code](https://code.visualstudio.com)\r\n- [Hyper](https://hyper.is/)\r\n- [Upterm](https://github.com/railsware/upterm)\r\n- [Script Runner](https://github.com/ioquatix/script-runner) for Atom.\r\n- [Theia](https://github.com/theia-ide/theia)\r\n- [FreeMAN](https://github.com/matthew-matvei/freeman) file manager\r\n- [atom-xterm](https://atom.io/packages/atom-xterm) - Atom plugin for providing terminals inside your Atom workspace.\r\n\r\nDo you use node-pty in your application as well? Please open a [Pull Request](https://github.com/Tyriar/node-pty/pulls) to include it here. We would love to have it in our list.\r\n\r\n## Example Usage\r\n\r\n```js\r\nvar os = require('os');\r\nvar pty = require('node-pty');\r\n\r\nvar shell = os.platform() === 'win32' ? 'powershell.exe' : 'bash';\r\n\r\nvar ptyProcess = pty.spawn(shell, [], {\r\n  name: 'xterm-color',\r\n  cols: 80,\r\n  rows: 30,\r\n  cwd: process.env.HOME,\r\n  env: process.env\r\n});\r\n\r\nptyProcess.on('data', function(data) {\r\n  console.log(data);\r\n});\r\n\r\nptyProcess.write('ls\\r');\r\nptyProcess.resize(100, 40);\r\nptyProcess.write('ls\\r');\r\n```\r\n\r\n## Building\r\n\r\n```bash\r\n# Install dependencies and build C++\r\nnpm install\r\n# Compile TypeScript -> JavaScript\r\nnpm run tsc\r\n```\r\n\r\n### Dependencies on Windows\r\n\r\n`npm install` requires some tools to be present in the system like Python and C++ compiler. Windows users can easily install them by running the following command in PowerShell as administrator. For more information see https://github.com/felixrieseberg/windows-build-tools:\r\n\r\n```sh\r\nnpm install --global --production windows-build-tools\r\n```\r\n\r\nThe Windows SDK is also needed which can be [downloaded here](https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk). Only the \"Desktop C++ Apps\" components are needed to be installed.\r\n\r\n## Debugging\r\n\r\nOn Windows, you can show the winpty agent console window by adding the environment variable `WINPTY_SHOW_CONSOLE=1` to the pty's environment. See https://github.com/rprichard/winpty#debugging-winpty for more information.\r\n\r\n## Troubleshooting\r\n\r\n**Powershell gives error 8009001d**\r\n\r\n> Internal Windows PowerShell error.  Loading managed Windows PowerShell failed with error 8009001d.\r\n\r\nThis happens when PowerShell is launched with no `SystemRoot` environment variable present.\r\n\r\n## pty.js\r\n\r\nThis project is forked from [chjj/pty.js](https://github.com/chjj/pty.js) with the primary goals being to provide better support for later Node.JS versions and Windows.\r\n\r\n## License\r\n\r\nCopyright (c) 2012-2015, Christopher Jeffrey (MIT License).<br>\r\nCopyright (c) 2016, Daniel Imms (MIT License).\r\n","readmeFilename":"README.md","gitHead":"8ecb80c5c423695cc969b0391000a0d07752733e","_id":"node-pty@0.7.6-conpty1","_npmVersion":"5.6.0","_nodeVersion":"8.11.4","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"integrity":"sha512-SWcyUOuqK0uu/zUFftkacn4SWIrY9m5z9xT7xEy1IL8x8hYiWkffajwCAtOcXIrNBJT/ftH1/qaeo7K2ixqZYg==","shasum":"accc0acb1a356b987de2513a075afe9ec30cc7aa","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.7.6-conpty1.tgz","fileCount":228,"unpackedSize":1042246,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbx8AvCRA9TVsSAnZWagAAkOIQAIHSAPAZjvlv07GK4bRX\nmtdgWYhBQCsY2wuwdLr9q1sbaDk67B4x5DmubQrOpSknBXYZTRK5eVYnHa21\nmgAA5ZpfaZdWLnbKbddwJnULzz4CGQ0Kdb3m59wvx/4ZXbJsKld39V556XDJ\nCXQ/6pEdBHzjLPm3HF+92udcb6L7+gx5zt64bfpM622XnKjlSgZMnsglWMC8\nxsftN4w2xEzSGwxwPQ1v76ifF7imUOscsKn6RytdspEA98nGYQCr1hQngeZV\nXgSHWxM1odVXPJTcpTOwjXym0fS2HTlGtQrMAoPSxTMZzESYauvcScxpc56+\nahjYDNHmjHO+rbHn675JUZxBfr/OFRGsRw25eYAgG4Oy0DdaKazvs3QPtEva\nNJK7DmwN4sAfMcZMQKX3FSq808slc8YaHC1HE7fZCM9QGImXIJvbW2Vj9qtf\nDnQISoJwQ7RF8X0vJoyqjCff9IpjbnBW+O41nPKf8sP02G0pNNf+M4FKreY1\n1qfu0GXxaVyyq+bDq/GojoU6alaEwiv1sgBjgehqlkNQLndpsg6k7bQtVPMk\nWJyH4YHxjhbAl+f3xUFKRpgOW8cQM3Kj8IeynkXSIWvoacCalq2BYK7uPjJM\n6iKWXpgBtowIPG3giNlLKXXKd1CskgUXnIUWoy5mBMp8OHAorAgspRi0fmOK\nxSsT\r\n=O0mR\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"alros@microsoft.com","name":"alexr00"},{"email":"npmjs@microsoft.com","name":"microsoft"},{"email":"tyriar@tyriar.com","name":"tyriar"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty_0.7.6-conpty1_1539817518460_0.5403386097060827"},"_hasShrinkwrap":false},"0.7.6-conpty2":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Daniel Imms"},"version":"0.7.6-conpty2","license":"MIT","main":"./lib/index.js","types":"./typings/node-pty.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","lint":"tslint 'src/**/*.ts'","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec --exit lib/*.test.js","prepublish":"npm run tsc"},"dependencies":{"nan":"2.10.0"},"devDependencies":{"@types/mocha":"^5.0.0","@types/node":"^6.0.104","cross-env":"^5.1.4","mocha":"^5.0.5","pollUntil":"^1.0.3","tslint":"^5.9.1","tslint-consistent-codestyle":"^1.13.0","typescript":"^2.8.1"},"readme":"# node-pty\r\n\r\n[![Build status](https://tyriar.visualstudio.com/_apis/public/build/definitions/2d361770-e039-4acc-b2b2-ef8396473589/1/badge)](https://tyriar.visualstudio.com/node-pty/_build/index?definitionId=1)\r\n\r\n`forkpty(3)` bindings for node.js. This allows you to fork processes with pseudoterminal file descriptors. It returns a terminal object which allows reads and writes.\r\n\r\nThis is useful for:\r\n\r\n- Writing a terminal emulator (eg. via [xterm.js](https://github.com/sourcelair/xterm.js)).\r\n- Getting certain programs to *think* you're a terminal, such as when you need a program to send you control sequences.\r\n\r\n`node-pty` supports Linux, macOS and Windows. Windows support is possible by utilizing the [winpty](https://github.com/rprichard/winpty) library.\r\n\r\n## Real-world Uses\r\n\r\n`node-pty` powers many different terminal emulators, including:\r\n\r\n- [Microsoft Visual Studio Code](https://code.visualstudio.com)\r\n- [Hyper](https://hyper.is/)\r\n- [Upterm](https://github.com/railsware/upterm)\r\n- [Script Runner](https://github.com/ioquatix/script-runner) for Atom.\r\n- [Theia](https://github.com/theia-ide/theia)\r\n- [FreeMAN](https://github.com/matthew-matvei/freeman) file manager\r\n- [atom-xterm](https://atom.io/packages/atom-xterm) - Atom plugin for providing terminals inside your Atom workspace.\r\n\r\nDo you use node-pty in your application as well? Please open a [Pull Request](https://github.com/Tyriar/node-pty/pulls) to include it here. We would love to have it in our list.\r\n\r\n## Example Usage\r\n\r\n```js\r\nvar os = require('os');\r\nvar pty = require('node-pty');\r\n\r\nvar shell = os.platform() === 'win32' ? 'powershell.exe' : 'bash';\r\n\r\nvar ptyProcess = pty.spawn(shell, [], {\r\n  name: 'xterm-color',\r\n  cols: 80,\r\n  rows: 30,\r\n  cwd: process.env.HOME,\r\n  env: process.env\r\n});\r\n\r\nptyProcess.on('data', function(data) {\r\n  console.log(data);\r\n});\r\n\r\nptyProcess.write('ls\\r');\r\nptyProcess.resize(100, 40);\r\nptyProcess.write('ls\\r');\r\n```\r\n\r\n## Building\r\n\r\n```bash\r\n# Install dependencies and build C++\r\nnpm install\r\n# Compile TypeScript -> JavaScript\r\nnpm run tsc\r\n```\r\n\r\n### Dependencies on Windows\r\n\r\n`npm install` requires some tools to be present in the system like Python and C++ compiler. Windows users can easily install them by running the following command in PowerShell as administrator. For more information see https://github.com/felixrieseberg/windows-build-tools:\r\n\r\n```sh\r\nnpm install --global --production windows-build-tools\r\n```\r\n\r\nThe Windows SDK is also needed which can be [downloaded here](https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk). Only the \"Desktop C++ Apps\" components are needed to be installed.\r\n\r\n## Debugging\r\n\r\nOn Windows, you can show the winpty agent console window by adding the environment variable `WINPTY_SHOW_CONSOLE=1` to the pty's environment. See https://github.com/rprichard/winpty#debugging-winpty for more information.\r\n\r\n## Troubleshooting\r\n\r\n**Powershell gives error 8009001d**\r\n\r\n> Internal Windows PowerShell error.  Loading managed Windows PowerShell failed with error 8009001d.\r\n\r\nThis happens when PowerShell is launched with no `SystemRoot` environment variable present.\r\n\r\n## pty.js\r\n\r\nThis project is forked from [chjj/pty.js](https://github.com/chjj/pty.js) with the primary goals being to provide better support for later Node.JS versions and Windows.\r\n\r\n## License\r\n\r\nCopyright (c) 2012-2015, Christopher Jeffrey (MIT License).<br>\r\nCopyright (c) 2016, Daniel Imms (MIT License).\r\n","readmeFilename":"README.md","gitHead":"de6a767fefd2bd5a55d0270b5d74b9805da31b21","_id":"node-pty@0.7.6-conpty2","_npmVersion":"5.6.0","_nodeVersion":"8.11.4","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"integrity":"sha512-l5VvlWSDbMOovUlod0apTkSQuhAvpT2lrEsbJfB58PxXHq1ciwVQRnhdTbv4nnx/CaCSpqVE4hILSflvRnhWsA==","shasum":"39d1df795d703ba44b7f468276bfbc3bd8d36f57","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.7.6-conpty2.tgz","fileCount":228,"unpackedSize":1043551,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbyQVICRA9TVsSAnZWagAALAgP/34mK89q6NNOdiIxAH31\nMgar/PUANKm7NEg6X5xeH/7Y0oszKBn5CZ4VCBjX8ejGBJfoAqYFcLUsNh0Q\nvwoOIyUgib/LLrdM4mUFVbzhOCbXWtPn1V6ya+epEb7xpMZ9d2INNnipl8Ug\nl/R5oSaFySxlXX3IzTx4P1hqLhkZkl2zweKFEAsJHRqFeKam+AQDY7rgIlxL\ndoiWxAnKIRFCIqr53NsLQJZjOUjOXPm2+FkOJ2Bb5KbpH8mbdsgkMPuYPZRJ\n8mrSRUPjraf7Bld+ktXueCWk8F6APeEzoCw5U44HfUH/Y5gF3cJmGhiVcjRi\n+ctJgL7JRddtfIzWXZ4t2opCoVCskhYpRBPZk07psW44jBu3AKly6thXJaq/\n3Rfuhbl+YmbJoV4d+yvq6Yz0GNS/n8WDpP2948p0ENu5PbnC0ek+Z889Cxuf\n3pZkL3qWa46wJ3nthmXDbnWgAVKq6blrphW1PkAm1OkJdNprxlPgvWC8FNwj\nfC7cHxsL9ONjVjEB9fv2G86cughzfAbmRweffps5qTp2gc25JCPv2T6HKNHd\naxX+nQrHL8zcq+7guOgqAmvnE2WtS/ksg339Eu2q1oRXDpJI5QW3as2Yu0fI\nRHMsYiEBwtzWI9T//kfAh++vvCIMezsTrmAzYbHcOaqUS6C6GNKiEOht3SEq\nmrNL\r\n=sHyp\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"alros@microsoft.com","name":"alexr00"},{"email":"npmjs@microsoft.com","name":"microsoft"},{"email":"tyriar@tyriar.com","name":"tyriar"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty_0.7.6-conpty2_1539900743855_0.1383456870430042"},"_hasShrinkwrap":false},"0.7.6-conpty3":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Daniel Imms"},"version":"0.7.6-conpty3","license":"MIT","main":"./lib/index.js","types":"./typings/node-pty.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","lint":"tslint 'src/**/*.ts'","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec --exit lib/*.test.js","prepublish":"npm run tsc"},"dependencies":{"nan":"2.10.0"},"devDependencies":{"@types/mocha":"^5.0.0","@types/node":"^6.0.104","cross-env":"^5.1.4","mocha":"^5.0.5","pollUntil":"^1.0.3","tslint":"^5.9.1","tslint-consistent-codestyle":"^1.13.0","typescript":"^2.8.1"},"readme":"# node-pty\r\n\r\n[![Build status](https://tyriar.visualstudio.com/_apis/public/build/definitions/2d361770-e039-4acc-b2b2-ef8396473589/1/badge)](https://tyriar.visualstudio.com/node-pty/_build/index?definitionId=1)\r\n\r\n`forkpty(3)` bindings for node.js. This allows you to fork processes with pseudoterminal file descriptors. It returns a terminal object which allows reads and writes.\r\n\r\nThis is useful for:\r\n\r\n- Writing a terminal emulator (eg. via [xterm.js](https://github.com/sourcelair/xterm.js)).\r\n- Getting certain programs to *think* you're a terminal, such as when you need a program to send you control sequences.\r\n\r\n`node-pty` supports Linux, macOS and Windows. Windows support is possible by utilizing the [winpty](https://github.com/rprichard/winpty) library.\r\n\r\n## Real-world Uses\r\n\r\n`node-pty` powers many different terminal emulators, including:\r\n\r\n- [Microsoft Visual Studio Code](https://code.visualstudio.com)\r\n- [Hyper](https://hyper.is/)\r\n- [Upterm](https://github.com/railsware/upterm)\r\n- [Script Runner](https://github.com/ioquatix/script-runner) for Atom.\r\n- [Theia](https://github.com/theia-ide/theia)\r\n- [FreeMAN](https://github.com/matthew-matvei/freeman) file manager\r\n- [atom-xterm](https://atom.io/packages/atom-xterm) - Atom plugin for providing terminals inside your Atom workspace.\r\n\r\nDo you use node-pty in your application as well? Please open a [Pull Request](https://github.com/Tyriar/node-pty/pulls) to include it here. We would love to have it in our list.\r\n\r\n## Example Usage\r\n\r\n```js\r\nvar os = require('os');\r\nvar pty = require('node-pty');\r\n\r\nvar shell = os.platform() === 'win32' ? 'powershell.exe' : 'bash';\r\n\r\nvar ptyProcess = pty.spawn(shell, [], {\r\n  name: 'xterm-color',\r\n  cols: 80,\r\n  rows: 30,\r\n  cwd: process.env.HOME,\r\n  env: process.env\r\n});\r\n\r\nptyProcess.on('data', function(data) {\r\n  console.log(data);\r\n});\r\n\r\nptyProcess.write('ls\\r');\r\nptyProcess.resize(100, 40);\r\nptyProcess.write('ls\\r');\r\n```\r\n\r\n## Building\r\n\r\n```bash\r\n# Install dependencies and build C++\r\nnpm install\r\n# Compile TypeScript -> JavaScript\r\nnpm run tsc\r\n```\r\n\r\n### Dependencies on Windows\r\n\r\n`npm install` requires some tools to be present in the system like Python and C++ compiler. Windows users can easily install them by running the following command in PowerShell as administrator. For more information see https://github.com/felixrieseberg/windows-build-tools:\r\n\r\n```sh\r\nnpm install --global --production windows-build-tools\r\n```\r\n\r\nThe Windows SDK is also needed which can be [downloaded here](https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk). Only the \"Desktop C++ Apps\" components are needed to be installed.\r\n\r\n## Debugging\r\n\r\nOn Windows, you can show the winpty agent console window by adding the environment variable `WINPTY_SHOW_CONSOLE=1` to the pty's environment. See https://github.com/rprichard/winpty#debugging-winpty for more information.\r\n\r\n## Troubleshooting\r\n\r\n**Powershell gives error 8009001d**\r\n\r\n> Internal Windows PowerShell error.  Loading managed Windows PowerShell failed with error 8009001d.\r\n\r\nThis happens when PowerShell is launched with no `SystemRoot` environment variable present.\r\n\r\n## pty.js\r\n\r\nThis project is forked from [chjj/pty.js](https://github.com/chjj/pty.js) with the primary goals being to provide better support for later Node.JS versions and Windows.\r\n\r\n## License\r\n\r\nCopyright (c) 2012-2015, Christopher Jeffrey (MIT License).<br>\r\nCopyright (c) 2016, Daniel Imms (MIT License).\r\n","readmeFilename":"README.md","gitHead":"dc0922c6c4ac0d5ac86f41d75e28ab9ee47d4f4c","_id":"node-pty@0.7.6-conpty3","_npmVersion":"5.6.0","_nodeVersion":"8.11.4","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"integrity":"sha512-10+FPkoGOZB7Vq1P86XJrX41q8VfwwjSXUxwoP6TVW6IhgUbzZOcebafcpB5mKnRTuW91uBcrsWPp7SfEo0mWQ==","shasum":"dfb4cc33df82f0e9da4c045cb0449d0418b959ea","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.7.6-conpty3.tgz","fileCount":228,"unpackedSize":1043550,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbyQplCRA9TVsSAnZWagAAkYkP/jxTlXl3HrdaH+ZkiTCK\nfAxjPv9fwYnZriEZ1Og3OE0U00Zh+wqUlYf8805gUxuAcxzNdnnJNSctLZ6R\neUr3ZVVTBdqDgO+Bm8nYs+Ctmfteo286bIMdmk/L2t4vqt0FI6QrE+CKp39m\nnR5iRtVNoXymrrkf3DFGZhnSb9i+j9uzbKXIZYVxu/hdEGLnmXTay9yGnc2e\nAUvlpzvzd4+nX2yyFJpt5B1EBSY/nqKR5wjHHqd0mg35LgHy7dGp34DjMBzy\nPG80Gn1PW8RiYInxrzzZi9939AB4HfdUcOkHmX8QdeG2pN5GGHq01sr+AqTZ\nxpWZIs9geAMW4YQ6z0FWSRK3JCUwsC2Kf9UueQW/MudlSAIRgnWIAJMZghSe\nKz151ru1zyc+IJqNXubkhCyy0tGNWAVtCxDlmQ8ug8l82TexRdBgNcUp7HCO\nleINfxCkV1uv8yV6eVT676zlwS1m6kpEXeTYKf1w7Gc6h6uh9bXKXUf2yrOc\nBUdfPFGxcB7jjYyv0ou6RwtN5ii3/cn7k4r49hRV+KK7bPiKhFMKc/e27YQ+\nQ7P9QHEq+0Fdo4IrlKUzBTh5brE3lyNzh476boKYGBTR7898TCkSCIwwJtsb\nQWdISyJh4hxN5nNqmpAAWrKzgbTpJfBk1AE2FKI+q8lhl84Zr19YTtWFRbcG\nF2jQ\r\n=Wea+\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"alros@microsoft.com","name":"alexr00"},{"email":"npmjs@microsoft.com","name":"microsoft"},{"email":"tyriar@tyriar.com","name":"tyriar"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty_0.7.6-conpty3_1539902052713_0.7660028631670137"},"_hasShrinkwrap":false},"0.7.8-conpty1":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Daniel Imms"},"version":"0.7.8-conpty1","license":"MIT","main":"./lib/index.js","types":"./typings/node-pty.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","lint":"tslint 'src/**/*.ts'","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec --exit lib/*.test.js","prepublish":"npm run tsc"},"dependencies":{"nan":"2.10.0"},"devDependencies":{"@types/mocha":"^5.0.0","@types/node":"^6.0.104","cross-env":"^5.1.4","mocha":"^5.0.5","pollUntil":"^1.0.3","tslint":"^5.9.1","tslint-consistent-codestyle":"^1.13.0","typescript":"^2.8.1"},"gitHead":"a0af090e90b98e070826181f8102a974305aa9ae","readme":"# node-pty\r\n\r\n[![Build status](https://tyriar.visualstudio.com/_apis/public/build/definitions/2d361770-e039-4acc-b2b2-ef8396473589/1/badge)](https://tyriar.visualstudio.com/node-pty/_build/index?definitionId=1)\r\n\r\n`forkpty(3)` bindings for node.js. This allows you to fork processes with pseudoterminal file descriptors. It returns a terminal object which allows reads and writes.\r\n\r\nThis is useful for:\r\n\r\n- Writing a terminal emulator (eg. via [xterm.js](https://github.com/sourcelair/xterm.js)).\r\n- Getting certain programs to *think* you're a terminal, such as when you need a program to send you control sequences.\r\n\r\n`node-pty` supports Linux, macOS and Windows. Windows support is possible by utilizing the [winpty](https://github.com/rprichard/winpty) library.\r\n\r\n## Real-world Uses\r\n\r\n`node-pty` powers many different terminal emulators, including:\r\n\r\n- [Microsoft Visual Studio Code](https://code.visualstudio.com)\r\n- [Hyper](https://hyper.is/)\r\n- [Upterm](https://github.com/railsware/upterm)\r\n- [Script Runner](https://github.com/ioquatix/script-runner) for Atom.\r\n- [Theia](https://github.com/theia-ide/theia)\r\n- [FreeMAN](https://github.com/matthew-matvei/freeman) file manager\r\n- [atom-xterm](https://atom.io/packages/atom-xterm) - Atom plugin for providing terminals inside your Atom workspace.\r\n\r\nDo you use node-pty in your application as well? Please open a [Pull Request](https://github.com/Tyriar/node-pty/pulls) to include it here. We would love to have it in our list.\r\n\r\n## Example Usage\r\n\r\n```js\r\nvar os = require('os');\r\nvar pty = require('node-pty');\r\n\r\nvar shell = os.platform() === 'win32' ? 'powershell.exe' : 'bash';\r\n\r\nvar ptyProcess = pty.spawn(shell, [], {\r\n  name: 'xterm-color',\r\n  cols: 80,\r\n  rows: 30,\r\n  cwd: process.env.HOME,\r\n  env: process.env\r\n});\r\n\r\nptyProcess.on('data', function(data) {\r\n  console.log(data);\r\n});\r\n\r\nptyProcess.write('ls\\r');\r\nptyProcess.resize(100, 40);\r\nptyProcess.write('ls\\r');\r\n```\r\n\r\n## Building\r\n\r\n```bash\r\n# Install dependencies and build C++\r\nnpm install\r\n# Compile TypeScript -> JavaScript\r\nnpm run tsc\r\n```\r\n\r\n### Dependencies on Windows\r\n\r\n`npm install` requires some tools to be present in the system like Python and C++ compiler. Windows users can easily install them by running the following command in PowerShell as administrator. For more information see https://github.com/felixrieseberg/windows-build-tools:\r\n\r\n```sh\r\nnpm install --global --production windows-build-tools\r\n```\r\n\r\nThe Windows SDK is also needed which can be [downloaded here](https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk). Only the \"Desktop C++ Apps\" components are needed to be installed.\r\n\r\n## Debugging\r\n\r\n[The wiki](https://github.com/Microsoft/node-pty/wiki/Debugging) contains instructions for debugging node-pty.\r\n\r\n## Security\r\n\r\nAll processes launched from node-pty will launch at the same permission level of the parent process. Take care particularly when using node-pty inside a server that's accessible on the internet. We recommend launching the pty inside a container to protect your host machine.\r\n\r\n## Thread Safety\r\n\r\nNote that node-pty is not thread safe so running it across multiple worker threads in node.js could cause issues.\r\n\r\n## Troubleshooting\r\n\r\n**Powershell gives error 8009001d**\r\n\r\n> Internal Windows PowerShell error.  Loading managed Windows PowerShell failed with error 8009001d.\r\n\r\nThis happens when PowerShell is launched with no `SystemRoot` environment variable present.\r\n\r\n## pty.js\r\n\r\nThis project is forked from [chjj/pty.js](https://github.com/chjj/pty.js) with the primary goals being to provide better support for later Node.JS versions and Windows.\r\n\r\n## License\r\n\r\nCopyright (c) 2012-2015, Christopher Jeffrey (MIT License).<br>\r\nCopyright (c) 2016, Daniel Imms (MIT License).\r\n","readmeFilename":"README.md","_id":"node-pty@0.7.8-conpty1","_npmVersion":"5.6.0","_nodeVersion":"8.11.4","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"integrity":"sha512-SgJfdXjFrXKKKWnambySkQApfRhKRhMxfowoRczdBjMA7DiQGyK3ysmIcR7RdA4wHOWLrYtAEqI5bIHprSyXpA==","shasum":"f92f526881a6f10eadab507250902d3dd606ae05","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.7.8-conpty1.tgz","fileCount":228,"unpackedSize":1047243,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcEAnWCRA9TVsSAnZWagAAFM4P/RgQJj2Icfr6a8R9WTh0\n0JOIHyJrKnEPLw+IPSoqwYa/WrVNaq+2+SmGu6TbIbO1wD8p+2ZMYzlw303m\ng+lhc0B8OjBU9n2BQwhb4CjPdAr1Ik1vWMYR8flBuEdXjr/yRFQ7pwIidS6w\n3Fm98uRc3HYqOw0j6vrKdQk9rrJrhtdBj0pkd4SwDLC6uUPGYUS/76sClqIY\nWw/cTsm0CruRGF+/uAru3QG5ARCsKsOZi0N7tG0hTURzQ719G2dmHw0diDhr\nsrmk8wnudIg+5KbHWuy1vudReiy7caPMWiXEYwn16HvTkgyWDKNNY1A8NFIw\nkNJ0QRViZXDZN3/Ng9eZ8jMlRfAdGujVpU2MA0v5KXmE90j6ZN1GY91ALLz3\nB/8EFLl6zALqL6KaDDO6Sj0Y/+HtTs6xn7DnhgVZ+qUeaR5HKEdI4K2S6b9r\ntHs3mtaOR6DLR13rwn1XCgYPVUaPc1CjHkw4eD13nHaXaCnU8mCbxkM4pdYu\n4XmmNwo9S+tDtY+VNyPXKCX3jhfWS6IHwN9QimIRMqHryOAfLNFxH4cbiUyE\nalQ5pWlkoQznovuZYvDFk5+UXB/QX3DpW35KlI2QZmmnVGEUF52qC+ctYfac\nCNyNDU8Uih/+CTVfUjyBrFazAi0zStvqVxDDICYlOa5Guafn53ZwmhieU5uP\nVVTJ\r\n=qx/A\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"alros@microsoft.com","name":"alexr00"},{"email":"npmjs@microsoft.com","name":"microsoft"},{"email":"tyriar@tyriar.com","name":"tyriar"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty_0.7.8-conpty1_1544554966095_0.9774627891088956"},"_hasShrinkwrap":false},"0.7.8-conpty2":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Daniel Imms"},"version":"0.7.8-conpty2","license":"MIT","main":"./lib/index.js","types":"./typings/node-pty.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","lint":"tslint 'src/**/*.ts'","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec --exit lib/*.test.js","prepublish":"npm run tsc"},"dependencies":{"nan":"2.10.0"},"devDependencies":{"@types/mocha":"^5.0.0","@types/node":"^6.0.104","cross-env":"^5.1.4","mocha":"^5.0.5","pollUntil":"^1.0.3","tslint":"^5.9.1","tslint-consistent-codestyle":"^1.13.0","typescript":"^2.8.1"},"gitHead":"dfb319c2fe01830131bbe52a2fa304cef86391e3","readme":"# node-pty\r\n\r\n[![Build status](https://tyriar.visualstudio.com/_apis/public/build/definitions/2d361770-e039-4acc-b2b2-ef8396473589/1/badge)](https://tyriar.visualstudio.com/node-pty/_build/index?definitionId=1)\r\n\r\n`forkpty(3)` bindings for node.js. This allows you to fork processes with pseudoterminal file descriptors. It returns a terminal object which allows reads and writes.\r\n\r\nThis is useful for:\r\n\r\n- Writing a terminal emulator (eg. via [xterm.js](https://github.com/sourcelair/xterm.js)).\r\n- Getting certain programs to *think* you're a terminal, such as when you need a program to send you control sequences.\r\n\r\n`node-pty` supports Linux, macOS and Windows. Windows support is possible by utilizing the [winpty](https://github.com/rprichard/winpty) library.\r\n\r\n## Real-world Uses\r\n\r\n`node-pty` powers many different terminal emulators, including:\r\n\r\n- [Microsoft Visual Studio Code](https://code.visualstudio.com)\r\n- [Hyper](https://hyper.is/)\r\n- [Upterm](https://github.com/railsware/upterm)\r\n- [Script Runner](https://github.com/ioquatix/script-runner) for Atom.\r\n- [Theia](https://github.com/theia-ide/theia)\r\n- [FreeMAN](https://github.com/matthew-matvei/freeman) file manager\r\n- [atom-xterm](https://atom.io/packages/atom-xterm) - Atom plugin for providing terminals inside your Atom workspace.\r\n\r\nDo you use node-pty in your application as well? Please open a [Pull Request](https://github.com/Tyriar/node-pty/pulls) to include it here. We would love to have it in our list.\r\n\r\n## Example Usage\r\n\r\n```js\r\nvar os = require('os');\r\nvar pty = require('node-pty');\r\n\r\nvar shell = os.platform() === 'win32' ? 'powershell.exe' : 'bash';\r\n\r\nvar ptyProcess = pty.spawn(shell, [], {\r\n  name: 'xterm-color',\r\n  cols: 80,\r\n  rows: 30,\r\n  cwd: process.env.HOME,\r\n  env: process.env\r\n});\r\n\r\nptyProcess.on('data', function(data) {\r\n  console.log(data);\r\n});\r\n\r\nptyProcess.write('ls\\r');\r\nptyProcess.resize(100, 40);\r\nptyProcess.write('ls\\r');\r\n```\r\n\r\n## Building\r\n\r\n```bash\r\n# Install dependencies and build C++\r\nnpm install\r\n# Compile TypeScript -> JavaScript\r\nnpm run tsc\r\n```\r\n\r\n### Dependencies on Windows\r\n\r\n`npm install` requires some tools to be present in the system like Python and C++ compiler. Windows users can easily install them by running the following command in PowerShell as administrator. For more information see https://github.com/felixrieseberg/windows-build-tools:\r\n\r\n```sh\r\nnpm install --global --production windows-build-tools\r\n```\r\n\r\nThe Windows SDK is also needed which can be [downloaded here](https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk). Only the \"Desktop C++ Apps\" components are needed to be installed.\r\n\r\n## Debugging\r\n\r\n[The wiki](https://github.com/Microsoft/node-pty/wiki/Debugging) contains instructions for debugging node-pty.\r\n\r\n## Security\r\n\r\nAll processes launched from node-pty will launch at the same permission level of the parent process. Take care particularly when using node-pty inside a server that's accessible on the internet. We recommend launching the pty inside a container to protect your host machine.\r\n\r\n## Thread Safety\r\n\r\nNote that node-pty is not thread safe so running it across multiple worker threads in node.js could cause issues.\r\n\r\n## Troubleshooting\r\n\r\n**Powershell gives error 8009001d**\r\n\r\n> Internal Windows PowerShell error.  Loading managed Windows PowerShell failed with error 8009001d.\r\n\r\nThis happens when PowerShell is launched with no `SystemRoot` environment variable present.\r\n\r\n## pty.js\r\n\r\nThis project is forked from [chjj/pty.js](https://github.com/chjj/pty.js) with the primary goals being to provide better support for later Node.JS versions and Windows.\r\n\r\n## License\r\n\r\nCopyright (c) 2012-2015, Christopher Jeffrey (MIT License).<br>\r\nCopyright (c) 2016, Daniel Imms (MIT License).\r\n","readmeFilename":"README.md","_id":"node-pty@0.7.8-conpty2","_npmVersion":"5.6.0","_nodeVersion":"8.11.4","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"integrity":"sha512-mhwu3f9n2s4WM94eCDZfRfApZJWKBQH5xfeBSvd9n9TV3UdrJ1CrTYhPqCBrugJesf8kxXp0fSS2tnDCTo5B7A==","shasum":"6fa5385f821f87749084a6d83961042d989750ad","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.7.8-conpty2.tgz","fileCount":229,"unpackedSize":1050531,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcHTY/CRA9TVsSAnZWagAAoygP/266IZhhQ2VXixq3Z+2q\nKWTxQxsyGPNI95L4JO4CzhNVJJlRCOqvskg8uKkEui8kThUxLpfypSlwXwIm\nTVxuqEd8PFW/CGoVh2O5z+nniQilIQt17R3BqcGLangEJchH6rvbDn0YWSfa\n9bhRD6SQvLV9lnaa+sOCVkCpK8oE5ZeLJqzk7BWsW9/kGuAFMjUFIC/3DrxN\nM+bVW/nJsNGKzyFlSYZCk/B6AHyUAXFC05Zf6OWXabFWiQgn9MAy01mVeOmO\nfO21Cafl7uqg60qmyPlMbF4erSz5ThBM5fyIVH/0HV0axesXglzgmot8H0ge\ndRTfJpo7RdzSfh2IPMh5GYyhTUh7qbly67hlKHmW0ej/1INZBKLWkxiAxI8c\nmJkHdxTcYjN0iyQ9eOV4dNrbpAIqJju4bFXsanhJ1jWmsSzoKm+BTh31a8HP\n/PxqgIusesgLr7rWgp3cbxx9rtwF0I9u4GbpLjsRTpxpcxulFuEalT/9OWIL\nvt+jrQK+ZPVHQFWvDEpUhKLzKTVV2D++0S4XkbielilAZl/f8iRdjmXi6CqZ\njM3zkmhkvRtJMwzkSYF4xGB49JQxL7CK0gz7OqQZNCx4Wm3AGW4uHh+smEk+\ni1eM2THR5FGwhdulP+HpKaENeE5f6/qOrlpZRvauNX76n5zXmrmWepXxTHS+\n2hGb\r\n=xVtk\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"alros@microsoft.com","name":"alexr00"},{"email":"npmjs@microsoft.com","name":"microsoft"},{"email":"tyriar@tyriar.com","name":"tyriar"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty_0.7.8-conpty2_1545418302719_0.7839008789229187"},"_hasShrinkwrap":false},"0.8.0":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Microsoft Corporation"},"version":"0.8.0","license":"MIT","main":"./lib/index.js","types":"./typings/node-pty.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","lint":"tslint 'src/**/*.ts'","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec --exit lib/*.test.js","prepublish":"npm run tsc"},"dependencies":{"nan":"2.10.0"},"devDependencies":{"@types/mocha":"^5.0.0","@types/node":"^6.0.104","cross-env":"^5.1.4","mocha":"^5.0.5","pollUntil":"^1.0.3","tslint":"^5.9.1","tslint-consistent-codestyle":"^1.13.0","typescript":"^2.8.1"},"gitHead":"6a385f94c1c15bc9c7688eda4c3666f6fbceede6","_id":"node-pty@0.8.0","_npmVersion":"5.6.0","_nodeVersion":"8.11.4","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"integrity":"sha512-g5ggk3gN4gLrDmAllee5ScFyX3YzpOC/U8VJafha4pE7do0TIE1voiIxEbHSRUOPD1xYqmY+uHhOKAd3avbxGQ==","shasum":"08bccb633f49e2e3f7245eb56ea6b40f37ccd64f","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.8.0.tgz","fileCount":229,"unpackedSize":1054992,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcHU4uCRA9TVsSAnZWagAAdcgP/0LSwV6446RNPKnY+s4n\n/Oc97i7Ltc2/Eohno+219a4CYyw4xY+4D/5BQHg3uyC+ZqPL3Bt297H0U/HW\nMkvOkmzyKwlm/ojhSg+89fxKgNUsxIy9BZbcQzS+w4TUmiADCU5kgmusCZ4M\nFX2wPty7DX36F+dUhwM1hyJbOzk0emNFvNzdKkEHWiqeewNVD0/1NyTd4xaM\nl/74hiX9zDD1NC5//B3t2f5b4WV9gL2kBsC/B4gmtD1W4ywxZzCeOQXjqfKv\ndbWlsWMKQn+E8/vxCC/KZp9IG8J3NrEljDB3X+bdXCEDbMQ1GW6AB0ejywnr\nLqcDZwelN+ZJiwR9rHdLaVyvRHI9lf3NiR4rfNdXt4ycRGsMLG2FQ0YgVvo5\nczA/sfxp0x8lCzq2dsu3CbBl4ZsXxOWijqjW0OS49Xda6DE4v4fXwOUwp2zh\nmaDhDd9/V2n42g/6Hrc9CjbaIKif/BmtI7RiLA/Zzp6dno15XgXhLtwtTqUN\niy81GrXZFhbO13VsJkVf0YgNnwy8tMd1/YWYnwT04zETDg3hTBNid1LnxlEh\njZsxSQXQCSVsE7rvu2b9AwnQEM3/+OZ3twEq41MwPN/7egQyaUKs9cMeCmyt\n6oKUWiCiIJMli5xXd3mzbOWzEHADgtWOLHdYusc3IhPH4ydiLMAofrt1gzCF\nfOBO\r\n=wWtw\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"alros@microsoft.com","name":"alexr00"},{"email":"npmjs@microsoft.com","name":"microsoft"},{"email":"tyriar@tyriar.com","name":"tyriar"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty_0.8.0_1545424429491_0.9948781030396652"},"_hasShrinkwrap":false},"0.8.1":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Microsoft Corporation"},"version":"0.8.1","license":"MIT","main":"./lib/index.js","types":"./typings/node-pty.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","watch":"tsc -w","lint":"tslint 'src/**/*.ts'","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec --exit lib/*.test.js","prepublish":"npm run tsc"},"dependencies":{"nan":"2.12.1"},"devDependencies":{"@types/mocha":"^5.0.0","@types/node":"^6.0.104","@types/ps-list":"^6.0.0","cross-env":"^5.1.4","mocha":"^5.0.5","pollUntil":"^1.0.3","ps-list":"^6.0.0","tslint":"^5.12.1","tslint-consistent-codestyle":"^1.15.0","typescript":"^3.2.2"},"gitHead":"783135c03c36d1d413b558834baae4cbec0544c4","_id":"node-pty@0.8.1","_npmVersion":"6.4.1","_nodeVersion":"8.15.0","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"integrity":"sha512-j+/g0Q5dR+vkELclpJpz32HcS3O/3EdPSGPvDXJZVJQLCvgG0toEbfmymxAEyQyZEpaoKHAcoL+PvKM+4N9nlw==","shasum":"94b457bec013e7a09b8d9141f63b0787fa25c23f","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.8.1.tgz","fileCount":233,"unpackedSize":1045827,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcRMwhCRA9TVsSAnZWagAArrAP+QHC4yq2wzgJe5tuLHHs\nxAt+Wmiw3jZw4/oQFMU4dp0hHyEUn+nu3L/XCGIdjBbvAnInXT1sEbDZFZz/\nOQxhVBO8wyHKtqVjKkjQ3gqY2MkOzoj+YtJv5C0d7+w6+bXztAiyfpWI64FU\nfatJnY+LWuEcO+cmPTSf96mPePpuDrTzmyf0mzxsMJ5fxkQbcVz5CSgl+3AN\n6J8aRgGmb4e1CIpOABMaqeIk8tiz0TUulfmI72bHrE0vaGrfS7rXsJpdt0pk\nohKp6hanAz/XoXFE05teYrjCaeQ4hor1KwMqLvkO/9cKdNlozJSDmeoN2daH\n1Yvh6saqDm+yDKhtzzyw3xFMnXSvHY28xMdgDqF+0Ry0mE6LTg375YoQvRRg\nl48rVoGUBTrcK35io6X3Nj69hrPHx/teOUOKpBxNQpLueF9p8kGpeIe3C5C8\n6+fFJiY78ReTIWaJZfFJE932aold5TQTcRKjrNe6e5Ch2uxiCMlKajr0sqSk\nSdnfPgU9Bg3+c2ezRs3vJ8RoBBkxDJXOmvYJWgM0OHn05T2tMm7Yq4Qlv+Lh\nFfD63PyJu0GeDvZUdv/IBkT4beoa+nGX8WBOKVv6LXVbTGkslK0GS4AoJMIb\nOhXSGMFEBVsdrXovGgfglLI04xWTEyVgyZfweswrEFj6ZchhfWg1l5MIeoea\nBA2P\r\n=7amJ\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"alros@microsoft.com","name":"alexr00"},{"email":"npmjs@microsoft.com","name":"microsoft"},{"email":"tyriar@tyriar.com","name":"tyriar"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty_0.8.1_1548012576410_0.2800035544234585"},"_hasShrinkwrap":false},"0.8.2-beta1":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Microsoft Corporation"},"version":"0.8.2-beta1","license":"MIT","main":"./lib/index.js","types":"./typings/node-pty.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","watch":"tsc -w","lint":"tslint 'src/**/*.ts'","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec --exit lib/*.test.js","prepublish":"npm run tsc"},"dependencies":{"nan":"2.12.1"},"devDependencies":{"@types/mocha":"^5.0.0","@types/node":"^6.0.104","cross-env":"^5.1.4","mocha":"^5.0.5","pollUntil":"^1.0.3","ps-list":"^6.0.0","tslint":"^5.12.1","tslint-consistent-codestyle":"^1.15.0","typescript":"^3.2.2"},"gitHead":"6b5ff701e8e901c0e78e422d8e72386174bdc01a","readme":"# node-pty\r\n\r\n[![Build Status](https://dev.azure.com/vscode/node-pty/_apis/build/status/Microsoft.node-pty)](https://dev.azure.com/vscode/node-pty/_apis/build/status/Microsoft.node-pty?branchName=master)\r\n\r\n`forkpty(3)` bindings for node.js. This allows you to fork processes with pseudoterminal file descriptors. It returns a terminal object which allows reads and writes.\r\n\r\nThis is useful for:\r\n\r\n- Writing a terminal emulator (eg. via [xterm.js](https://github.com/sourcelair/xterm.js)).\r\n- Getting certain programs to *think* you're a terminal, such as when you need a program to send you control sequences.\r\n\r\n`node-pty` supports Linux, macOS and Windows. Windows support is possible by utilizing the [Windows conpty API](https://blogs.msdn.microsoft.com/commandline/2018/08/02/windows-command-line-introducing-the-windows-pseudo-console-conpty/) on Windows 1809+ and the [winpty](https://github.com/rprichard/winpty) library in older version.\r\n\r\n## Real-world Uses\r\n\r\n`node-pty` powers many different terminal emulators, including:\r\n\r\n- [Microsoft Visual Studio Code](https://code.visualstudio.com)\r\n- [Hyper](https://hyper.is/)\r\n- [Upterm](https://github.com/railsware/upterm)\r\n- [Script Runner](https://github.com/ioquatix/script-runner) for Atom.\r\n- [Theia](https://github.com/theia-ide/theia)\r\n- [FreeMAN](https://github.com/matthew-matvei/freeman) file manager\r\n- [atom-xterm](https://atom.io/packages/atom-xterm) - Atom plugin for providing terminals inside your Atom workspace.\r\n- [Termination](https://atom.io/packages/termination) - Another Atom plugin that provides terminals inside your Atom workspace.\r\n- [electerm](https://github.com/electerm/electerm) Terminal/ssh/sftp client(linux, mac, win).\r\n- [Extraterm](http://extraterm.org/)\r\n\r\nDo you use node-pty in your application as well? Please open a [Pull Request](https://github.com/Tyriar/node-pty/pulls) to include it here. We would love to have it in our list.\r\n\r\n## Example Usage\r\n\r\n```js\r\nvar os = require('os');\r\nvar pty = require('node-pty');\r\n\r\nvar shell = os.platform() === 'win32' ? 'powershell.exe' : 'bash';\r\n\r\nvar ptyProcess = pty.spawn(shell, [], {\r\n  name: 'xterm-color',\r\n  cols: 80,\r\n  rows: 30,\r\n  cwd: process.env.HOME,\r\n  env: process.env\r\n});\r\n\r\nptyProcess.on('data', function(data) {\r\n  process.stdout.write(data);\r\n});\r\n\r\nptyProcess.write('ls\\r');\r\nptyProcess.resize(100, 40);\r\nptyProcess.write('ls\\r');\r\n```\r\n\r\n## Building\r\n\r\n```bash\r\n# Install dependencies and build C++\r\nnpm install\r\n# Compile TypeScript -> JavaScript\r\nnpm run tsc\r\n```\r\n\r\n## Dependencies\r\n\r\n### Linux/Ubuntu\r\n\r\n```\r\nsudo apt install -y make python build-essential\r\n```\r\n\r\nThe following are also needed:\r\n\r\n- Node.JS 10+\r\n\r\n### Windows\r\n\r\n`npm install` requires some tools to be present in the system like Python and C++ compiler. Windows users can easily install them by running the following command in PowerShell as administrator. For more information see https://github.com/felixrieseberg/windows-build-tools:\r\n\r\n```sh\r\nnpm install --global --production windows-build-tools\r\n```\r\n\r\nThe following are also needed:\r\n\r\n- [Windows SDK](https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk) - only the \"Desktop C++ Apps\" components are needed to be installed\r\n- Node.JS 10+\r\n\r\n## Debugging\r\n\r\n[The wiki](https://github.com/Microsoft/node-pty/wiki/Debugging) contains instructions for debugging node-pty.\r\n\r\n## Security\r\n\r\nAll processes launched from node-pty will launch at the same permission level of the parent process. Take care particularly when using node-pty inside a server that's accessible on the internet. We recommend launching the pty inside a container to protect your host machine.\r\n\r\n## Thread Safety\r\n\r\nNote that node-pty is not thread safe so running it across multiple worker threads in node.js could cause issues.\r\n\r\n## Troubleshooting\r\n\r\n### Powershell gives error 8009001d\r\n\r\n> Internal Windows PowerShell error.  Loading managed Windows PowerShell failed with error 8009001d.\r\n\r\nThis happens when PowerShell is launched with no `SystemRoot` environment variable present.\r\n\r\n### ConnectNamedPipe failed: Windows error 232\r\n\r\nThis error can occur due to anti-virus software intercepting winpty from creating a pty. To workaround this you can exclude this file from your anti-virus scanning `node-pty\\build\\Release\\winpty-agent.exe`\r\n\r\n## pty.js\r\n\r\nThis project is forked from [chjj/pty.js](https://github.com/chjj/pty.js) with the primary goals being to provide better support for later Node.JS versions and Windows.\r\n\r\n## License\r\n\r\nCopyright (c) 2012-2015, Christopher Jeffrey (MIT License).<br>\r\nCopyright (c) 2016, Daniel Imms (MIT License).<br>\r\nCopyright (c) 2018, Microsoft Corporation (MIT License).\r\n","readmeFilename":"README.md","_id":"node-pty@0.8.2-beta1","_npmVersion":"6.4.1","_nodeVersion":"10.15.1","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"integrity":"sha512-1y2/BUFRZ8gtkVZuX+wV8+qvSNQl1vVo4wVzijvtg96/evaJH7mwyGB/Cx4pcWwbkfngbLestz8Sbda4+8xQgg==","shasum":"0bd69db8e684bb5a09a09057208f36fbb951fd48","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.8.2-beta1.tgz","fileCount":239,"unpackedSize":1086152,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcyxAdCRA9TVsSAnZWagAAgoAP/1FUi/XUQvZrJt3rqR2f\n9LqppODkr9SkY8gCfnrpIWbB4+K6Xa/txhRS6e1qlYvS9cjt75i/Y9ZbEFg0\nIJxg17cyZu3XQ2iZEf9TbTaGg9j5czJlxI1o1Jl1OLT/qR7YsTSGbOfEpq4o\nU3Ec/yTy1c6p6mQPktxgo5kzP3I+J1g0PxXbuU+C3f0cJIWKyY83tbUkfJPp\nyLT/sgPkdguYdD8z0lFijwQaN9iMFcKnY2kCmiFo7IpOiH2P+UYiiem+pWWh\n7Z9orYP5nmfc0hoUk6PzQwBJbOfuzVVhmzXFn+xu0sbUbtxUa1fssIcztqZw\nSscNqN0wVjViYMQAgWwYMHjOW7/orTEPtMCvY12j8+HPF+z2yOH153v/I0dE\nzfLodPqxLKxzHdHw0NIn1og66Xxpt8AL5TYX4jFhOHgpMP/STH8/f+rCB7pG\n4AEglNMstOs5Mk7rCOkLowkd5DL/tOMLyiW6RvUGvCvGVxmy1w+GXwYVrmd8\nS/Tr6d1tK/VLV6/N5GubwKD1JVsdwVExC21NMymrqB+xHE2Hk2SsuE3Tj3Pk\nuV+1GnJBzjDt4kAYE/kAbYJwNHg2/7fjouQ7RdnKGAlofqTf+v5F0sDf8tG4\nSXNyLKF9btRuUJ5rf9tq3qfzGJciPDE4fS6fVzQCP9Wbk2ba6nV28jWEG+5U\nMSlG\r\n=SZTN\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"alros@microsoft.com","name":"alexr00"},{"email":"npmjs@microsoft.com","name":"microsoft"},{"email":"tyriar@tyriar.com","name":"tyriar"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty_0.8.2-beta1_1556811805171_0.715811009937962"},"_hasShrinkwrap":false},"0.9.0-beta1":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Microsoft Corporation"},"version":"0.9.0-beta1","license":"MIT","main":"./lib/index.js","types":"./typings/node-pty.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","watch":"tsc -w","lint":"tslint 'src/**/*.ts'","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec --exit lib/*.test.js","prepublish":"npm run tsc"},"dependencies":{"nan":"^2.13.2"},"devDependencies":{"@types/mocha":"^5.0.0","@types/node":"^6.0.104","cross-env":"^5.1.4","mocha":"^5.0.5","pollUntil":"^1.0.3","ps-list":"^6.0.0","tslint":"^5.12.1","tslint-consistent-codestyle":"^1.15.0","typescript":"^3.2.2"},"gitHead":"d5a1ff338da5a9f225d3d03c6404082cc7b94d46","readme":"# node-pty\n\n[![Build Status](https://dev.azure.com/vscode/node-pty/_apis/build/status/Microsoft.node-pty)](https://dev.azure.com/vscode/node-pty/_build/latest?definitionId=11)\n\n`forkpty(3)` bindings for node.js. This allows you to fork processes with pseudoterminal file descriptors. It returns a terminal object which allows reads and writes.\n\nThis is useful for:\n\n- Writing a terminal emulator (eg. via [xterm.js](https://github.com/sourcelair/xterm.js)).\n- Getting certain programs to *think* you're a terminal, such as when you need a program to send you control sequences.\n\n`node-pty` supports Linux, macOS and Windows. Windows support is possible by utilizing the [Windows conpty API](https://blogs.msdn.microsoft.com/commandline/2018/08/02/windows-command-line-introducing-the-windows-pseudo-console-conpty/) on Windows 1809+ and the [winpty](https://github.com/rprichard/winpty) library in older version.\n\n## Real-world Uses\n\n`node-pty` powers many different terminal emulators, including:\n\n- [Microsoft Visual Studio Code](https://code.visualstudio.com)\n- [Hyper](https://hyper.is/)\n- [Upterm](https://github.com/railsware/upterm)\n- [Script Runner](https://github.com/ioquatix/script-runner) for Atom.\n- [Theia](https://github.com/theia-ide/theia)\n- [FreeMAN](https://github.com/matthew-matvei/freeman) file manager\n- [atom-xterm](https://atom.io/packages/atom-xterm) - Atom plugin for providing terminals inside your Atom workspace.\n- [Termination](https://atom.io/packages/termination) - Another Atom plugin that provides terminals inside your Atom workspace.\n- [electerm](https://github.com/electerm/electerm) Terminal/ssh/sftp client(linux, mac, win).\n- [Extraterm](http://extraterm.org/)\n\nDo you use node-pty in your application as well? Please open a [Pull Request](https://github.com/Tyriar/node-pty/pulls) to include it here. We would love to have it in our list.\n\n## Example Usage\n\n```js\nvar os = require('os');\nvar pty = require('node-pty');\n\nvar shell = os.platform() === 'win32' ? 'powershell.exe' : 'bash';\n\nvar ptyProcess = pty.spawn(shell, [], {\n  name: 'xterm-color',\n  cols: 80,\n  rows: 30,\n  cwd: process.env.HOME,\n  env: process.env\n});\n\nptyProcess.on('data', function(data) {\n  process.stdout.write(data);\n});\n\nptyProcess.write('ls\\r');\nptyProcess.resize(100, 40);\nptyProcess.write('ls\\r');\n```\n\n## Building\n\n```bash\n# Install dependencies and build C++\nnpm install\n# Compile TypeScript -> JavaScript\nnpm run tsc\n```\n\n## Dependencies\n\n### Linux/Ubuntu\n\n```\nsudo apt install -y make python build-essential\n```\n\nThe following are also needed:\n\n- Node.JS 10+\n\n### Windows\n\n`npm install` requires some tools to be present in the system like Python and C++ compiler. Windows users can easily install them by running the following command in PowerShell as administrator. For more information see https://github.com/felixrieseberg/windows-build-tools:\n\n```sh\nnpm install --global --production windows-build-tools\n```\n\nThe following are also needed:\n\n- [Windows SDK](https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk) - only the \"Desktop C++ Apps\" components are needed to be installed\n- Node.JS 10+\n\n## Debugging\n\n[The wiki](https://github.com/Microsoft/node-pty/wiki/Debugging) contains instructions for debugging node-pty.\n\n## Security\n\nAll processes launched from node-pty will launch at the same permission level of the parent process. Take care particularly when using node-pty inside a server that's accessible on the internet. We recommend launching the pty inside a container to protect your host machine.\n\n## Thread Safety\n\nNote that node-pty is not thread safe so running it across multiple worker threads in node.js could cause issues.\n\n## Troubleshooting\n\n### Powershell gives error 8009001d\n\n> Internal Windows PowerShell error.  Loading managed Windows PowerShell failed with error 8009001d.\n\nThis happens when PowerShell is launched with no `SystemRoot` environment variable present.\n\n### ConnectNamedPipe failed: Windows error 232\n\nThis error can occur due to anti-virus software intercepting winpty from creating a pty. To workaround this you can exclude this file from your anti-virus scanning `node-pty\\build\\Release\\winpty-agent.exe`\n\n## pty.js\n\nThis project is forked from [chjj/pty.js](https://github.com/chjj/pty.js) with the primary goals being to provide better support for later Node.JS versions and Windows.\n\n## License\n\nCopyright (c) 2012-2015, Christopher Jeffrey (MIT License).<br>\nCopyright (c) 2016, Daniel Imms (MIT License).<br>\nCopyright (c) 2018, Microsoft Corporation (MIT License).\n","readmeFilename":"README.md","_id":"node-pty@0.9.0-beta1","_npmVersion":"6.4.1","_nodeVersion":"8.16.0","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"integrity":"sha512-ncEljJ6QUu30rbZeo3nq/2ufTxgLFf1buzTIB+ARM4BAi+i/z7K6RGobgOU4VF7gWVEuzmyCjzDvDWkiDz3kMQ==","shasum":"177f50dbc84c59348896c07b4df0f3492b1d8c53","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.9.0-beta1.tgz","fileCount":240,"unpackedSize":1061336,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc1ZP6CRA9TVsSAnZWagAAOekQAJlyzn6v3T++w1NMoqLm\nZu/QuOMR5VKZhbhUaHhDAF4tOuHoEXenNoqAT4jWW4ekmhJx4ZYYmvyg2DF6\ny/U+HTdcKRy8MDTvl//8uimIh+tMti/vEdjOsJI7iDRymyohXviF6ot/uHaL\njB/qCsNdpQcDE0I6hQjxCkYw2htXLgf2hticcoYjNjE+Cl9ew7CCldqBXzoA\nvFeGtdWnBXDy7M1ZJmVLIP1vZdF3VX1ThRS5g3NYT0zEF4xOPOVMRJPKP7P7\nPzm/RnGxv9uA7nsHhV7h4J+6KEeL5f5NWWfuTY6fSjYhm4bcDiSottXeBvmB\nsJTyxmJOkixQ++AAZe7u7jFp45DAHZjmawruMI7XY59CoFiD0Unvm4X+26yM\nXWUbhMzxNPP1Rsd+TEOrRRlvn7VIEczmS4wRblKpbqf6BW9pdzDnI8cD0YFi\n4VXWua6qqXTs9IGsTEeMtYDU7MAQo+XZAf3FDRRneYwztgAsiDJwSrRumKQt\nxI5KAevYSS9vQVwWpiqCOl43LvwN77ocMfdMuukr61mxOx8R0SJuJrAUqakR\n+igfdUxp/2o0yHk3k7I6w4TS3tXIkLobM4dBr4H3x1EnT79SalKXTIaro+9o\nrf4gW4Se297chBgKs1s1QdUTlR41nKsMSGdRuhsMTg+GmYPSaLmnlOTnBBjs\nH9xA\r\n=3hds\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"alros@microsoft.com","name":"alexr00"},{"email":"npmjs@microsoft.com","name":"microsoft"},{"email":"tyriar@tyriar.com","name":"tyriar"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty_0.9.0-beta1_1557500921831_0.6746350527346687"},"_hasShrinkwrap":false},"0.9.0-beta2":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Microsoft Corporation"},"version":"0.9.0-beta2","license":"MIT","main":"./lib/index.js","types":"./typings/node-pty.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","watch":"tsc -w","lint":"tslint 'src/**/*.ts'","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec --exit lib/*.test.js","prepublish":"npm run tsc"},"dependencies":{"nan":"^2.13.2"},"devDependencies":{"@types/mocha":"^5.0.0","@types/node":"^6.0.104","cross-env":"^5.1.4","mocha":"^5.0.5","pollUntil":"^1.0.3","ps-list":"^6.0.0","tslint":"^5.12.1","tslint-consistent-codestyle":"^1.15.0","typescript":"^3.2.2"},"gitHead":"4637d85ec7c1ebffe3afb7a290fb9866ee752a54","readme":"# node-pty\n\n[![Build Status](https://dev.azure.com/vscode/node-pty/_apis/build/status/Microsoft.node-pty)](https://dev.azure.com/vscode/node-pty/_build/latest?definitionId=11)\n\n`forkpty(3)` bindings for node.js. This allows you to fork processes with pseudoterminal file descriptors. It returns a terminal object which allows reads and writes.\n\nThis is useful for:\n\n- Writing a terminal emulator (eg. via [xterm.js](https://github.com/sourcelair/xterm.js)).\n- Getting certain programs to *think* you're a terminal, such as when you need a program to send you control sequences.\n\n`node-pty` supports Linux, macOS and Windows. Windows support is possible by utilizing the [Windows conpty API](https://blogs.msdn.microsoft.com/commandline/2018/08/02/windows-command-line-introducing-the-windows-pseudo-console-conpty/) on Windows 1809+ and the [winpty](https://github.com/rprichard/winpty) library in older version.\n\n## Real-world Uses\n\n`node-pty` powers many different terminal emulators, including:\n\n- [Microsoft Visual Studio Code](https://code.visualstudio.com)\n- [Hyper](https://hyper.is/)\n- [Upterm](https://github.com/railsware/upterm)\n- [Script Runner](https://github.com/ioquatix/script-runner) for Atom.\n- [Theia](https://github.com/theia-ide/theia)\n- [FreeMAN](https://github.com/matthew-matvei/freeman) file manager\n- [atom-xterm](https://atom.io/packages/atom-xterm) - Atom plugin for providing terminals inside your Atom workspace.\n- [Termination](https://atom.io/packages/termination) - Another Atom plugin that provides terminals inside your Atom workspace.\n- [electerm](https://github.com/electerm/electerm) Terminal/ssh/sftp client(linux, mac, win).\n- [Extraterm](http://extraterm.org/)\n\nDo you use node-pty in your application as well? Please open a [Pull Request](https://github.com/Tyriar/node-pty/pulls) to include it here. We would love to have it in our list.\n\n## Example Usage\n\n```js\nvar os = require('os');\nvar pty = require('node-pty');\n\nvar shell = os.platform() === 'win32' ? 'powershell.exe' : 'bash';\n\nvar ptyProcess = pty.spawn(shell, [], {\n  name: 'xterm-color',\n  cols: 80,\n  rows: 30,\n  cwd: process.env.HOME,\n  env: process.env\n});\n\nptyProcess.on('data', function(data) {\n  process.stdout.write(data);\n});\n\nptyProcess.write('ls\\r');\nptyProcess.resize(100, 40);\nptyProcess.write('ls\\r');\n```\n\n## Building\n\n```bash\n# Install dependencies and build C++\nnpm install\n# Compile TypeScript -> JavaScript\nnpm run tsc\n```\n\n## Dependencies\n\n### Linux/Ubuntu\n\n```\nsudo apt install -y make python build-essential\n```\n\nThe following are also needed:\n\n- Node.JS 10+\n\n### Windows\n\n`npm install` requires some tools to be present in the system like Python and C++ compiler. Windows users can easily install them by running the following command in PowerShell as administrator. For more information see https://github.com/felixrieseberg/windows-build-tools:\n\n```sh\nnpm install --global --production windows-build-tools\n```\n\nThe following are also needed:\n\n- [Windows SDK](https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk) - only the \"Desktop C++ Apps\" components are needed to be installed\n- Node.JS 10+\n\n## Debugging\n\n[The wiki](https://github.com/Microsoft/node-pty/wiki/Debugging) contains instructions for debugging node-pty.\n\n## Security\n\nAll processes launched from node-pty will launch at the same permission level of the parent process. Take care particularly when using node-pty inside a server that's accessible on the internet. We recommend launching the pty inside a container to protect your host machine.\n\n## Thread Safety\n\nNote that node-pty is not thread safe so running it across multiple worker threads in node.js could cause issues.\n\n## Troubleshooting\n\n### Powershell gives error 8009001d\n\n> Internal Windows PowerShell error.  Loading managed Windows PowerShell failed with error 8009001d.\n\nThis happens when PowerShell is launched with no `SystemRoot` environment variable present.\n\n### ConnectNamedPipe failed: Windows error 232\n\nThis error can occur due to anti-virus software intercepting winpty from creating a pty. To workaround this you can exclude this file from your anti-virus scanning `node-pty\\build\\Release\\winpty-agent.exe`\n\n## pty.js\n\nThis project is forked from [chjj/pty.js](https://github.com/chjj/pty.js) with the primary goals being to provide better support for later Node.JS versions and Windows.\n\n## License\n\nCopyright (c) 2012-2015, Christopher Jeffrey (MIT License).<br>\nCopyright (c) 2016, Daniel Imms (MIT License).<br>\nCopyright (c) 2018, Microsoft Corporation (MIT License).\n","readmeFilename":"README.md","_id":"node-pty@0.9.0-beta2","_npmVersion":"6.4.1","_nodeVersion":"8.16.0","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"integrity":"sha512-M3tFSsAZONLVcszq17pLYxLWctev5UEBPyQnBv/3QuWomwMywYMY1LARV2Pi2MbVpg68zm9E1mm7cXtRBylv6A==","shasum":"497623fc7d56191447de5353135e6af1525efcf2","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.9.0-beta2.tgz","fileCount":240,"unpackedSize":1061632,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc16KYCRA9TVsSAnZWagAAH1EQAJJOCCmyvufmlACJQnAU\n5LOYqtbNMbEe9J9hFdT6rSCqJVjlaAIO9CUTo9BKvSSzTGgRh3opaqP2vzGE\nluIPy7zOiTyJO4hKwj80OCoUY4O4WZwfy3f/RUc1sNdq44dOVmRhLbTLplPi\neQWZEkQIPzj65hQibUsCxFY32B9v+WDHeYjZt4yQbDxkPFhqkFj9hK5dWLoU\nwCD9AKWJxebjtzZUpOLp1JTLvp12GNe0pA6Eu7cdbcaPl3ct4YGSab7r0yR2\n61ROH7VTtFcmd7/XYr5f+iJKTnV7QXJpuJ+oFZHxQsSo4WOJpCi03i0w0kJT\nlIuauGMcAaJtfyO4Y4XlrSyfoCa6a1KnLs5LvRCySkYSeGAGMx+H22RbqRKP\nt3nWyKlX8pBNb1V3KrOadjpwfb2J1c7oF3o2KR4YYQZJzyppTLEmQimV2XhD\nn6Q5nXAlugDF0ZjAse/YFw+rlNKdwHv0Uq1fMKvEochS2e/qr4/wkUTgbv4X\ne/8weG6AWSyfK0MZ3ugPVTvF8NrQneRyntXjJ/U5uZdEE03E5hLeSQvJp0fR\nbQEN8PeJQnuSLKqcIg2fqvUo1ITUUzFI8HFnFpQH3QBkLwq5Y1eztVUjBK0E\n89QaOJIxsEgyiT4aBwmnMC+kTYr4Y37+ITGtDmz3zw+5ljkuUDH/TRivJZRl\n0KMy\r\n=fR7t\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"alros@microsoft.com","name":"alexr00"},{"email":"npmjs@microsoft.com","name":"microsoft"},{"email":"tyriar@tyriar.com","name":"tyriar"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty_0.9.0-beta2_1557635735718_0.1665237887622104"},"_hasShrinkwrap":false},"0.9.0-beta3":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Microsoft Corporation"},"version":"0.9.0-beta3","license":"MIT","main":"./lib/index.js","types":"./typings/node-pty.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","watch":"tsc -w","lint":"tslint 'src/**/*.ts'","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec --exit lib/*.test.js","prepare":"npm run tsc","prepublishOnly":"npm run tsc"},"dependencies":{"nan":"^2.13.2"},"devDependencies":{"@types/mocha":"^5.0.0","@types/node":"^6.0.104","cross-env":"^5.1.4","mocha":"^5.0.5","pollUntil":"^1.0.3","ps-list":"^6.0.0","tslint":"^5.12.1","tslint-consistent-codestyle":"^1.15.0","typescript":"^3.2.2"},"gitHead":"9ac7b465438b43f6dd4247c26b3102332b66c032","readme":"# node-pty\n\n[![Build Status](https://dev.azure.com/vscode/node-pty/_apis/build/status/Microsoft.node-pty)](https://dev.azure.com/vscode/node-pty/_build/latest?definitionId=11)\n\n`forkpty(3)` bindings for node.js. This allows you to fork processes with pseudoterminal file descriptors. It returns a terminal object which allows reads and writes.\n\nThis is useful for:\n\n- Writing a terminal emulator (eg. via [xterm.js](https://github.com/sourcelair/xterm.js)).\n- Getting certain programs to *think* you're a terminal, such as when you need a program to send you control sequences.\n\n`node-pty` supports Linux, macOS and Windows. Windows support is possible by utilizing the [Windows conpty API](https://blogs.msdn.microsoft.com/commandline/2018/08/02/windows-command-line-introducing-the-windows-pseudo-console-conpty/) on Windows 1809+ and the [winpty](https://github.com/rprichard/winpty) library in older version.\n\n## Real-world Uses\n\n`node-pty` powers many different terminal emulators, including:\n\n- [Microsoft Visual Studio Code](https://code.visualstudio.com)\n- [Hyper](https://hyper.is/)\n- [Upterm](https://github.com/railsware/upterm)\n- [Script Runner](https://github.com/ioquatix/script-runner) for Atom.\n- [Theia](https://github.com/theia-ide/theia)\n- [FreeMAN](https://github.com/matthew-matvei/freeman) file manager\n- [atom-xterm](https://atom.io/packages/atom-xterm) - Atom plugin for providing terminals inside your Atom workspace.\n- [Termination](https://atom.io/packages/termination) - Another Atom plugin that provides terminals inside your Atom workspace.\n- [electerm](https://github.com/electerm/electerm) Terminal/ssh/sftp client(linux, mac, win).\n- [Extraterm](http://extraterm.org/)\n\nDo you use node-pty in your application as well? Please open a [Pull Request](https://github.com/Tyriar/node-pty/pulls) to include it here. We would love to have it in our list.\n\n## Example Usage\n\n```js\nvar os = require('os');\nvar pty = require('node-pty');\n\nvar shell = os.platform() === 'win32' ? 'powershell.exe' : 'bash';\n\nvar ptyProcess = pty.spawn(shell, [], {\n  name: 'xterm-color',\n  cols: 80,\n  rows: 30,\n  cwd: process.env.HOME,\n  env: process.env\n});\n\nptyProcess.on('data', function(data) {\n  process.stdout.write(data);\n});\n\nptyProcess.write('ls\\r');\nptyProcess.resize(100, 40);\nptyProcess.write('ls\\r');\n```\n\n## Building\n\n```bash\n# Install dependencies and build C++\nnpm install\n# Compile TypeScript -> JavaScript\nnpm run tsc\n```\n\n## Dependencies\n\n### Linux/Ubuntu\n\n```\nsudo apt install -y make python build-essential\n```\n\nThe following are also needed:\n\n- Node.JS 10+\n\n### Windows\n\n`npm install` requires some tools to be present in the system like Python and C++ compiler. Windows users can easily install them by running the following command in PowerShell as administrator. For more information see https://github.com/felixrieseberg/windows-build-tools:\n\n```sh\nnpm install --global --production windows-build-tools\n```\n\nThe following are also needed:\n\n- [Windows SDK](https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk) - only the \"Desktop C++ Apps\" components are needed to be installed\n- Node.JS 10+\n\n## Debugging\n\n[The wiki](https://github.com/Microsoft/node-pty/wiki/Debugging) contains instructions for debugging node-pty.\n\n## Security\n\nAll processes launched from node-pty will launch at the same permission level of the parent process. Take care particularly when using node-pty inside a server that's accessible on the internet. We recommend launching the pty inside a container to protect your host machine.\n\n## Thread Safety\n\nNote that node-pty is not thread safe so running it across multiple worker threads in node.js could cause issues.\n\n## Troubleshooting\n\n### Powershell gives error 8009001d\n\n> Internal Windows PowerShell error.  Loading managed Windows PowerShell failed with error 8009001d.\n\nThis happens when PowerShell is launched with no `SystemRoot` environment variable present.\n\n### ConnectNamedPipe failed: Windows error 232\n\nThis error can occur due to anti-virus software intercepting winpty from creating a pty. To workaround this you can exclude this file from your anti-virus scanning `node-pty\\build\\Release\\winpty-agent.exe`\n\n## pty.js\n\nThis project is forked from [chjj/pty.js](https://github.com/chjj/pty.js) with the primary goals being to provide better support for later Node.JS versions and Windows.\n\n## License\n\nCopyright (c) 2012-2015, Christopher Jeffrey (MIT License).<br>\nCopyright (c) 2016, Daniel Imms (MIT License).<br>\nCopyright (c) 2018, Microsoft Corporation (MIT License).\n","readmeFilename":"README.md","_id":"node-pty@0.9.0-beta3","_npmVersion":"6.4.1","_nodeVersion":"8.16.0","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"integrity":"sha512-5wjyMg5DqmjUs9UEb0juwNCHKCD+Z8FaJvjeHknasyyJKUGthI8nJ2zC56O+rlx/3+GQZQJvavmhLIBqvIXUdQ==","shasum":"4038193391216ced5be0ffbb724b0e645fad6e67","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.9.0-beta3.tgz","fileCount":240,"unpackedSize":1061666,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc3E8GCRA9TVsSAnZWagAABMIQAI2XIQ6OOg3O6/bROJzW\ncHnDIM+CIMSYvm6HOQeT4fHZAtwKoh1oJjvfY7SElXKo+k0DAfyXXLtGAOiY\nRn+PV351qv/TzlG9xS62nLd9N4V5dyd807fhB/ypS66eFEcedTQGlA/xP0uI\nmxbeNhls30L5kgaa/pvGP+zxlKeuPnDXbiXuYba7oB9QDDiEUN4RJG1wRvPq\nbT3fVZdwZTieRU1lWF54MJqmIJyxWblVNBIAeHUTrHfBSs4ZGcWqI7C4nPIs\n8vSCTqbogjEqubUp3CEu84T3qOz9muORt1j28sM1b4I8Ma0lJMgauOUDvgtn\nndKn5ek4FCoPFx2AW12QOq8O3N9nzCd/+0dpnCXzxb715EU6kXKrIigviW21\npP7dGTEzZp3OSsHMW8nanYWm3IlJ8ZHC8XMC/RHK1zsDGUMz+nEc4ggb2Wlk\nqSHhK6KKpOCTqFEtylNQHbwVr9nPa1CF7ll8A9YCEoB3sbPytzSTAwFawFRf\n+bXBnEngbDufYgvroZRd4mmTMEcxYm5Dm2EShznhaC3iZjUKTH9h3xr2NCph\nIvZSHy1scxZyHEzme5v4LnOTyfSwqEApAiq4tRLSWk6iw141G/TDQXJECg6+\n/qz9sl9vrvak1mqnerbLTr/cEKSkqDu8o2QDsIrEgpFi+WbJ5viTh7Lnopht\nb1bz\r\n=taZh\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"alros@microsoft.com","name":"alexr00"},{"email":"npmjs@microsoft.com","name":"microsoft"},{"email":"tyriar@tyriar.com","name":"tyriar"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty_0.9.0-beta3_1557942022162_0.06120251685258138"},"_hasShrinkwrap":false},"0.9.0-beta4":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Microsoft Corporation"},"version":"0.9.0-beta4","license":"MIT","main":"./lib/index.js","types":"./typings/node-pty.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","watch":"tsc -w","lint":"tslint 'src/**/*.ts'","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec --exit lib/*.test.js","prepare":"npm run tsc","prepublishOnly":"npm run tsc"},"dependencies":{"nan":"^2.13.2"},"devDependencies":{"@types/mocha":"^5.0.0","@types/node":"^6.0.104","cross-env":"^5.1.4","mocha":"^5.0.5","pollUntil":"^1.0.3","ps-list":"^6.0.0","tslint":"^5.12.1","tslint-consistent-codestyle":"^1.15.0","typescript":"^3.2.2"},"gitHead":"1d43bfd94a0a157b13569a7498578d9500f382f5","readme":"# node-pty\n\n[![Build Status](https://dev.azure.com/vscode/node-pty/_apis/build/status/Microsoft.node-pty)](https://dev.azure.com/vscode/node-pty/_build/latest?definitionId=11)\n\n`forkpty(3)` bindings for node.js. This allows you to fork processes with pseudoterminal file descriptors. It returns a terminal object which allows reads and writes.\n\nThis is useful for:\n\n- Writing a terminal emulator (eg. via [xterm.js](https://github.com/sourcelair/xterm.js)).\n- Getting certain programs to *think* you're a terminal, such as when you need a program to send you control sequences.\n\n`node-pty` supports Linux, macOS and Windows. Windows support is possible by utilizing the [Windows conpty API](https://blogs.msdn.microsoft.com/commandline/2018/08/02/windows-command-line-introducing-the-windows-pseudo-console-conpty/) on Windows 1809+ and the [winpty](https://github.com/rprichard/winpty) library in older version.\n\n## Real-world Uses\n\n`node-pty` powers many different terminal emulators, including:\n\n- [Microsoft Visual Studio Code](https://code.visualstudio.com)\n- [Hyper](https://hyper.is/)\n- [Upterm](https://github.com/railsware/upterm)\n- [Script Runner](https://github.com/ioquatix/script-runner) for Atom.\n- [Theia](https://github.com/theia-ide/theia)\n- [FreeMAN](https://github.com/matthew-matvei/freeman) file manager\n- [atom-xterm](https://atom.io/packages/atom-xterm) - Atom plugin for providing terminals inside your Atom workspace.\n- [Termination](https://atom.io/packages/termination) - Another Atom plugin that provides terminals inside your Atom workspace.\n- [electerm](https://github.com/electerm/electerm) Terminal/ssh/sftp client(linux, mac, win).\n- [Extraterm](http://extraterm.org/)\n\nDo you use node-pty in your application as well? Please open a [Pull Request](https://github.com/Tyriar/node-pty/pulls) to include it here. We would love to have it in our list.\n\n## Example Usage\n\n```js\nvar os = require('os');\nvar pty = require('node-pty');\n\nvar shell = os.platform() === 'win32' ? 'powershell.exe' : 'bash';\n\nvar ptyProcess = pty.spawn(shell, [], {\n  name: 'xterm-color',\n  cols: 80,\n  rows: 30,\n  cwd: process.env.HOME,\n  env: process.env\n});\n\nptyProcess.on('data', function(data) {\n  process.stdout.write(data);\n});\n\nptyProcess.write('ls\\r');\nptyProcess.resize(100, 40);\nptyProcess.write('ls\\r');\n```\n\n## Building\n\n```bash\n# Install dependencies and build C++\nnpm install\n# Compile TypeScript -> JavaScript\nnpm run tsc\n```\n\n## Dependencies\n\n### Linux/Ubuntu\n\n```\nsudo apt install -y make python build-essential\n```\n\nThe following are also needed:\n\n- Node.JS 10+\n\n### Windows\n\n`npm install` requires some tools to be present in the system like Python and C++ compiler. Windows users can easily install them by running the following command in PowerShell as administrator. For more information see https://github.com/felixrieseberg/windows-build-tools:\n\n```sh\nnpm install --global --production windows-build-tools\n```\n\nThe following are also needed:\n\n- [Windows SDK](https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk) - only the \"Desktop C++ Apps\" components are needed to be installed\n- Node.JS 10+\n\n## Debugging\n\n[The wiki](https://github.com/Microsoft/node-pty/wiki/Debugging) contains instructions for debugging node-pty.\n\n## Security\n\nAll processes launched from node-pty will launch at the same permission level of the parent process. Take care particularly when using node-pty inside a server that's accessible on the internet. We recommend launching the pty inside a container to protect your host machine.\n\n## Thread Safety\n\nNote that node-pty is not thread safe so running it across multiple worker threads in node.js could cause issues.\n\n## Troubleshooting\n\n### Powershell gives error 8009001d\n\n> Internal Windows PowerShell error.  Loading managed Windows PowerShell failed with error 8009001d.\n\nThis happens when PowerShell is launched with no `SystemRoot` environment variable present.\n\n### ConnectNamedPipe failed: Windows error 232\n\nThis error can occur due to anti-virus software intercepting winpty from creating a pty. To workaround this you can exclude this file from your anti-virus scanning `node-pty\\build\\Release\\winpty-agent.exe`\n\n## pty.js\n\nThis project is forked from [chjj/pty.js](https://github.com/chjj/pty.js) with the primary goals being to provide better support for later Node.JS versions and Windows.\n\n## License\n\nCopyright (c) 2012-2015, Christopher Jeffrey (MIT License).<br>\nCopyright (c) 2016, Daniel Imms (MIT License).<br>\nCopyright (c) 2018, Microsoft Corporation (MIT License).\n","readmeFilename":"README.md","_id":"node-pty@0.9.0-beta4","_npmVersion":"6.4.1","_nodeVersion":"8.16.0","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"integrity":"sha512-Q2LBKjtPZ43g074S06vszmVg+jaYhsvH1eL8dKUNu7c2e4DvlE9UKt4IlZKeqhMCZJFutSHJm4qcu/NtuueYXA==","shasum":"3c4e95549440ee50c05c34991abeb4922db2edb5","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.9.0-beta4.tgz","fileCount":240,"unpackedSize":1061666,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc3asYCRA9TVsSAnZWagAAjI4P/RmYg5hhD+P3viRTmkba\nPOll16RXZynVSyQyz/kkMDsRozorQ3iu6RXh0AFajjG9V1o95FMlBaWc01Np\ncLmrO3b4zoECx1cZ5DrT/4NR3k9bFSePr66fTC/pU2d9qESugim24H3r8zs0\nNZ3jgvroQUV7pLf21ueCwev8OTcxn//5MdaWfLZLbOi2wUIqs09TZ+TrAZD6\nP+0oIfb1IllB/RtKO9j7fo8/S+VeFDXegVSdiRKLp/jUBmV/mAPyIM/bH1uk\nGG8GV4Md091L9IVNGLCsGSPTFE+0x/pxF4TF4Iw6E6aBFM+8LL4XPJ7XpzWQ\njVXdnJhsNSZkxWsgTUGOu28/qNz70hcBqVH+3j/FKlY4bB4LSXeVREJoYFPW\nJRMgF8gMwgSi0ULcimDmQPQ1U6gNMONjISPaDW5ZKNf6kusX467HowlOFsk3\nmgd4kT9aRYNeMoMskTLvQIETaviWvdBQ6yoR9J5wyg1YytAvWQNyjFsWvvqg\ne5/kOYtZoHPwgszLjd3TjqYZB6rD6xrJgRiTThWuLaFIPacbdwcPK/I2T2/Q\nfNfJ7pwzLGqPNLO4T4aXLSmkGfiDMEgfuGXJ07zrfhsGLni9/1KjBQUuG12g\nq/TSlRByChqcwXkU1VgmO3DS8aMBnZ6lqICFCEScfsBGTCDwc0AR33ZDFO6j\n+FbD\r\n=KyEa\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"alros@microsoft.com","name":"alexr00"},{"email":"npmjs@microsoft.com","name":"microsoft"},{"email":"tyriar@tyriar.com","name":"tyriar"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty_0.9.0-beta4_1558031127757_0.8870365195950782"},"_hasShrinkwrap":false},"0.9.0-alpha1":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Microsoft Corporation"},"version":"0.9.0-alpha1","license":"MIT","main":"./lib/index.js","types":"./typings/node-pty.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","watch":"tsc -w","lint":"tslint 'src/**/*.ts'","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec --exit lib/*.test.js","prepublish":"npm run tsc"},"dependencies":{"nan":"^2.13.2"},"devDependencies":{"@types/mocha":"^5.0.0","@types/node":"^6.0.104","cross-env":"^5.1.4","mocha":"^5.0.5","pollUntil":"^1.0.3","ps-list":"^6.0.0","tslint":"^5.12.1","tslint-consistent-codestyle":"^1.15.0","typescript":"^3.2.2"},"gitHead":"c54e0ddd57696ed07050e99c282763b4e20bcbce","readme":"# node-pty\n\n[![Build Status](https://dev.azure.com/vscode/node-pty/_apis/build/status/Microsoft.node-pty)](https://dev.azure.com/vscode/node-pty/_apis/build/status/Microsoft.node-pty?branchName=master)\n\n`forkpty(3)` bindings for node.js. This allows you to fork processes with pseudoterminal file descriptors. It returns a terminal object which allows reads and writes.\n\nThis is useful for:\n\n- Writing a terminal emulator (eg. via [xterm.js](https://github.com/sourcelair/xterm.js)).\n- Getting certain programs to *think* you're a terminal, such as when you need a program to send you control sequences.\n\n`node-pty` supports Linux, macOS and Windows. Windows support is possible by utilizing the [Windows conpty API](https://blogs.msdn.microsoft.com/commandline/2018/08/02/windows-command-line-introducing-the-windows-pseudo-console-conpty/) on Windows 1809+ and the [winpty](https://github.com/rprichard/winpty) library in older version.\n\n## Real-world Uses\n\n`node-pty` powers many different terminal emulators, including:\n\n- [Microsoft Visual Studio Code](https://code.visualstudio.com)\n- [Hyper](https://hyper.is/)\n- [Upterm](https://github.com/railsware/upterm)\n- [Script Runner](https://github.com/ioquatix/script-runner) for Atom.\n- [Theia](https://github.com/theia-ide/theia)\n- [FreeMAN](https://github.com/matthew-matvei/freeman) file manager\n- [atom-xterm](https://atom.io/packages/atom-xterm) - Atom plugin for providing terminals inside your Atom workspace.\n- [Termination](https://atom.io/packages/termination) - Another Atom plugin that provides terminals inside your Atom workspace.\n- [electerm](https://github.com/electerm/electerm) Terminal/ssh/sftp client(linux, mac, win).\n- [Extraterm](http://extraterm.org/)\n\nDo you use node-pty in your application as well? Please open a [Pull Request](https://github.com/Tyriar/node-pty/pulls) to include it here. We would love to have it in our list.\n\n## Example Usage\n\n```js\nvar os = require('os');\nvar pty = require('node-pty');\n\nvar shell = os.platform() === 'win32' ? 'powershell.exe' : 'bash';\n\nvar ptyProcess = pty.spawn(shell, [], {\n  name: 'xterm-color',\n  cols: 80,\n  rows: 30,\n  cwd: process.env.HOME,\n  env: process.env\n});\n\nptyProcess.on('data', function(data) {\n  process.stdout.write(data);\n});\n\nptyProcess.write('ls\\r');\nptyProcess.resize(100, 40);\nptyProcess.write('ls\\r');\n```\n\n## Building\n\n```bash\n# Install dependencies and build C++\nnpm install\n# Compile TypeScript -> JavaScript\nnpm run tsc\n```\n\n## Dependencies\n\n### Linux/Ubuntu\n\n```\nsudo apt install -y make python build-essential\n```\n\nThe following are also needed:\n\n- Node.JS 10+\n\n### Windows\n\n`npm install` requires some tools to be present in the system like Python and C++ compiler. Windows users can easily install them by running the following command in PowerShell as administrator. For more information see https://github.com/felixrieseberg/windows-build-tools:\n\n```sh\nnpm install --global --production windows-build-tools\n```\n\nThe following are also needed:\n\n- [Windows SDK](https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk) - only the \"Desktop C++ Apps\" components are needed to be installed\n- Node.JS 10+\n\n## Debugging\n\n[The wiki](https://github.com/Microsoft/node-pty/wiki/Debugging) contains instructions for debugging node-pty.\n\n## Security\n\nAll processes launched from node-pty will launch at the same permission level of the parent process. Take care particularly when using node-pty inside a server that's accessible on the internet. We recommend launching the pty inside a container to protect your host machine.\n\n## Thread Safety\n\nNote that node-pty is not thread safe so running it across multiple worker threads in node.js could cause issues.\n\n## Troubleshooting\n\n### Powershell gives error 8009001d\n\n> Internal Windows PowerShell error.  Loading managed Windows PowerShell failed with error 8009001d.\n\nThis happens when PowerShell is launched with no `SystemRoot` environment variable present.\n\n### ConnectNamedPipe failed: Windows error 232\n\nThis error can occur due to anti-virus software intercepting winpty from creating a pty. To workaround this you can exclude this file from your anti-virus scanning `node-pty\\build\\Release\\winpty-agent.exe`\n\n## pty.js\n\nThis project is forked from [chjj/pty.js](https://github.com/chjj/pty.js) with the primary goals being to provide better support for later Node.JS versions and Windows.\n\n## License\n\nCopyright (c) 2012-2015, Christopher Jeffrey (MIT License).<br>\nCopyright (c) 2016, Daniel Imms (MIT License).<br>\nCopyright (c) 2018, Microsoft Corporation (MIT License).\n","readmeFilename":"README.md","_id":"node-pty@0.9.0-alpha1","_npmVersion":"6.4.1","_nodeVersion":"10.15.3","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"integrity":"sha512-r8EymOETFsAfZY6E9Bttm979RL0FoxpVoRklTcih7dJRqPcweWXtjUhZmfwpCB+ZM79VNRRktjJo/sWyGpXt0g==","shasum":"bfe96596e30eecf3d641304a0d73220b1c0b6c1e","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.9.0-alpha1.tgz","fileCount":239,"unpackedSize":1057483,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc3vdECRA9TVsSAnZWagAAlMAP/iRs7SRmKUyKqFLc56CJ\n7zPHjQOcWn1yw/JTjYB3f69FdYZQEaFokp2OJILcVgXC9HD4lFmMyV5NN+Z+\nBnSSvDcMsJCdv1FHgPFrMJqZCh9Ejxbyy8kXD6ZmqFmpmNCisBN4kpjdnN27\nBU7YfwLszG63jboCPS3JH4xQaqoGBE2ld/QqxMRIELJVjVZBiuR+NagnosEl\nIvYVOSF93egTU7UW/5OfSUxtoDocGtku0of1QYCjjcXUu53T1E1T7CaMDHKU\nKX+9DGdC6XV+L0VkmA39sSuioMfHqHE5PdrVPLXYHZem6rQVmfz4FTIfiHMU\nt4eKi6+qgin4gN0Yu0Eizp9EwaYeME1ggi9hWxYEtUT8UM89wex7w6aAZ1Bl\nVZRsO8m1p2xPbD84KdkcSaSECbw4tlZaXbBtoP4LyomSWY+z8BXNgJeshV29\ngdXEEalZ9Yc+BCg/AZLEeM6QnOV7adHcCLB0H3NkGhe5aV9JMPWo0+H0FOFy\no2JWkbTRMJ6XYAQ3tkvyuHRd0a9qorLlLemq0AEFa+n4gMVAWmC31/wPxPQR\nm1JMoGbqKDDzgKvqjVHoCjYP0hkIEz2GOd9+/NqogPIGrAxdIjXjbkq8QJ4N\ncs1VJmtp1/CR/Wh4i+KCCfebw72tH7u2uIbJX5kgUfIyeHWyPUl/IAaBdayo\nTMbU\r\n=bXjq\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"alros@microsoft.com","name":"alexr00"},{"email":"npmjs@microsoft.com","name":"microsoft"},{"email":"tyriar@tyriar.com","name":"tyriar"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty_0.9.0-alpha1_1558116163283_0.49139549180692077"},"_hasShrinkwrap":false},"0.9.0-alpha2":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Microsoft Corporation"},"version":"0.9.0-alpha2","license":"MIT","main":"./lib/index.js","types":"./typings/node-pty.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","watch":"tsc -w","lint":"tslint 'src/**/*.ts'","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec --exit lib/*.test.js","prepublish":"npm run tsc"},"dependencies":{"nan":"2.12.1"},"devDependencies":{"@types/mocha":"^5.0.0","@types/node":"^6.0.104","cross-env":"^5.1.4","mocha":"^5.0.5","pollUntil":"^1.0.3","ps-list":"^6.0.0","tslint":"^5.12.1","tslint-consistent-codestyle":"^1.15.0","typescript":"^3.2.2"},"gitHead":"bed37ce240d8063bb0126eecda9224cb3d82046e","readme":"# node-pty\n\n[![Build Status](https://dev.azure.com/vscode/node-pty/_apis/build/status/Microsoft.node-pty)](https://dev.azure.com/vscode/node-pty/_apis/build/status/Microsoft.node-pty?branchName=master)\n\n`forkpty(3)` bindings for node.js. This allows you to fork processes with pseudoterminal file descriptors. It returns a terminal object which allows reads and writes.\n\nThis is useful for:\n\n- Writing a terminal emulator (eg. via [xterm.js](https://github.com/sourcelair/xterm.js)).\n- Getting certain programs to *think* you're a terminal, such as when you need a program to send you control sequences.\n\n`node-pty` supports Linux, macOS and Windows. Windows support is possible by utilizing the [Windows conpty API](https://blogs.msdn.microsoft.com/commandline/2018/08/02/windows-command-line-introducing-the-windows-pseudo-console-conpty/) on Windows 1809+ and the [winpty](https://github.com/rprichard/winpty) library in older version.\n\n## Real-world Uses\n\n`node-pty` powers many different terminal emulators, including:\n\n- [Microsoft Visual Studio Code](https://code.visualstudio.com)\n- [Hyper](https://hyper.is/)\n- [Upterm](https://github.com/railsware/upterm)\n- [Script Runner](https://github.com/ioquatix/script-runner) for Atom.\n- [Theia](https://github.com/theia-ide/theia)\n- [FreeMAN](https://github.com/matthew-matvei/freeman) file manager\n- [atom-xterm](https://atom.io/packages/atom-xterm) - Atom plugin for providing terminals inside your Atom workspace.\n- [Termination](https://atom.io/packages/termination) - Another Atom plugin that provides terminals inside your Atom workspace.\n- [electerm](https://github.com/electerm/electerm) Terminal/ssh/sftp client(linux, mac, win).\n- [Extraterm](http://extraterm.org/)\n\nDo you use node-pty in your application as well? Please open a [Pull Request](https://github.com/Tyriar/node-pty/pulls) to include it here. We would love to have it in our list.\n\n## Example Usage\n\n```js\nvar os = require('os');\nvar pty = require('node-pty');\n\nvar shell = os.platform() === 'win32' ? 'powershell.exe' : 'bash';\n\nvar ptyProcess = pty.spawn(shell, [], {\n  name: 'xterm-color',\n  cols: 80,\n  rows: 30,\n  cwd: process.env.HOME,\n  env: process.env\n});\n\nptyProcess.on('data', function(data) {\n  process.stdout.write(data);\n});\n\nptyProcess.write('ls\\r');\nptyProcess.resize(100, 40);\nptyProcess.write('ls\\r');\n```\n\n## Building\n\n```bash\n# Install dependencies and build C++\nnpm install\n# Compile TypeScript -> JavaScript\nnpm run tsc\n```\n\n## Dependencies\n\n### Linux/Ubuntu\n\n```\nsudo apt install -y make python build-essential\n```\n\nThe following are also needed:\n\n- Node.JS 10+\n\n### Windows\n\n`npm install` requires some tools to be present in the system like Python and C++ compiler. Windows users can easily install them by running the following command in PowerShell as administrator. For more information see https://github.com/felixrieseberg/windows-build-tools:\n\n```sh\nnpm install --global --production windows-build-tools\n```\n\nThe following are also needed:\n\n- [Windows SDK](https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk) - only the \"Desktop C++ Apps\" components are needed to be installed\n- Node.JS 10+\n\n## Debugging\n\n[The wiki](https://github.com/Microsoft/node-pty/wiki/Debugging) contains instructions for debugging node-pty.\n\n## Security\n\nAll processes launched from node-pty will launch at the same permission level of the parent process. Take care particularly when using node-pty inside a server that's accessible on the internet. We recommend launching the pty inside a container to protect your host machine.\n\n## Thread Safety\n\nNote that node-pty is not thread safe so running it across multiple worker threads in node.js could cause issues.\n\n## Troubleshooting\n\n### Powershell gives error 8009001d\n\n> Internal Windows PowerShell error.  Loading managed Windows PowerShell failed with error 8009001d.\n\nThis happens when PowerShell is launched with no `SystemRoot` environment variable present.\n\n### ConnectNamedPipe failed: Windows error 232\n\nThis error can occur due to anti-virus software intercepting winpty from creating a pty. To workaround this you can exclude this file from your anti-virus scanning `node-pty\\build\\Release\\winpty-agent.exe`\n\n## pty.js\n\nThis project is forked from [chjj/pty.js](https://github.com/chjj/pty.js) with the primary goals being to provide better support for later Node.JS versions and Windows.\n\n## License\n\nCopyright (c) 2012-2015, Christopher Jeffrey (MIT License).<br>\nCopyright (c) 2016, Daniel Imms (MIT License).<br>\nCopyright (c) 2018, Microsoft Corporation (MIT License).\n","readmeFilename":"README.md","_id":"node-pty@0.9.0-alpha2","_npmVersion":"6.4.1","_nodeVersion":"10.15.3","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"integrity":"sha512-TeaZBrvLt5andSdS9j6NNW/qjKiUXwPHfzg/QlY00Jmg4UCb3jgZlAUBdtZcujN9DcvgWujDzp/qo7s8emzhfQ==","shasum":"33dfc4dd4624b75f9858be7e3e47a327785ea084","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.9.0-alpha2.tgz","fileCount":239,"unpackedSize":1057002,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc3wPlCRA9TVsSAnZWagAAu1AP/itUnnhYYT2lnzmU1Fz0\nmYvixNtWbwbenMN4kMF/ILZv58COhC35LZYH2PBswbmQOjf/6nB7Scwqd5tC\nzcUVg6xbX78XHjX4LkwejYeJ3kCLELDeDa7bdMIjWzLZeHCEA3SmtDsOp4DG\nYrOXqIqQsLnFnltWNAW5Hf1QPH/IjsAeCTkzM/dgyuQoDvwsxlhRPCGK0uSb\n22Tfk5mrjvmBqAzeMCE8Wm6P8Dtm31veOWLOvlc+aV4/NX3HqGuwJVVhI7oL\nRYDPn+Mu5/Fh6mlcHXnVzfbJYIGjnl/gttsrYBLqho/r8KA2FWWZAfiuccIh\ng59LiIvrHiyxNa2g4aEq8Unvw5OObxL0dcpaEoDGUdvzYY4XjgmDw7iPl3b5\n2S6gpk1TAU69NnMlLrGmxw8wfk/mmipv9WGIPJV4pKoZvIBJPwhgi8ry30lh\n8sPMStUnNIHJLoN4M1ZpAO1fd2eQILVaIlMmr0/kj5h2CZqAnPqRyJtD46sW\nWjwei/xc88NZPTvKwGR2nIUZNO/la5B2pdrHQW2S9yuE1CnxamGNcG6xVIIg\ncYeF1ZQ+6I9H/Qb0M9AgYfMIojJ69L5/UGbteukBQGlqiQEIAae4bBLaNjMZ\nYfwqMPJ4bd9XQZHASJDCmn0XK4Nc/yLyvk9v3oetaJ7gXHgbItnAmLrR2xCJ\npff0\r\n=8NMz\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"alros@microsoft.com","name":"alexr00"},{"email":"npmjs@microsoft.com","name":"microsoft"},{"email":"tyriar@tyriar.com","name":"tyriar"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty_0.9.0-alpha2_1558119396538_0.8990743527589209"},"_hasShrinkwrap":false},"0.9.0-beta5":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Microsoft Corporation"},"version":"0.9.0-beta5","license":"MIT","main":"./lib/index.js","types":"./typings/node-pty.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","watch":"tsc -w","lint":"tslint 'src/**/*.ts'","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec --exit lib/*.test.js","prepare":"npm run tsc","prepublishOnly":"npm run tsc"},"dependencies":{"nan":"^2.13.2"},"devDependencies":{"@types/mocha":"^5.0.0","@types/node":"^6.0.104","cross-env":"^5.1.4","mocha":"^5.0.5","pollUntil":"^1.0.3","ps-list":"^6.0.0","tslint":"^5.12.1","tslint-consistent-codestyle":"^1.15.0","typescript":"^3.2.2"},"gitHead":"061508f76bcef0bcb02ee4e13ff31166c26d97a5","readme":"# node-pty\n\n[![Build Status](https://dev.azure.com/vscode/node-pty/_apis/build/status/Microsoft.node-pty)](https://dev.azure.com/vscode/node-pty/_build/latest?definitionId=11)\n\n`forkpty(3)` bindings for node.js. This allows you to fork processes with pseudoterminal file descriptors. It returns a terminal object which allows reads and writes.\n\nThis is useful for:\n\n- Writing a terminal emulator (eg. via [xterm.js](https://github.com/sourcelair/xterm.js)).\n- Getting certain programs to *think* you're a terminal, such as when you need a program to send you control sequences.\n\n`node-pty` supports Linux, macOS and Windows. Windows support is possible by utilizing the [Windows conpty API](https://blogs.msdn.microsoft.com/commandline/2018/08/02/windows-command-line-introducing-the-windows-pseudo-console-conpty/) on Windows 1809+ and the [winpty](https://github.com/rprichard/winpty) library in older version.\n\n## Real-world Uses\n\n`node-pty` powers many different terminal emulators, including:\n\n- [Microsoft Visual Studio Code](https://code.visualstudio.com)\n- [Hyper](https://hyper.is/)\n- [Upterm](https://github.com/railsware/upterm)\n- [Script Runner](https://github.com/ioquatix/script-runner) for Atom.\n- [Theia](https://github.com/theia-ide/theia)\n- [FreeMAN](https://github.com/matthew-matvei/freeman) file manager\n- [atom-xterm](https://atom.io/packages/atom-xterm) - Atom plugin for providing terminals inside your Atom workspace.\n- [Termination](https://atom.io/packages/termination) - Another Atom plugin that provides terminals inside your Atom workspace.\n- [electerm](https://github.com/electerm/electerm) Terminal/ssh/sftp client(linux, mac, win).\n- [Extraterm](http://extraterm.org/)\n\nDo you use node-pty in your application as well? Please open a [Pull Request](https://github.com/Tyriar/node-pty/pulls) to include it here. We would love to have it in our list.\n\n## Example Usage\n\n```js\nvar os = require('os');\nvar pty = require('node-pty');\n\nvar shell = os.platform() === 'win32' ? 'powershell.exe' : 'bash';\n\nvar ptyProcess = pty.spawn(shell, [], {\n  name: 'xterm-color',\n  cols: 80,\n  rows: 30,\n  cwd: process.env.HOME,\n  env: process.env\n});\n\nptyProcess.on('data', function(data) {\n  process.stdout.write(data);\n});\n\nptyProcess.write('ls\\r');\nptyProcess.resize(100, 40);\nptyProcess.write('ls\\r');\n```\n\n## Building\n\n```bash\n# Install dependencies and build C++\nnpm install\n# Compile TypeScript -> JavaScript\nnpm run tsc\n```\n\n## Dependencies\n\n### Linux/Ubuntu\n\n```\nsudo apt install -y make python build-essential\n```\n\nThe following are also needed:\n\n- Node.JS 10+\n\n### Windows\n\n`npm install` requires some tools to be present in the system like Python and C++ compiler. Windows users can easily install them by running the following command in PowerShell as administrator. For more information see https://github.com/felixrieseberg/windows-build-tools:\n\n```sh\nnpm install --global --production windows-build-tools\n```\n\nThe following are also needed:\n\n- [Windows SDK](https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk) - only the \"Desktop C++ Apps\" components are needed to be installed\n- Node.JS 10+\n\n## Debugging\n\n[The wiki](https://github.com/Microsoft/node-pty/wiki/Debugging) contains instructions for debugging node-pty.\n\n## Security\n\nAll processes launched from node-pty will launch at the same permission level of the parent process. Take care particularly when using node-pty inside a server that's accessible on the internet. We recommend launching the pty inside a container to protect your host machine.\n\n## Thread Safety\n\nNote that node-pty is not thread safe so running it across multiple worker threads in node.js could cause issues.\n\n## Troubleshooting\n\n### Powershell gives error 8009001d\n\n> Internal Windows PowerShell error.  Loading managed Windows PowerShell failed with error 8009001d.\n\nThis happens when PowerShell is launched with no `SystemRoot` environment variable present.\n\n### ConnectNamedPipe failed: Windows error 232\n\nThis error can occur due to anti-virus software intercepting winpty from creating a pty. To workaround this you can exclude this file from your anti-virus scanning `node-pty\\build\\Release\\winpty-agent.exe`\n\n## pty.js\n\nThis project is forked from [chjj/pty.js](https://github.com/chjj/pty.js) with the primary goals being to provide better support for later Node.JS versions and Windows.\n\n## License\n\nCopyright (c) 2012-2015, Christopher Jeffrey (MIT License).<br>\nCopyright (c) 2016, Daniel Imms (MIT License).<br>\nCopyright (c) 2018, Microsoft Corporation (MIT License).\n","readmeFilename":"README.md","_id":"node-pty@0.9.0-beta5","_npmVersion":"6.4.1","_nodeVersion":"8.16.0","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"integrity":"sha512-g6KEs5lbmQYysRNiX29mXpVd0/EWwjN++Ac62RmaC1mCPNPdi9z7JBFAcxxTGmKyATGqLQPcEBTjw+y3E/ifSA==","shasum":"8d43e98521af5da73ccd49969293474d6b139595","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.9.0-beta5.tgz","fileCount":240,"unpackedSize":1061488,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc4D0ACRA9TVsSAnZWagAAgXwQAJoD1tMo/ITjaLiq/Cal\ngCAqI+WrN7oBiTbErRN/rahN5KzRCeyVN78OL9Ow/SYxEilZMFBiCVTTrg2N\nn1VBLPB1higmnFwbhGU3UJXMvAwoyrwyKIlmtLvlDmHFMZzw6fVbmj3esGfg\nbnq616n6xZqRt6lrMss8CVlZFxx6t9uCMY+rmthtH8KMk3TaN7pzUks8SlCZ\nTQ9u1iGzM0SckfoGC0VDSoberDn+rIJUHs291sKPuh38V17lTxwXkDtJ+z8t\nmnfrEe2j1PA37w1Lk5Lqo/SR72Hs7jADxZJo2e8nnArO6+dHoCaThsDm44zT\nXqOofsisEa/jpd9HasrQWb2ORAjAPYwizF2sMva+CSxYet38VInsD692ZfH9\n9qL+sYpnNPYmWW45jQSw1O7aEiW3VU3A2eKL5LUgM+9E4Gs1UQqIiscTkBqA\nTCQZS++rgHOr8hzep/b6EX6jC+iuu3+vDRh5fuU9h+lL1Nua1UQ9v/Hjk1cd\n5+AI7n0YEc6mvX6bgxlsCiOs+q3TcYTVniJemuZlGhcL70IZGyAJRKLwDGMD\n+afZVzxV0mSwIAovtx0BoIPWPJ22WDUhRCxZzkpWPjoG0IQFxrBt7ZQN9UIr\n21/8n0df1Ar9PJYN6OAT4so6SNVuOX9qLYwQJbxZx0zPpcAXmfbJbQMr4ofq\nzAjZ\r\n=GiSm\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"alros@microsoft.com","name":"alexr00"},{"email":"npmjs@microsoft.com","name":"microsoft"},{"email":"tyriar@tyriar.com","name":"tyriar"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty_0.9.0-beta5_1558199551394_0.8387397144339923"},"_hasShrinkwrap":false},"0.9.0-beta6":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Microsoft Corporation"},"version":"0.9.0-beta6","license":"MIT","main":"./lib/index.js","types":"./typings/node-pty.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","watch":"tsc -w","lint":"tslint 'src/**/*.ts'","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec --exit lib/*.test.js","prepare":"npm run tsc","prepublishOnly":"npm run tsc"},"dependencies":{"nan":"^2.13.2"},"devDependencies":{"@types/mocha":"^5.0.0","@types/node":"^6.0.104","cross-env":"^5.1.4","mocha":"^5.0.5","pollUntil":"^1.0.3","ps-list":"^6.0.0","tslint":"^5.12.1","tslint-consistent-codestyle":"^1.15.0","typescript":"^3.2.2"},"gitHead":"f8045ab74667c24ea25a9c40888dfbeba6e58cd9","readme":"# node-pty\n\n[![Build Status](https://dev.azure.com/vscode/node-pty/_apis/build/status/Microsoft.node-pty)](https://dev.azure.com/vscode/node-pty/_build/latest?definitionId=11)\n\n`forkpty(3)` bindings for node.js. This allows you to fork processes with pseudoterminal file descriptors. It returns a terminal object which allows reads and writes.\n\nThis is useful for:\n\n- Writing a terminal emulator (eg. via [xterm.js](https://github.com/sourcelair/xterm.js)).\n- Getting certain programs to *think* you're a terminal, such as when you need a program to send you control sequences.\n\n`node-pty` supports Linux, macOS and Windows. Windows support is possible by utilizing the [Windows conpty API](https://blogs.msdn.microsoft.com/commandline/2018/08/02/windows-command-line-introducing-the-windows-pseudo-console-conpty/) on Windows 1809+ and the [winpty](https://github.com/rprichard/winpty) library in older version.\n\n## Real-world Uses\n\n`node-pty` powers many different terminal emulators, including:\n\n- [Microsoft Visual Studio Code](https://code.visualstudio.com)\n- [Hyper](https://hyper.is/)\n- [Upterm](https://github.com/railsware/upterm)\n- [Script Runner](https://github.com/ioquatix/script-runner) for Atom.\n- [Theia](https://github.com/theia-ide/theia)\n- [FreeMAN](https://github.com/matthew-matvei/freeman) file manager\n- [atom-xterm](https://atom.io/packages/atom-xterm) - Atom plugin for providing terminals inside your Atom workspace.\n- [Termination](https://atom.io/packages/termination) - Another Atom plugin that provides terminals inside your Atom workspace.\n- [electerm](https://github.com/electerm/electerm) Terminal/ssh/sftp client(linux, mac, win).\n- [Extraterm](http://extraterm.org/)\n- [Wetty](https://github.com/krishnasrinivas/wetty) Browser based Terminal over HTTP and HTTPS\n\nDo you use node-pty in your application as well? Please open a [Pull Request](https://github.com/Tyriar/node-pty/pulls) to include it here. We would love to have it in our list.\n\n## Example Usage\n\n```js\nvar os = require('os');\nvar pty = require('node-pty');\n\nvar shell = os.platform() === 'win32' ? 'powershell.exe' : 'bash';\n\nvar ptyProcess = pty.spawn(shell, [], {\n  name: 'xterm-color',\n  cols: 80,\n  rows: 30,\n  cwd: process.env.HOME,\n  env: process.env\n});\n\nptyProcess.on('data', function(data) {\n  process.stdout.write(data);\n});\n\nptyProcess.write('ls\\r');\nptyProcess.resize(100, 40);\nptyProcess.write('ls\\r');\n```\n\n## Building\n\n```bash\n# Install dependencies and build C++\nnpm install\n# Compile TypeScript -> JavaScript\nnpm run tsc\n```\n\n## Dependencies\n\n### Linux/Ubuntu\n\n```\nsudo apt install -y make python build-essential\n```\n\nThe following are also needed:\n\n- Node.JS 10+\n\n### Windows\n\n`npm install` requires some tools to be present in the system like Python and C++ compiler. Windows users can easily install them by running the following command in PowerShell as administrator. For more information see https://github.com/felixrieseberg/windows-build-tools:\n\n```sh\nnpm install --global --production windows-build-tools\n```\n\nThe following are also needed:\n\n- [Windows SDK](https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk) - only the \"Desktop C++ Apps\" components are needed to be installed\n- Node.JS 10+\n\n## Debugging\n\n[The wiki](https://github.com/Microsoft/node-pty/wiki/Debugging) contains instructions for debugging node-pty.\n\n## Security\n\nAll processes launched from node-pty will launch at the same permission level of the parent process. Take care particularly when using node-pty inside a server that's accessible on the internet. We recommend launching the pty inside a container to protect your host machine.\n\n## Thread Safety\n\nNote that node-pty is not thread safe so running it across multiple worker threads in node.js could cause issues.\n\n## Troubleshooting\n\n### Powershell gives error 8009001d\n\n> Internal Windows PowerShell error.  Loading managed Windows PowerShell failed with error 8009001d.\n\nThis happens when PowerShell is launched with no `SystemRoot` environment variable present.\n\n### ConnectNamedPipe failed: Windows error 232\n\nThis error can occur due to anti-virus software intercepting winpty from creating a pty. To workaround this you can exclude this file from your anti-virus scanning `node-pty\\build\\Release\\winpty-agent.exe`\n\n## pty.js\n\nThis project is forked from [chjj/pty.js](https://github.com/chjj/pty.js) with the primary goals being to provide better support for later Node.JS versions and Windows.\n\n## License\n\nCopyright (c) 2012-2015, Christopher Jeffrey (MIT License).<br>\nCopyright (c) 2016, Daniel Imms (MIT License).<br>\nCopyright (c) 2018, Microsoft Corporation (MIT License).\n","readmeFilename":"README.md","_id":"node-pty@0.9.0-beta6","_npmVersion":"6.4.1","_nodeVersion":"8.16.0","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"integrity":"sha512-G3hRbI4tyFptGcGKIzZZTqMlqmzI5Ev75lc4mh/LLJBAaT0tFK+8d0ZW8Nz0oJf2rns5C0vH6BZuYhawHDsmjg==","shasum":"1b12d7050824e140b35c1a1ae92a6ad714ffdb9f","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.9.0-beta6.tgz","fileCount":240,"unpackedSize":1061583,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc4Q0BCRA9TVsSAnZWagAAu+AP/0sGKbtFkGtakEt73MZN\nJgewE7KVpqaUD+HslWslTojpmXT3/TeNREKYuxjEpVFZBLTdfRvZiTX32WbG\nmiK5mJp69ly0BMhDPPo/dKVoGpS5djRiB18hQxaKC5EyAb2ZGzlh5fScvGuJ\n2Ox75vQVufGEvN/zBwG6nNFRGZuOFGUWLPnxjdmXJfu8/3GhJovpxJLPf2Ti\n30eGXhUL/lkO0Xej9OqBAaYbU2lLzBu5bfBJ1LlcbCa6elN2rKv/uZpv9jlq\ngXuWEAko7IKx1sRNsQEYJEobe0boPo2IrAhl+hV9vKxAergm/4WZb9LjN/j6\nTBeuupu7qrVAZkUoxv/Ip12/bPNimXF++coramIP/VehevbiJjFcJJnklQls\nT+JLkt2kd0/kKAtTSlS3x74LoNZgr1sdRjohuvCUcdpxOq4hQfOVDwH3BGn+\nUweSMaI1KMTglkRUBXIXbqDjFHUBD2OygMkyrMqQ31le/lIInKi9+kT5izdn\nITgeaSl5p6gmJegCVv9JbLt5ddVno3lwt+rFOqnZqt0lqvAqbPH/rhwEwFO+\ng+Qw42QbZSwIaySw80OGof/Nq/8VZ7YsSwns6Wbav6zNu1AvjnHyFUVbPF0B\nyjz2LF7RznHukV8R1tcLOTTGprrqDZze+hwaN9t6oF2NvqycwsBrO5bGqp80\n4U8K\r\n=BiZy\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"alros@microsoft.com","name":"alexr00"},{"email":"npmjs@microsoft.com","name":"microsoft"},{"email":"tyriar@tyriar.com","name":"tyriar"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty_0.9.0-beta6_1558252800544_0.17800163800669755"},"_hasShrinkwrap":false},"0.9.0-alpha3":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Microsoft Corporation"},"version":"0.9.0-alpha3","license":"MIT","main":"./lib/index.js","types":"./typings/node-pty.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","watch":"tsc -w","lint":"tslint 'src/**/*.ts'","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec --exit lib/*.test.js","prepublish":"npm run tsc"},"dependencies":{"nan":"2.12.1"},"devDependencies":{"@types/mocha":"^5.0.0","@types/node":"^6.0.104","@types/ps-list":"^6.0.0","cross-env":"^5.1.4","mocha":"^5.0.5","pollUntil":"^1.0.3","ps-list":"^6.0.0","tslint":"^5.12.1","tslint-consistent-codestyle":"^1.15.0","typescript":"^3.2.2"},"gitHead":"d79191aa2f3d1d384b8ac9fef1c0a9c6842030bc","readme":"# node-pty\r\n\r\n[![Build Status](https://dev.azure.com/vscode/node-pty/_apis/build/status/Microsoft.node-pty)](https://dev.azure.com/vscode/node-pty/_apis/build/status/Microsoft.node-pty?branchName=master)\r\n\r\n`forkpty(3)` bindings for node.js. This allows you to fork processes with pseudoterminal file descriptors. It returns a terminal object which allows reads and writes.\r\n\r\nThis is useful for:\r\n\r\n- Writing a terminal emulator (eg. via [xterm.js](https://github.com/sourcelair/xterm.js)).\r\n- Getting certain programs to *think* you're a terminal, such as when you need a program to send you control sequences.\r\n\r\n`node-pty` supports Linux, macOS and Windows. Windows support is possible by utilizing the [Windows conpty API](https://blogs.msdn.microsoft.com/commandline/2018/08/02/windows-command-line-introducing-the-windows-pseudo-console-conpty/) on Windows 1809+ and the [winpty](https://github.com/rprichard/winpty) library in older version.\r\n\r\n## Real-world Uses\r\n\r\n`node-pty` powers many different terminal emulators, including:\r\n\r\n- [Microsoft Visual Studio Code](https://code.visualstudio.com)\r\n- [Hyper](https://hyper.is/)\r\n- [Upterm](https://github.com/railsware/upterm)\r\n- [Script Runner](https://github.com/ioquatix/script-runner) for Atom.\r\n- [Theia](https://github.com/theia-ide/theia)\r\n- [FreeMAN](https://github.com/matthew-matvei/freeman) file manager\r\n- [atom-xterm](https://atom.io/packages/atom-xterm) - Atom plugin for providing terminals inside your Atom workspace.\r\n- [Termination](https://atom.io/packages/termination) - Another Atom plugin that provides terminals inside your Atom workspace.\r\n- [electerm](https://github.com/electerm/electerm) Terminal/ssh/sftp client(linux, mac, win).\r\n\r\nDo you use node-pty in your application as well? Please open a [Pull Request](https://github.com/Tyriar/node-pty/pulls) to include it here. We would love to have it in our list.\r\n\r\n## Example Usage\r\n\r\n```js\r\nvar os = require('os');\r\nvar pty = require('node-pty');\r\n\r\nvar shell = os.platform() === 'win32' ? 'powershell.exe' : 'bash';\r\n\r\nvar ptyProcess = pty.spawn(shell, [], {\r\n  name: 'xterm-color',\r\n  cols: 80,\r\n  rows: 30,\r\n  cwd: process.env.HOME,\r\n  env: process.env\r\n});\r\n\r\nptyProcess.on('data', function(data) {\r\n  process.stdout.write(data);\r\n});\r\n\r\nptyProcess.write('ls\\r');\r\nptyProcess.resize(100, 40);\r\nptyProcess.write('ls\\r');\r\n```\r\n\r\n## Building\r\n\r\n```bash\r\n# Install dependencies and build C++\r\nnpm install\r\n# Compile TypeScript -> JavaScript\r\nnpm run tsc\r\n```\r\n\r\n## Dependencies\r\n\r\n### Linux/Ubuntu\r\n\r\n```\r\nsudo apt install -y make python build-essential\r\n```\r\n\r\n### Windows\r\n\r\n`npm install` requires some tools to be present in the system like Python and C++ compiler. Windows users can easily install them by running the following command in PowerShell as administrator. For more information see https://github.com/felixrieseberg/windows-build-tools:\r\n\r\n```sh\r\nnpm install --global --production windows-build-tools\r\n```\r\n\r\nThe Windows SDK is also needed which can be [downloaded here](https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk). Only the \"Desktop C++ Apps\" components are needed to be installed.\r\n\r\n## Debugging\r\n\r\n[The wiki](https://github.com/Microsoft/node-pty/wiki/Debugging) contains instructions for debugging node-pty.\r\n\r\n## Security\r\n\r\nAll processes launched from node-pty will launch at the same permission level of the parent process. Take care particularly when using node-pty inside a server that's accessible on the internet. We recommend launching the pty inside a container to protect your host machine.\r\n\r\n## Thread Safety\r\n\r\nNote that node-pty is not thread safe so running it across multiple worker threads in node.js could cause issues.\r\n\r\n## Troubleshooting\r\n\r\n### Powershell gives error 8009001d\r\n\r\n> Internal Windows PowerShell error.  Loading managed Windows PowerShell failed with error 8009001d.\r\n\r\nThis happens when PowerShell is launched with no `SystemRoot` environment variable present.\r\n\r\n### ConnectNamedPipe failed: Windows error 232\r\n\r\nThis error can occur due to anti-virus software intercepting winpty from creating a pty. To workaround this you can exclude this file from your anti-virus scanning `node-pty\\build\\Release\\winpty-agent.exe`\r\n\r\n## pty.js\r\n\r\nThis project is forked from [chjj/pty.js](https://github.com/chjj/pty.js) with the primary goals being to provide better support for later Node.JS versions and Windows.\r\n\r\n## License\r\n\r\nCopyright (c) 2012-2015, Christopher Jeffrey (MIT License).<br>\r\nCopyright (c) 2016, Daniel Imms (MIT License).<br>\r\nCopyright (c) 2018, Microsoft Corporation (MIT License).\r\n","readmeFilename":"README.md","_id":"node-pty@0.9.0-alpha3","_npmVersion":"6.4.1","_nodeVersion":"10.15.1","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"integrity":"sha512-DiKJBFQ91CB+qW0w+9O8iu9tebz7tR+oMom8yx6URShaQEEzFAzparftIJt73An5o5Bgkkt10stVrdTRYBONrQ==","shasum":"75028efc797a2568fa8e500cf4f54a84d7a3127d","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.9.0-alpha3.tgz","fileCount":237,"unpackedSize":1080149,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc5HQ2CRA9TVsSAnZWagAAvFcP/0/xIva+khjQejkecQ5v\nAEcz4nWnB5GuYIg2vslL2ND+g2UJxxM1U/vOeAaf2TNgLnNzZbafPBT2iNgF\nh2rT1Hgv7JOOPUIWQN52S8Yc/4/cb5tXtotoXnjf4mkwnK+zRqzIVM59pBRK\ns+rN0RJHC3WB6z0e5J69scuK9sQjwOgNBSOUNunXgc3Tq2IRPGbAlwIVpHQJ\n7i6d7ySZ3g1MF1XnA4iS1yMfQeCDs+cR9V/LDbDRNzYou9m5OcN1IhQp9ath\nB8NjixKN4WN1XE2aQg+QrkTf+8OPAfoKsAEZGP2dhvcma3/Xe1kMraES4Tnz\n+wdllAB3WbBFZvqs3G82k6CBy/+Lk04+RiCleP5jgU9PMWLj6OVBIp2PbDqq\nHVAZ2a06AwW20y2hhDZYrRKbTl2S5AC65APQgzj8H+94czxkKIQBeG1EouPK\nYOhQin4/ExApxa0xla4WqlBDW7+HPegY6bgxbRJk20ltMo6oMdtPdgWS0kf3\nCeN6Be6nYKmkiAxWtTziIyPysmKKN0yUPTLeJRHl61Rc0Tu53FMVNgdtdSW0\nIbbdnxzNopyNcn53L+aDJ5/bPtCZC/cPmNJniKWO7x974aRnz2HMxNrqb3p+\npmfRmEFNOIwFpzPqoMKztmuWi7uWzWsKqdJyxCXN9+q4eznbk1dO1jDwXgBC\nWSsf\r\n=6xhI\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"alros@microsoft.com","name":"alexr00"},{"email":"npmjs@microsoft.com","name":"microsoft"},{"email":"tyriar@tyriar.com","name":"tyriar"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty_0.9.0-alpha3_1558475829260_0.5627592292182761"},"_hasShrinkwrap":false},"0.9.0-beta7":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Microsoft Corporation"},"version":"0.9.0-beta7","license":"MIT","main":"./lib/index.js","types":"./typings/node-pty.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","watch":"tsc -w","lint":"tslint 'src/**/*.ts'","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec --exit lib/*.test.js","prepare":"npm run tsc","prepublishOnly":"npm run tsc"},"dependencies":{"nan":"^2.13.2"},"devDependencies":{"@types/mocha":"^5.0.0","@types/node":"^6.0.104","cross-env":"^5.1.4","mocha":"^5.0.5","pollUntil":"^1.0.3","ps-list":"^6.0.0","tslint":"^5.12.1","tslint-consistent-codestyle":"^1.15.0","typescript":"^3.2.2"},"gitHead":"2a4de1c193b26e7856fdac6b165d4caf07b7a98b","readme":"# node-pty\n\n[![Build Status](https://dev.azure.com/vscode/node-pty/_apis/build/status/Microsoft.node-pty)](https://dev.azure.com/vscode/node-pty/_build/latest?definitionId=11)\n\n`forkpty(3)` bindings for node.js. This allows you to fork processes with pseudoterminal file descriptors. It returns a terminal object which allows reads and writes.\n\nThis is useful for:\n\n- Writing a terminal emulator (eg. via [xterm.js](https://github.com/sourcelair/xterm.js)).\n- Getting certain programs to *think* you're a terminal, such as when you need a program to send you control sequences.\n\n`node-pty` supports Linux, macOS and Windows. Windows support is possible by utilizing the [Windows conpty API](https://blogs.msdn.microsoft.com/commandline/2018/08/02/windows-command-line-introducing-the-windows-pseudo-console-conpty/) on Windows 1809+ and the [winpty](https://github.com/rprichard/winpty) library in older version.\n\n## Real-world Uses\n\n`node-pty` powers many different terminal emulators, including:\n\n- [Microsoft Visual Studio Code](https://code.visualstudio.com)\n- [Hyper](https://hyper.is/)\n- [Upterm](https://github.com/railsware/upterm)\n- [Script Runner](https://github.com/ioquatix/script-runner) for Atom.\n- [Theia](https://github.com/theia-ide/theia)\n- [FreeMAN](https://github.com/matthew-matvei/freeman) file manager\n- [atom-xterm](https://atom.io/packages/atom-xterm) - Atom plugin for providing terminals inside your Atom workspace.\n- [Termination](https://atom.io/packages/termination) - Another Atom plugin that provides terminals inside your Atom workspace.\n- [electerm](https://github.com/electerm/electerm) Terminal/ssh/sftp client(linux, mac, win).\n- [Extraterm](http://extraterm.org/)\n- [Wetty](https://github.com/krishnasrinivas/wetty) Browser based Terminal over HTTP and HTTPS\n\nDo you use node-pty in your application as well? Please open a [Pull Request](https://github.com/Tyriar/node-pty/pulls) to include it here. We would love to have it in our list.\n\n## Example Usage\n\n```js\nvar os = require('os');\nvar pty = require('node-pty');\n\nvar shell = os.platform() === 'win32' ? 'powershell.exe' : 'bash';\n\nvar ptyProcess = pty.spawn(shell, [], {\n  name: 'xterm-color',\n  cols: 80,\n  rows: 30,\n  cwd: process.env.HOME,\n  env: process.env\n});\n\nptyProcess.on('data', function(data) {\n  process.stdout.write(data);\n});\n\nptyProcess.write('ls\\r');\nptyProcess.resize(100, 40);\nptyProcess.write('ls\\r');\n```\n\n## Building\n\n```bash\n# Install dependencies and build C++\nnpm install\n# Compile TypeScript -> JavaScript\nnpm run tsc\n```\n\n## Dependencies\n\n### Linux/Ubuntu\n\n```\nsudo apt install -y make python build-essential\n```\n\nThe following are also needed:\n\n- Node.JS 10+\n\n### Windows\n\n`npm install` requires some tools to be present in the system like Python and C++ compiler. Windows users can easily install them by running the following command in PowerShell as administrator. For more information see https://github.com/felixrieseberg/windows-build-tools:\n\n```sh\nnpm install --global --production windows-build-tools\n```\n\nThe following are also needed:\n\n- [Windows SDK](https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk) - only the \"Desktop C++ Apps\" components are needed to be installed\n- Node.JS 10+\n\n## Debugging\n\n[The wiki](https://github.com/Microsoft/node-pty/wiki/Debugging) contains instructions for debugging node-pty.\n\n## Security\n\nAll processes launched from node-pty will launch at the same permission level of the parent process. Take care particularly when using node-pty inside a server that's accessible on the internet. We recommend launching the pty inside a container to protect your host machine.\n\n## Thread Safety\n\nNote that node-pty is not thread safe so running it across multiple worker threads in node.js could cause issues.\n\n## Troubleshooting\n\n### Powershell gives error 8009001d\n\n> Internal Windows PowerShell error.  Loading managed Windows PowerShell failed with error 8009001d.\n\nThis happens when PowerShell is launched with no `SystemRoot` environment variable present.\n\n### ConnectNamedPipe failed: Windows error 232\n\nThis error can occur due to anti-virus software intercepting winpty from creating a pty. To workaround this you can exclude this file from your anti-virus scanning `node-pty\\build\\Release\\winpty-agent.exe`\n\n## pty.js\n\nThis project is forked from [chjj/pty.js](https://github.com/chjj/pty.js) with the primary goals being to provide better support for later Node.JS versions and Windows.\n\n## License\n\nCopyright (c) 2012-2015, Christopher Jeffrey (MIT License).<br>\nCopyright (c) 2016, Daniel Imms (MIT License).<br>\nCopyright (c) 2018, Microsoft Corporation (MIT License).\n","readmeFilename":"README.md","_id":"node-pty@0.9.0-beta7","_npmVersion":"6.4.1","_nodeVersion":"8.16.0","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"integrity":"sha512-FetvytOV0C/+/3MmnozKt4HNKeEE6YScmgM9LMQGgFA/htbaF8vYYIWQD67SxPla7ccGprfqAx5ZJiRh0Oa+qw==","shasum":"2758cd2f6af7f2d2ba046cd9dd953560f824a157","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.9.0-beta7.tgz","fileCount":240,"unpackedSize":1061579,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc5cQTCRA9TVsSAnZWagAA6uAP/1iO4Fnv+F2UMPmlzw7i\nBOQSNeGUKDxv7S0oF0cZB+NOf4GOpfA4XEs3YtIzkJ4+bTMFvJs90HMhKVLw\nU/vh8rl7nceMb/B7SlmfOrfqEy3QiHKZOesfsIBpe/wK3BemRzFaZNZ2xBOh\necahZ7h6V9nYSfcSg7ThO2kIQITjzhf6o/TbuMwAUE7PXhdbpASVx1Q51PGH\nDCdNPxcoF3D6gl6Gtvy4BSd5IHE+7YOcUjh3wiaGJP57cOHac/5NHDLsJZKl\nogyDc6k9cmYgDVeXkh0qdZJQ7cBe7/1gDBCOK+4RMgOIK1um4MCQ7E9KYQJc\nOx+iKutxCmjmvp5Iku+wkGEXvBS9VIbo3M5kk522djbbdV0Jkl+zic2kJvV5\n91h4AcVyHrbrUUT6e0UZnU9zMIb2X+oQZpH4StdiaebTN1Y+uqBlytQp2AM+\n9c4gkRVq1C8ZC0MRFY4vclW1rgqr5hQtnagzL66FfHuy74K6E0gYnoBEbu/C\nHoT5XhvF7c3Jbdi0ZR539Ajcqat39H7irmH1ivqWO4VgFxLjI2no+tl8Fz03\nB82zrDXr/+ZNhNOo4YruUHfk+jZ4aqOQy+hEe777mPP7R8Dc/r5iD/zu10+1\nLNlw+oxtgrW55oj46ty511JM9pYubi0BE/ipZ1kaDd6DodKTCPuJUbw6namZ\nBUow\r\n=UaYH\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"alros@microsoft.com","name":"alexr00"},{"email":"npmjs@microsoft.com","name":"microsoft"},{"email":"tyriar@tyriar.com","name":"tyriar"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty_0.9.0-beta7_1558561810883_0.3203124237532262"},"_hasShrinkwrap":false},"0.9.0-beta8":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Microsoft Corporation"},"version":"0.9.0-beta8","license":"MIT","main":"./lib/index.js","types":"./typings/node-pty.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","watch":"tsc -w","lint":"tslint 'src/**/*.ts'","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec --exit lib/*.test.js","prepare":"npm run tsc","prepublishOnly":"npm run tsc"},"dependencies":{"nan":"^2.13.2"},"devDependencies":{"@types/mocha":"^5.0.0","@types/node":"^6.0.104","cross-env":"^5.1.4","mocha":"^5.0.5","pollUntil":"^1.0.3","ps-list":"^6.0.0","tslint":"^5.12.1","tslint-consistent-codestyle":"^1.15.0","typescript":"^3.2.2"},"gitHead":"1ada099b08f04f8ae30437e37bc597d72af7ade6","readme":"# node-pty\n\n[![Build Status](https://dev.azure.com/vscode/node-pty/_apis/build/status/Microsoft.node-pty)](https://dev.azure.com/vscode/node-pty/_build/latest?definitionId=11)\n\n`forkpty(3)` bindings for node.js. This allows you to fork processes with pseudoterminal file descriptors. It returns a terminal object which allows reads and writes.\n\nThis is useful for:\n\n- Writing a terminal emulator (eg. via [xterm.js](https://github.com/sourcelair/xterm.js)).\n- Getting certain programs to *think* you're a terminal, such as when you need a program to send you control sequences.\n\n`node-pty` supports Linux, macOS and Windows. Windows support is possible by utilizing the [Windows conpty API](https://blogs.msdn.microsoft.com/commandline/2018/08/02/windows-command-line-introducing-the-windows-pseudo-console-conpty/) on Windows 1809+ and the [winpty](https://github.com/rprichard/winpty) library in older version.\n\n## Real-world Uses\n\n`node-pty` powers many different terminal emulators, including:\n\n- [Microsoft Visual Studio Code](https://code.visualstudio.com)\n- [Hyper](https://hyper.is/)\n- [Upterm](https://github.com/railsware/upterm)\n- [Script Runner](https://github.com/ioquatix/script-runner) for Atom.\n- [Theia](https://github.com/theia-ide/theia)\n- [FreeMAN](https://github.com/matthew-matvei/freeman) file manager\n- [atom-xterm](https://atom.io/packages/atom-xterm) - Atom plugin for providing terminals inside your Atom workspace.\n- [Termination](https://atom.io/packages/termination) - Another Atom plugin that provides terminals inside your Atom workspace.\n- [electerm](https://github.com/electerm/electerm) Terminal/ssh/sftp client(linux, mac, win).\n- [Extraterm](http://extraterm.org/)\n- [Wetty](https://github.com/krishnasrinivas/wetty) Browser based Terminal over HTTP and HTTPS\n\nDo you use node-pty in your application as well? Please open a [Pull Request](https://github.com/Tyriar/node-pty/pulls) to include it here. We would love to have it in our list.\n\n## Example Usage\n\n```js\nvar os = require('os');\nvar pty = require('node-pty');\n\nvar shell = os.platform() === 'win32' ? 'powershell.exe' : 'bash';\n\nvar ptyProcess = pty.spawn(shell, [], {\n  name: 'xterm-color',\n  cols: 80,\n  rows: 30,\n  cwd: process.env.HOME,\n  env: process.env\n});\n\nptyProcess.on('data', function(data) {\n  process.stdout.write(data);\n});\n\nptyProcess.write('ls\\r');\nptyProcess.resize(100, 40);\nptyProcess.write('ls\\r');\n```\n\n## Building\n\n```bash\n# Install dependencies and build C++\nnpm install\n# Compile TypeScript -> JavaScript\nnpm run tsc\n```\n\n## Dependencies\n\n### Linux/Ubuntu\n\n```\nsudo apt install -y make python build-essential\n```\n\nThe following are also needed:\n\n- Node.JS 10+\n\n### Windows\n\n`npm install` requires some tools to be present in the system like Python and C++ compiler. Windows users can easily install them by running the following command in PowerShell as administrator. For more information see https://github.com/felixrieseberg/windows-build-tools:\n\n```sh\nnpm install --global --production windows-build-tools\n```\n\nThe following are also needed:\n\n- [Windows SDK](https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk) - only the \"Desktop C++ Apps\" components are needed to be installed\n- Node.JS 10+\n\n## Debugging\n\n[The wiki](https://github.com/Microsoft/node-pty/wiki/Debugging) contains instructions for debugging node-pty.\n\n## Security\n\nAll processes launched from node-pty will launch at the same permission level of the parent process. Take care particularly when using node-pty inside a server that's accessible on the internet. We recommend launching the pty inside a container to protect your host machine.\n\n## Thread Safety\n\nNote that node-pty is not thread safe so running it across multiple worker threads in node.js could cause issues.\n\n## Troubleshooting\n\n### Powershell gives error 8009001d\n\n> Internal Windows PowerShell error.  Loading managed Windows PowerShell failed with error 8009001d.\n\nThis happens when PowerShell is launched with no `SystemRoot` environment variable present.\n\n### ConnectNamedPipe failed: Windows error 232\n\nThis error can occur due to anti-virus software intercepting winpty from creating a pty. To workaround this you can exclude this file from your anti-virus scanning `node-pty\\build\\Release\\winpty-agent.exe`\n\n## pty.js\n\nThis project is forked from [chjj/pty.js](https://github.com/chjj/pty.js) with the primary goals being to provide better support for later Node.JS versions and Windows.\n\n## License\n\nCopyright (c) 2012-2015, Christopher Jeffrey (MIT License).<br>\nCopyright (c) 2016, Daniel Imms (MIT License).<br>\nCopyright (c) 2018, Microsoft Corporation (MIT License).\n","readmeFilename":"README.md","_id":"node-pty@0.9.0-beta8","_npmVersion":"6.4.1","_nodeVersion":"8.16.0","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"integrity":"sha512-/iFfpBYaFq2zaNzKcqUefNRbEtLb4ZRtyz/G1dtuadcU3rzR89GOCOw5FI5GT0LyKqat4xifiv6kRDXGXh2WXQ==","shasum":"13f19895f362f9aff5fe545f7bfcaade943be7d4","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.9.0-beta8.tgz","fileCount":240,"unpackedSize":1061633,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc5cg1CRA9TVsSAnZWagAA2DwP/07MtTpZUKoG3+TZlO+B\nOHMsy9VSyXgANUf22Cau38cugI40+C3+Xm1joDpRJEQULCmBiUiN4Cm/hWeE\nQJGkiCNcIVDuZbwjoxPl3ueUEMp5vGYyzTkHr8cK1VdexmMbupSQkRkSYPO9\nhEj2zt0VjPKY7UnaZdWClZPn7HVLlCGT1eeaRcPG9IR8Xbe9kcRCDc2Ucc5m\nESKt+KnKiYUtEdselmuYFsuD54q0EI6k1vJGpLFjgur+q9YvFssJTrFHPbE2\nlrztQcHEeSXqN+u7DjejbaBfDF11kr7WjYtxrQIijfxEP4oQL9xlXt+QVEGy\n0HDzfl5P0cWj6P+XyjXdphzlNm3N74FRa+PR9AUiCgHnSrdJCsF7QXKSmcH7\nCz+XmgbmDdeLarcSlFIQXd9qXN1j7ucl8Bk/DzJ3P3JGQanwVivzy8cdcvdn\nhJDT6t2f3KbPF8FcA/9TNyaM9CJnADwE4Yn1Lg8gOv7MnLcuCHd33wAKLCT5\nAZ9+wssUuhKIdNNRrmSVo5VOAETvWBZvlCvIELp252GfclIvfS27kbsyyZus\nvnUuCYbAA0kJR0mQYUUurAspRFjvRlQNIiyXjBAetcoSyO2mqLWWU8G43GTP\nM8kr9Ero6XP883SsutD7JV+0to97nvL0DZ3USyGjkDXB05GTk60RdEhHI29k\n/QOF\r\n=I+z5\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"alros@microsoft.com","name":"alexr00"},{"email":"npmjs@microsoft.com","name":"microsoft"},{"email":"tyriar@tyriar.com","name":"tyriar"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty_0.9.0-beta8_1558562868070_0.3065852574869019"},"_hasShrinkwrap":false},"0.9.0-beta9":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Microsoft Corporation"},"version":"0.9.0-beta9","license":"MIT","main":"./lib/index.js","types":"./typings/node-pty.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","watch":"tsc -w","lint":"tslint 'src/**/*.ts'","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec --exit lib/*.test.js","prepare":"npm run tsc","prepublishOnly":"npm run tsc"},"dependencies":{"nan":"^2.13.2"},"devDependencies":{"@types/mocha":"^5.0.0","@types/node":"^6.0.104","cross-env":"^5.1.4","mocha":"^5.0.5","pollUntil":"^1.0.3","ps-list":"^6.0.0","tslint":"^5.12.1","tslint-consistent-codestyle":"^1.15.0","typescript":"^3.2.2"},"gitHead":"47853646d38dceddd5486ee705666f5114a81cf5","readme":"# node-pty\n\n[![Build Status](https://dev.azure.com/vscode/node-pty/_apis/build/status/Microsoft.node-pty)](https://dev.azure.com/vscode/node-pty/_build/latest?definitionId=11)\n\n`forkpty(3)` bindings for node.js. This allows you to fork processes with pseudoterminal file descriptors. It returns a terminal object which allows reads and writes.\n\nThis is useful for:\n\n- Writing a terminal emulator (eg. via [xterm.js](https://github.com/sourcelair/xterm.js)).\n- Getting certain programs to *think* you're a terminal, such as when you need a program to send you control sequences.\n\n`node-pty` supports Linux, macOS and Windows. Windows support is possible by utilizing the [Windows conpty API](https://blogs.msdn.microsoft.com/commandline/2018/08/02/windows-command-line-introducing-the-windows-pseudo-console-conpty/) on Windows 1809+ and the [winpty](https://github.com/rprichard/winpty) library in older version.\n\n## Real-world Uses\n\n`node-pty` powers many different terminal emulators, including:\n\n- [Microsoft Visual Studio Code](https://code.visualstudio.com)\n- [Hyper](https://hyper.is/)\n- [Upterm](https://github.com/railsware/upterm)\n- [Script Runner](https://github.com/ioquatix/script-runner) for Atom.\n- [Theia](https://github.com/theia-ide/theia)\n- [FreeMAN](https://github.com/matthew-matvei/freeman) file manager\n- [atom-xterm](https://atom.io/packages/atom-xterm) - Atom plugin for providing terminals inside your Atom workspace.\n- [Termination](https://atom.io/packages/termination) - Another Atom plugin that provides terminals inside your Atom workspace.\n- [electerm](https://github.com/electerm/electerm) Terminal/ssh/sftp client(linux, mac, win).\n- [Extraterm](http://extraterm.org/)\n- [Wetty](https://github.com/krishnasrinivas/wetty) Browser based Terminal over HTTP and HTTPS\n\nDo you use node-pty in your application as well? Please open a [Pull Request](https://github.com/Tyriar/node-pty/pulls) to include it here. We would love to have it in our list.\n\n## Example Usage\n\n```js\nvar os = require('os');\nvar pty = require('node-pty');\n\nvar shell = os.platform() === 'win32' ? 'powershell.exe' : 'bash';\n\nvar ptyProcess = pty.spawn(shell, [], {\n  name: 'xterm-color',\n  cols: 80,\n  rows: 30,\n  cwd: process.env.HOME,\n  env: process.env\n});\n\nptyProcess.on('data', function(data) {\n  process.stdout.write(data);\n});\n\nptyProcess.write('ls\\r');\nptyProcess.resize(100, 40);\nptyProcess.write('ls\\r');\n```\n\n## Building\n\n```bash\n# Install dependencies and build C++\nnpm install\n# Compile TypeScript -> JavaScript\nnpm run tsc\n```\n\n## Dependencies\n\n### Linux/Ubuntu\n\n```\nsudo apt install -y make python build-essential\n```\n\nThe following are also needed:\n\n- Node.JS 10+\n\n### Windows\n\n`npm install` requires some tools to be present in the system like Python and C++ compiler. Windows users can easily install them by running the following command in PowerShell as administrator. For more information see https://github.com/felixrieseberg/windows-build-tools:\n\n```sh\nnpm install --global --production windows-build-tools\n```\n\nThe following are also needed:\n\n- [Windows SDK](https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk) - only the \"Desktop C++ Apps\" components are needed to be installed\n- Node.JS 10+\n\n## Debugging\n\n[The wiki](https://github.com/Microsoft/node-pty/wiki/Debugging) contains instructions for debugging node-pty.\n\n## Security\n\nAll processes launched from node-pty will launch at the same permission level of the parent process. Take care particularly when using node-pty inside a server that's accessible on the internet. We recommend launching the pty inside a container to protect your host machine.\n\n## Thread Safety\n\nNote that node-pty is not thread safe so running it across multiple worker threads in node.js could cause issues.\n\n## Troubleshooting\n\n### Powershell gives error 8009001d\n\n> Internal Windows PowerShell error.  Loading managed Windows PowerShell failed with error 8009001d.\n\nThis happens when PowerShell is launched with no `SystemRoot` environment variable present.\n\n### ConnectNamedPipe failed: Windows error 232\n\nThis error can occur due to anti-virus software intercepting winpty from creating a pty. To workaround this you can exclude this file from your anti-virus scanning `node-pty\\build\\Release\\winpty-agent.exe`\n\n## pty.js\n\nThis project is forked from [chjj/pty.js](https://github.com/chjj/pty.js) with the primary goals being to provide better support for later Node.JS versions and Windows.\n\n## License\n\nCopyright (c) 2012-2015, Christopher Jeffrey (MIT License).<br>\nCopyright (c) 2016, Daniel Imms (MIT License).<br>\nCopyright (c) 2018, Microsoft Corporation (MIT License).\n","readmeFilename":"README.md","_id":"node-pty@0.9.0-beta9","_npmVersion":"6.4.1","_nodeVersion":"8.16.0","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"integrity":"sha512-h6e8jUikGSZwqt1JHmzT5Zi0fdUCultX/BWrS35suTaZNJm/YSJA2QDG9HTVoSA6dhRvtFoaGiBtgbX9uZKe6w==","shasum":"75cffcf4026f543475c115f017ca7fe66cf6e7fe","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.9.0-beta9.tgz","fileCount":240,"unpackedSize":1062627,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc5c3XCRA9TVsSAnZWagAA27YP/Ra0h1+0pcdejr0IXazY\nC1Oz1sYQH6H2ZQ2YU9hTYIVzsvQDABqpUm62+8cwuOGfWffQ7uuYrL+5guqz\neyjZ9TzTw2+g35k+HJOC4GVj20uuRPIVEOSg4DXiZkzzWYE501b/IGX/NFfF\nSYZiGWegIAS3KoDnFp78P2XVtXVh8QUUJS2jfcSTugNTCFgJUtCPvp9A5KAR\nN71/Oh1a/sHQ8nsxUYDrQtVOkeZ8QeySbNo/k676aCKijTGkaWyZtYMnZU4j\nFrFcjFWH3kNHqaVLmS/sJzGrJ4ZpghH/M0FVfrW3nJ3Y6crGur66xDPUlmgQ\ndvrECQyNsBoHfFGI4856O0VBCAarkHrN1ByKVaNCTMnIFc5TItT6eWkWnexa\n/9+EdnKA7tmu7gryQ7EgQalVp1M7nhpOU5Qwx/ognPiUHv8UgLZSnR7433NL\nembG9oxZmyKub7QdEl1UCimpwKlFqwB+mmDvmK8yNgobsI/gYwO04vL/jzsD\n7JvlhoNBxjiu3xtZ6PRloqFIWFH9rrAK9bqGiBPfBxOSfo8pVJyTsO1eIYMQ\n7bc5JIg9TLpX+xT3CsQWgWgPwbJHDTMQmDh4v8983LqN2BnY0N+rR6cvCrl1\nUP05/3Msd/DJte6HHqCMlmU5vbmLmgTdJgyvYxkXzrbDiV3AAR72dw3WJY3R\nOyzg\r\n=xExd\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"alros@microsoft.com","name":"alexr00"},{"email":"npmjs@microsoft.com","name":"microsoft"},{"email":"tyriar@tyriar.com","name":"tyriar"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty_0.9.0-beta9_1558564310919_0.3187249005402166"},"_hasShrinkwrap":false},"0.9.0-beta10":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Microsoft Corporation"},"version":"0.9.0-beta10","license":"MIT","main":"./lib/index.js","types":"./typings/node-pty.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","watch":"tsc -w","lint":"tslint 'src/**/*.ts'","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec --exit lib/*.test.js","prepare":"npm run tsc","prepublishOnly":"npm run tsc"},"dependencies":{"nan":"^2.13.2"},"devDependencies":{"@types/mocha":"^5.0.0","@types/node":"^6.0.104","cross-env":"^5.1.4","mocha":"^5.0.5","pollUntil":"^1.0.3","ps-list":"^6.0.0","tslint":"^5.12.1","tslint-consistent-codestyle":"^1.15.0","typescript":"^3.2.2"},"gitHead":"487b3ed4ff9a9681d770ce9cdf047685d941eedc","readme":"# node-pty\n\n[![Build Status](https://dev.azure.com/vscode/node-pty/_apis/build/status/Microsoft.node-pty)](https://dev.azure.com/vscode/node-pty/_build/latest?definitionId=11)\n\n`forkpty(3)` bindings for node.js. This allows you to fork processes with pseudoterminal file descriptors. It returns a terminal object which allows reads and writes.\n\nThis is useful for:\n\n- Writing a terminal emulator (eg. via [xterm.js](https://github.com/sourcelair/xterm.js)).\n- Getting certain programs to *think* you're a terminal, such as when you need a program to send you control sequences.\n\n`node-pty` supports Linux, macOS and Windows. Windows support is possible by utilizing the [Windows conpty API](https://blogs.msdn.microsoft.com/commandline/2018/08/02/windows-command-line-introducing-the-windows-pseudo-console-conpty/) on Windows 1809+ and the [winpty](https://github.com/rprichard/winpty) library in older version.\n\n## Real-world Uses\n\n`node-pty` powers many different terminal emulators, including:\n\n- [Microsoft Visual Studio Code](https://code.visualstudio.com)\n- [Hyper](https://hyper.is/)\n- [Upterm](https://github.com/railsware/upterm)\n- [Script Runner](https://github.com/ioquatix/script-runner) for Atom.\n- [Theia](https://github.com/theia-ide/theia)\n- [FreeMAN](https://github.com/matthew-matvei/freeman) file manager\n- [atom-xterm](https://atom.io/packages/atom-xterm) - Atom plugin for providing terminals inside your Atom workspace.\n- [Termination](https://atom.io/packages/termination) - Another Atom plugin that provides terminals inside your Atom workspace.\n- [electerm](https://github.com/electerm/electerm) Terminal/ssh/sftp client(linux, mac, win).\n- [Extraterm](http://extraterm.org/)\n- [Wetty](https://github.com/krishnasrinivas/wetty) Browser based Terminal over HTTP and HTTPS\n\nDo you use node-pty in your application as well? Please open a [Pull Request](https://github.com/Tyriar/node-pty/pulls) to include it here. We would love to have it in our list.\n\n## Example Usage\n\n```js\nvar os = require('os');\nvar pty = require('node-pty');\n\nvar shell = os.platform() === 'win32' ? 'powershell.exe' : 'bash';\n\nvar ptyProcess = pty.spawn(shell, [], {\n  name: 'xterm-color',\n  cols: 80,\n  rows: 30,\n  cwd: process.env.HOME,\n  env: process.env\n});\n\nptyProcess.on('data', function(data) {\n  process.stdout.write(data);\n});\n\nptyProcess.write('ls\\r');\nptyProcess.resize(100, 40);\nptyProcess.write('ls\\r');\n```\n\n## Building\n\n```bash\n# Install dependencies and build C++\nnpm install\n# Compile TypeScript -> JavaScript\nnpm run tsc\n```\n\n## Dependencies\n\n### Linux/Ubuntu\n\n```\nsudo apt install -y make python build-essential\n```\n\nThe following are also needed:\n\n- Node.JS 10+\n\n### Windows\n\n`npm install` requires some tools to be present in the system like Python and C++ compiler. Windows users can easily install them by running the following command in PowerShell as administrator. For more information see https://github.com/felixrieseberg/windows-build-tools:\n\n```sh\nnpm install --global --production windows-build-tools\n```\n\nThe following are also needed:\n\n- [Windows SDK](https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk) - only the \"Desktop C++ Apps\" components are needed to be installed\n- Node.JS 10+\n\n## Debugging\n\n[The wiki](https://github.com/Microsoft/node-pty/wiki/Debugging) contains instructions for debugging node-pty.\n\n## Security\n\nAll processes launched from node-pty will launch at the same permission level of the parent process. Take care particularly when using node-pty inside a server that's accessible on the internet. We recommend launching the pty inside a container to protect your host machine.\n\n## Thread Safety\n\nNote that node-pty is not thread safe so running it across multiple worker threads in node.js could cause issues.\n\n## Flow Control\n\nAutomatic flow control can be enabled by either providing `handleFlowControl = true` in the constructor options or setting it later on:\n\n```js\nconst PAUSE = '\\x13';   // XOFF\nconst RESUME = '\\x11';  // XON\n\nconst ptyProcess = pty.spawn(shell, [], {handleFlowControl: true});\n\n// flow control in action\nptyProcess.write(PAUSE);  // pty will block and pause the slave program\n...\nptyProcess.write(RESUME); // pty will enter flow mode and resume the slave program\n\n// temporarily disable/re-enable flow control\nptyProcess.handleFlowControl = false;\n...\nptyProcess.handleFlowControl = true;\n```\n\nBy default `PAUSE` and `RESUME` are XON/XOFF control codes (as shown above). To avoid conflicts in environments that use these control codes for different purposes the messages can be customized as `flowControlPause: string` and `flowControlResume: string` in the constructor options. `PAUSE` and `RESUME` are not passed to the underlying pseudoterminal if flow control is enabled.\n\n## Troubleshooting\n\n### Powershell gives error 8009001d\n\n> Internal Windows PowerShell error.  Loading managed Windows PowerShell failed with error 8009001d.\n\nThis happens when PowerShell is launched with no `SystemRoot` environment variable present.\n\n### ConnectNamedPipe failed: Windows error 232\n\nThis error can occur due to anti-virus software intercepting winpty from creating a pty. To workaround this you can exclude this file from your anti-virus scanning `node-pty\\build\\Release\\winpty-agent.exe`\n\n## pty.js\n\nThis project is forked from [chjj/pty.js](https://github.com/chjj/pty.js) with the primary goals being to provide better support for later Node.JS versions and Windows.\n\n## License\n\nCopyright (c) 2012-2015, Christopher Jeffrey (MIT License).<br>\nCopyright (c) 2016, Daniel Imms (MIT License).<br>\nCopyright (c) 2018, Microsoft Corporation (MIT License).\n","readmeFilename":"README.md","_id":"node-pty@0.9.0-beta10","_npmVersion":"6.4.1","_nodeVersion":"8.16.0","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"integrity":"sha512-I+wvK1FCiaAkIhlW7zA7V2FkJSX2JjOto5R9DXLGQGWMIXo+n2f0vXu7YLMbGaR5eR6NIm6KP0UhsFKKCn/bwg==","shasum":"058850d6971b04fefaa5ffe00a8816cd892f1419","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.9.0-beta10.tgz","fileCount":240,"unpackedSize":1075834,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc5dpACRA9TVsSAnZWagAA5ZwQAIryB11eimkJBKrdFy59\nYLt42nw/dgGHPwb6fZeDcN9CNWzx/D1O0GHooxLBXby7Mg0cveV8kMNb6d7X\nJuMtGw6VtCDIRawyCkRBst1JPIcz+QPDyMbIFSAoH0lpuwRumpFb78pgfeRh\ncmFN1/t0/krHxxEoc3nIoIEl0D1hUqzhCqJUTNEE/Acco5XNyxd4N6PEzE6G\nNqdQBMDaPlGNpj1DS8+6MCJf4/XElHk+NwbjMay5vL6VVPAGAbfMYTZ7nyPq\njzISglf9+M7kwHXKSmTnuwnLm8eFh+PVvnQUnXaiS2TfU+m3Gsm1phm2JnVF\nd3yiO2duKN1UHGQcc0TIrNoVWJB2eR5EbzZo1bg4SdrJi/7iR8RKyobw0hjt\nNrmMH1d3pVOtjWNcWGWJTTL+5TvahULpPTyj3lnytFpNXLryiJO/7tsu19Mg\nCpGG6Ck5okIMlzPf6edKwTt9ICyDIRL2F248wjBOGcdc1JmgemG8Osy8uebf\n/qq5rVBC1DLQ2b+fF7GelwmvQeL3fLDe/zX9mqCeWJe1YQnOrR6Zd+L5XMt3\nNkQG28R6zdwpzKuJIqfpi9MbEVF0TyzxJwZ/uraY2BzKEjDRc3T3UI8jA6Xf\nBAdTP9kAX3QOPgTnXPBIhVMYUyj3TX1lgipuQOv0HPDO42CQ4I4mG+cGqPJG\n4AQR\r\n=q48e\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"alros@microsoft.com","name":"alexr00"},{"email":"npmjs@microsoft.com","name":"microsoft"},{"email":"tyriar@tyriar.com","name":"tyriar"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty_0.9.0-beta10_1558567487542_0.26998411486223195"},"_hasShrinkwrap":false},"0.9.0-beta11":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Microsoft Corporation"},"version":"0.9.0-beta11","license":"MIT","main":"./lib/index.js","types":"./typings/node-pty.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","watch":"tsc -w","lint":"tslint 'src/**/*.ts'","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec --exit lib/*.test.js","prepare":"npm run tsc","prepublishOnly":"npm run tsc"},"dependencies":{"nan":"^2.13.2"},"devDependencies":{"@types/mocha":"^5.0.0","@types/node":"^6.0.104","cross-env":"^5.1.4","mocha":"^5.0.5","pollUntil":"^1.0.3","ps-list":"^6.0.0","tslint":"^5.12.1","tslint-consistent-codestyle":"^1.15.0","typescript":"^3.2.2"},"gitHead":"5924d76d6765ac4da3996f49e1282eaafd591452","readme":"# node-pty\n\n[![Build Status](https://dev.azure.com/vscode/node-pty/_apis/build/status/Microsoft.node-pty)](https://dev.azure.com/vscode/node-pty/_build/latest?definitionId=11)\n\n`forkpty(3)` bindings for node.js. This allows you to fork processes with pseudoterminal file descriptors. It returns a terminal object which allows reads and writes.\n\nThis is useful for:\n\n- Writing a terminal emulator (eg. via [xterm.js](https://github.com/sourcelair/xterm.js)).\n- Getting certain programs to *think* you're a terminal, such as when you need a program to send you control sequences.\n\n`node-pty` supports Linux, macOS and Windows. Windows support is possible by utilizing the [Windows conpty API](https://blogs.msdn.microsoft.com/commandline/2018/08/02/windows-command-line-introducing-the-windows-pseudo-console-conpty/) on Windows 1809+ and the [winpty](https://github.com/rprichard/winpty) library in older version.\n\n## Real-world Uses\n\n`node-pty` powers many different terminal emulators, including:\n\n- [Microsoft Visual Studio Code](https://code.visualstudio.com)\n- [Hyper](https://hyper.is/)\n- [Upterm](https://github.com/railsware/upterm)\n- [Script Runner](https://github.com/ioquatix/script-runner) for Atom.\n- [Theia](https://github.com/theia-ide/theia)\n- [FreeMAN](https://github.com/matthew-matvei/freeman) file manager\n- [atom-xterm](https://atom.io/packages/atom-xterm) - Atom plugin for providing terminals inside your Atom workspace.\n- [Termination](https://atom.io/packages/termination) - Another Atom plugin that provides terminals inside your Atom workspace.\n- [electerm](https://github.com/electerm/electerm) Terminal/ssh/sftp client(linux, mac, win).\n- [Extraterm](http://extraterm.org/)\n- [Wetty](https://github.com/krishnasrinivas/wetty) Browser based Terminal over HTTP and HTTPS\n\nDo you use node-pty in your application as well? Please open a [Pull Request](https://github.com/Tyriar/node-pty/pulls) to include it here. We would love to have it in our list.\n\n## Example Usage\n\n```js\nvar os = require('os');\nvar pty = require('node-pty');\n\nvar shell = os.platform() === 'win32' ? 'powershell.exe' : 'bash';\n\nvar ptyProcess = pty.spawn(shell, [], {\n  name: 'xterm-color',\n  cols: 80,\n  rows: 30,\n  cwd: process.env.HOME,\n  env: process.env\n});\n\nptyProcess.on('data', function(data) {\n  process.stdout.write(data);\n});\n\nptyProcess.write('ls\\r');\nptyProcess.resize(100, 40);\nptyProcess.write('ls\\r');\n```\n\n## Building\n\n```bash\n# Install dependencies and build C++\nnpm install\n# Compile TypeScript -> JavaScript\nnpm run tsc\n```\n\n## Dependencies\n\n### Linux/Ubuntu\n\n```\nsudo apt install -y make python build-essential\n```\n\nThe following are also needed:\n\n- Node.JS 10+\n\n### Windows\n\n`npm install` requires some tools to be present in the system like Python and C++ compiler. Windows users can easily install them by running the following command in PowerShell as administrator. For more information see https://github.com/felixrieseberg/windows-build-tools:\n\n```sh\nnpm install --global --production windows-build-tools\n```\n\nThe following are also needed:\n\n- [Windows SDK](https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk) - only the \"Desktop C++ Apps\" components are needed to be installed\n- Node.JS 10+\n\n## Debugging\n\n[The wiki](https://github.com/Microsoft/node-pty/wiki/Debugging) contains instructions for debugging node-pty.\n\n## Security\n\nAll processes launched from node-pty will launch at the same permission level of the parent process. Take care particularly when using node-pty inside a server that's accessible on the internet. We recommend launching the pty inside a container to protect your host machine.\n\n## Thread Safety\n\nNote that node-pty is not thread safe so running it across multiple worker threads in node.js could cause issues.\n\n## Flow Control\n\nAutomatic flow control can be enabled by either providing `handleFlowControl = true` in the constructor options or setting it later on:\n\n```js\nconst PAUSE = '\\x13';   // XOFF\nconst RESUME = '\\x11';  // XON\n\nconst ptyProcess = pty.spawn(shell, [], {handleFlowControl: true});\n\n// flow control in action\nptyProcess.write(PAUSE);  // pty will block and pause the slave program\n...\nptyProcess.write(RESUME); // pty will enter flow mode and resume the slave program\n\n// temporarily disable/re-enable flow control\nptyProcess.handleFlowControl = false;\n...\nptyProcess.handleFlowControl = true;\n```\n\nBy default `PAUSE` and `RESUME` are XON/XOFF control codes (as shown above). To avoid conflicts in environments that use these control codes for different purposes the messages can be customized as `flowControlPause: string` and `flowControlResume: string` in the constructor options. `PAUSE` and `RESUME` are not passed to the underlying pseudoterminal if flow control is enabled.\n\n## Troubleshooting\n\n### Powershell gives error 8009001d\n\n> Internal Windows PowerShell error.  Loading managed Windows PowerShell failed with error 8009001d.\n\nThis happens when PowerShell is launched with no `SystemRoot` environment variable present.\n\n### ConnectNamedPipe failed: Windows error 232\n\nThis error can occur due to anti-virus software intercepting winpty from creating a pty. To workaround this you can exclude this file from your anti-virus scanning `node-pty\\build\\Release\\winpty-agent.exe`\n\n## pty.js\n\nThis project is forked from [chjj/pty.js](https://github.com/chjj/pty.js) with the primary goals being to provide better support for later Node.JS versions and Windows.\n\n## License\n\nCopyright (c) 2012-2015, Christopher Jeffrey (MIT License).<br>\nCopyright (c) 2016, Daniel Imms (MIT License).<br>\nCopyright (c) 2018, Microsoft Corporation (MIT License).\n","readmeFilename":"README.md","_id":"node-pty@0.9.0-beta11","_npmVersion":"6.4.1","_nodeVersion":"8.16.0","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"integrity":"sha512-YGpzmpvu4im9DNmxE4MbonOJdNFraCCbEUiGDvjfJBqnwDPFaO6H5SKBzT5ejpbJFwOkRpameG2BEExlMQJZHg==","shasum":"d964f37ab325c3955c8848b0efd4f39951394da8","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.9.0-beta11.tgz","fileCount":240,"unpackedSize":1076065,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc5d05CRA9TVsSAnZWagAAJI8P/15qNyS33KuvFgYzs4eW\nTgc2P23VGaIeBzdy5sjZfGrs9VqorTUOTp5lG2FaBIiNePLv09W8n7eXc9IB\nQ72yzmhiOYs3Z73FE79/cXXFwgEkQrOCPZlA1RjEdE48tSUq5LznUskR3HaO\n/B1sh2CBhY3NVoGMqb7HlESFqnI9BHknngiIF/ETSBthhkKKZLVJ8a8Y7SEU\nz7+HP4Xw5774R1XaJ1NrNTbplV8HzqvbmeS5jGjOykaDNol+/xuBOYekGwsc\ngWyd343/RYz7Jl7D2lDd698HWe/bzcdXZbkQDOQAHGyXFdSBpuc9cWX58WJL\nDxwIPA3dfRatwmXCaeg6kq7DOW74FWaOBF2FNYK2W8UnDz+Lw+lACWiRxvIQ\nUl6idGp+cie0hTkC2JhIxwZXyBiMadEDglsZCh0XYXccipO573ybsmyUgjLB\nI/FxZbDd8ULVRH5dRNqQBY6CVVnbcwQ760CubxZmY/Wm4Fu8QN8JLrRDedyE\nYiObev3UUaYhEnApO9RkdCrtmJy2v40IMpIavvS1CDeyNoe+HzJTbxC6mGTb\nLTLw/MGRaviTDLpF54089S3LJhxuhNSxr1eszpuVMJTl3ApHypUcWo/kOW0u\nt2+3HaG1cmXJwlq56chmOghRfEijOJzKHozpHvO4wTpBdiNnaAbjWIlOmKFJ\nSNdG\r\n=goQj\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"alros@microsoft.com","name":"alexr00"},{"email":"npmjs@microsoft.com","name":"microsoft"},{"email":"tyriar@tyriar.com","name":"tyriar"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty_0.9.0-beta11_1558568248347_0.4546255726071169"},"_hasShrinkwrap":false},"0.9.0-beta12":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Microsoft Corporation"},"version":"0.9.0-beta12","license":"MIT","main":"./lib/index.js","types":"./typings/node-pty.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","watch":"tsc -w","lint":"tslint 'src/**/*.ts'","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec --exit lib/*.test.js","prepare":"npm run tsc","prepublishOnly":"npm run tsc"},"dependencies":{"nan":"^2.13.2"},"devDependencies":{"@types/mocha":"^5.0.0","@types/node":"^6.0.104","cross-env":"^5.1.4","mocha":"^5.0.5","pollUntil":"^1.0.3","ps-list":"^6.0.0","tslint":"^5.12.1","tslint-consistent-codestyle":"^1.15.0","typescript":"3.4"},"gitHead":"f9d8df31ec57289217960003b56b52f3f009d88d","readme":"# node-pty\n\n[![Build Status](https://dev.azure.com/vscode/node-pty/_apis/build/status/Microsoft.node-pty)](https://dev.azure.com/vscode/node-pty/_build/latest?definitionId=11)\n\n`forkpty(3)` bindings for node.js. This allows you to fork processes with pseudoterminal file descriptors. It returns a terminal object which allows reads and writes.\n\nThis is useful for:\n\n- Writing a terminal emulator (eg. via [xterm.js](https://github.com/sourcelair/xterm.js)).\n- Getting certain programs to *think* you're a terminal, such as when you need a program to send you control sequences.\n\n`node-pty` supports Linux, macOS and Windows. Windows support is possible by utilizing the [Windows conpty API](https://blogs.msdn.microsoft.com/commandline/2018/08/02/windows-command-line-introducing-the-windows-pseudo-console-conpty/) on Windows 1809+ and the [winpty](https://github.com/rprichard/winpty) library in older version.\n\n## Real-world Uses\n\n`node-pty` powers many different terminal emulators, including:\n\n- [Microsoft Visual Studio Code](https://code.visualstudio.com)\n- [Hyper](https://hyper.is/)\n- [Upterm](https://github.com/railsware/upterm)\n- [Script Runner](https://github.com/ioquatix/script-runner) for Atom.\n- [Theia](https://github.com/theia-ide/theia)\n- [FreeMAN](https://github.com/matthew-matvei/freeman) file manager\n- [atom-xterm](https://atom.io/packages/atom-xterm) - Atom plugin for providing terminals inside your Atom workspace.\n- [Termination](https://atom.io/packages/termination) - Another Atom plugin that provides terminals inside your Atom workspace.\n- [electerm](https://github.com/electerm/electerm) Terminal/ssh/sftp client(linux, mac, win).\n- [Extraterm](http://extraterm.org/)\n- [Wetty](https://github.com/krishnasrinivas/wetty) Browser based Terminal over HTTP and HTTPS\n\nDo you use node-pty in your application as well? Please open a [Pull Request](https://github.com/Tyriar/node-pty/pulls) to include it here. We would love to have it in our list.\n\n## Example Usage\n\n```js\nvar os = require('os');\nvar pty = require('node-pty');\n\nvar shell = os.platform() === 'win32' ? 'powershell.exe' : 'bash';\n\nvar ptyProcess = pty.spawn(shell, [], {\n  name: 'xterm-color',\n  cols: 80,\n  rows: 30,\n  cwd: process.env.HOME,\n  env: process.env\n});\n\nptyProcess.on('data', function(data) {\n  process.stdout.write(data);\n});\n\nptyProcess.write('ls\\r');\nptyProcess.resize(100, 40);\nptyProcess.write('ls\\r');\n```\n\n## Building\n\n```bash\n# Install dependencies and build C++\nnpm install\n# Compile TypeScript -> JavaScript\nnpm run tsc\n```\n\n## Dependencies\n\n### Linux/Ubuntu\n\n```\nsudo apt install -y make python build-essential\n```\n\nThe following are also needed:\n\n- Node.JS 10+\n\n### Windows\n\n`npm install` requires some tools to be present in the system like Python and C++ compiler. Windows users can easily install them by running the following command in PowerShell as administrator. For more information see https://github.com/felixrieseberg/windows-build-tools:\n\n```sh\nnpm install --global --production windows-build-tools\n```\n\nThe following are also needed:\n\n- [Windows SDK](https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk) - only the \"Desktop C++ Apps\" components are needed to be installed\n- Node.JS 10+\n\n## Debugging\n\n[The wiki](https://github.com/Microsoft/node-pty/wiki/Debugging) contains instructions for debugging node-pty.\n\n## Security\n\nAll processes launched from node-pty will launch at the same permission level of the parent process. Take care particularly when using node-pty inside a server that's accessible on the internet. We recommend launching the pty inside a container to protect your host machine.\n\n## Thread Safety\n\nNote that node-pty is not thread safe so running it across multiple worker threads in node.js could cause issues.\n\n## Flow Control\n\nAutomatic flow control can be enabled by either providing `handleFlowControl = true` in the constructor options or setting it later on:\n\n```js\nconst PAUSE = '\\x13';   // XOFF\nconst RESUME = '\\x11';  // XON\n\nconst ptyProcess = pty.spawn(shell, [], {handleFlowControl: true});\n\n// flow control in action\nptyProcess.write(PAUSE);  // pty will block and pause the slave program\n...\nptyProcess.write(RESUME); // pty will enter flow mode and resume the slave program\n\n// temporarily disable/re-enable flow control\nptyProcess.handleFlowControl = false;\n...\nptyProcess.handleFlowControl = true;\n```\n\nBy default `PAUSE` and `RESUME` are XON/XOFF control codes (as shown above). To avoid conflicts in environments that use these control codes for different purposes the messages can be customized as `flowControlPause: string` and `flowControlResume: string` in the constructor options. `PAUSE` and `RESUME` are not passed to the underlying pseudoterminal if flow control is enabled.\n\n## Troubleshooting\n\n### Powershell gives error 8009001d\n\n> Internal Windows PowerShell error.  Loading managed Windows PowerShell failed with error 8009001d.\n\nThis happens when PowerShell is launched with no `SystemRoot` environment variable present.\n\n### ConnectNamedPipe failed: Windows error 232\n\nThis error can occur due to anti-virus software intercepting winpty from creating a pty. To workaround this you can exclude this file from your anti-virus scanning `node-pty\\build\\Release\\winpty-agent.exe`\n\n## pty.js\n\nThis project is forked from [chjj/pty.js](https://github.com/chjj/pty.js) with the primary goals being to provide better support for later Node.JS versions and Windows.\n\n## License\n\nCopyright (c) 2012-2015, Christopher Jeffrey (MIT License).<br>\nCopyright (c) 2016, Daniel Imms (MIT License).<br>\nCopyright (c) 2018, Microsoft Corporation (MIT License).\n","readmeFilename":"README.md","_id":"node-pty@0.9.0-beta12","_npmVersion":"6.4.1","_nodeVersion":"8.16.0","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"integrity":"sha512-HrxPy0Mv4na5y4ARMnOj54viA/suP+RX3eV5jMd/MmnpUQoWufu30gLRXwth9oXV5U4AyZBdyAo5ZuTM8ocUHg==","shasum":"45617bda4d94eafd9631f80626049f45c7431bfa","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.9.0-beta12.tgz","fileCount":240,"unpackedSize":1076355,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc6CdaCRA9TVsSAnZWagAAhwQP/ie9lmFCYJcLw1u44aUF\n5m7C8/uagzyYoKJ0nBNFpsyEvtbXmRZMgKpJx8Fjvr668veD/9+juATDKsKt\nDwdndcQwXoco+Z60U549pwHAY5hER3yVitXBoyctWMDE/yqo06DTEy/aeYJE\n5HnWFApI2owQPn9Tzbu06CoZxHDK1maQVBHbhpdyNVzA97dqjmNX4uP+eaoW\nAAw5h7tMfYRRl5/K9wQg0foP9cu5Wiq8srNV0IK1pwiMk8rxQqOtTHmbbJWj\nL6grKrJpsXVWCEklPT43JF35+jfbM8O8gnuPjq6rGDQYSe+CzsS8WCzG1XEj\nweGndgeNvkur3SCSqcaEV+GNx3eJ/HF3ufX/FpKZ4D1lX1O3IFI4LJ+nupq5\naRquY/wAE+Y2o3CistgZhShiIVO7dGi5L0+xY837llzOIljDIgBhPZ/zNkUU\nM806h+1hvBhhu/2xyBy9Rm5daJA/ewhuMNMraL1Je5rYkb6rKL90As2KIOAM\nGwfbnrjYjEs03TVflRCDSfAZ3C+AOOs3xc/5lZwEGTb85KrwYeiOQGTe6eiS\n4+UUKt9QRAQ+axKFEhha2KMWdb7RsFBlmVgpibIRDGrgBydL8LxDWivjY1Mr\nhmoianDRbmVjF8mKqvKZWjsRyu3OdvIbt67JKvVe/d0P0u0ZHnwAKF1lD1bz\nzgQo\r\n=UdGs\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"alros@microsoft.com","name":"alexr00"},{"email":"npmjs@microsoft.com","name":"microsoft"},{"email":"tyriar@tyriar.com","name":"tyriar"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty_0.9.0-beta12_1558718297632_0.1840879616330673"},"_hasShrinkwrap":false},"0.9.0-beta13":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Microsoft Corporation"},"version":"0.9.0-beta13","license":"MIT","main":"./lib/index.js","types":"./typings/node-pty.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","watch":"tsc -w","lint":"tslint 'src/**/*.ts'","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec --exit lib/*.test.js","prepare":"npm run tsc","prepublishOnly":"npm run tsc"},"dependencies":{"nan":"^2.13.2"},"devDependencies":{"@types/mocha":"^5.0.0","@types/node":"^6.0.104","cross-env":"^5.1.4","mocha":"^5.0.5","pollUntil":"^1.0.3","ps-list":"^6.0.0","tslint":"^5.12.1","tslint-consistent-codestyle":"^1.15.0","typescript":"3.4"},"gitHead":"4043efdc49c862ef9be037cf22ba15bec305474e","readme":"# node-pty\n\n[![Build Status](https://dev.azure.com/vscode/node-pty/_apis/build/status/Microsoft.node-pty)](https://dev.azure.com/vscode/node-pty/_build/latest?definitionId=11)\n\n`forkpty(3)` bindings for node.js. This allows you to fork processes with pseudoterminal file descriptors. It returns a terminal object which allows reads and writes.\n\nThis is useful for:\n\n- Writing a terminal emulator (eg. via [xterm.js](https://github.com/sourcelair/xterm.js)).\n- Getting certain programs to *think* you're a terminal, such as when you need a program to send you control sequences.\n\n`node-pty` supports Linux, macOS and Windows. Windows support is possible by utilizing the [Windows conpty API](https://blogs.msdn.microsoft.com/commandline/2018/08/02/windows-command-line-introducing-the-windows-pseudo-console-conpty/) on Windows 1809+ and the [winpty](https://github.com/rprichard/winpty) library in older version.\n\n## Real-world Uses\n\n`node-pty` powers many different terminal emulators, including:\n\n- [Microsoft Visual Studio Code](https://code.visualstudio.com)\n- [Hyper](https://hyper.is/)\n- [Upterm](https://github.com/railsware/upterm)\n- [Script Runner](https://github.com/ioquatix/script-runner) for Atom.\n- [Theia](https://github.com/theia-ide/theia)\n- [FreeMAN](https://github.com/matthew-matvei/freeman) file manager\n- [atom-xterm](https://atom.io/packages/atom-xterm) - Atom plugin for providing terminals inside your Atom workspace.\n- [Termination](https://atom.io/packages/termination) - Another Atom plugin that provides terminals inside your Atom workspace.\n- [electerm](https://github.com/electerm/electerm) Terminal/ssh/sftp client(linux, mac, win).\n- [Extraterm](http://extraterm.org/)\n- [Wetty](https://github.com/krishnasrinivas/wetty) Browser based Terminal over HTTP and HTTPS\n\nDo you use node-pty in your application as well? Please open a [Pull Request](https://github.com/Tyriar/node-pty/pulls) to include it here. We would love to have it in our list.\n\n## Example Usage\n\n```js\nvar os = require('os');\nvar pty = require('node-pty');\n\nvar shell = os.platform() === 'win32' ? 'powershell.exe' : 'bash';\n\nvar ptyProcess = pty.spawn(shell, [], {\n  name: 'xterm-color',\n  cols: 80,\n  rows: 30,\n  cwd: process.env.HOME,\n  env: process.env\n});\n\nptyProcess.on('data', function(data) {\n  process.stdout.write(data);\n});\n\nptyProcess.write('ls\\r');\nptyProcess.resize(100, 40);\nptyProcess.write('ls\\r');\n```\n\n## Building\n\n```bash\n# Install dependencies and build C++\nnpm install\n# Compile TypeScript -> JavaScript\nnpm run tsc\n```\n\n## Dependencies\n\n### Linux/Ubuntu\n\n```\nsudo apt install -y make python build-essential\n```\n\nThe following are also needed:\n\n- Node.JS 10+\n\n### Windows\n\n`npm install` requires some tools to be present in the system like Python and C++ compiler. Windows users can easily install them by running the following command in PowerShell as administrator. For more information see https://github.com/felixrieseberg/windows-build-tools:\n\n```sh\nnpm install --global --production windows-build-tools\n```\n\nThe following are also needed:\n\n- [Windows SDK](https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk) - only the \"Desktop C++ Apps\" components are needed to be installed\n- Node.JS 10+\n\n## Debugging\n\n[The wiki](https://github.com/Microsoft/node-pty/wiki/Debugging) contains instructions for debugging node-pty.\n\n## Security\n\nAll processes launched from node-pty will launch at the same permission level of the parent process. Take care particularly when using node-pty inside a server that's accessible on the internet. We recommend launching the pty inside a container to protect your host machine.\n\n## Thread Safety\n\nNote that node-pty is not thread safe so running it across multiple worker threads in node.js could cause issues.\n\n## Flow Control\n\nAutomatic flow control can be enabled by either providing `handleFlowControl = true` in the constructor options or setting it later on:\n\n```js\nconst PAUSE = '\\x13';   // XOFF\nconst RESUME = '\\x11';  // XON\n\nconst ptyProcess = pty.spawn(shell, [], {handleFlowControl: true});\n\n// flow control in action\nptyProcess.write(PAUSE);  // pty will block and pause the slave program\n...\nptyProcess.write(RESUME); // pty will enter flow mode and resume the slave program\n\n// temporarily disable/re-enable flow control\nptyProcess.handleFlowControl = false;\n...\nptyProcess.handleFlowControl = true;\n```\n\nBy default `PAUSE` and `RESUME` are XON/XOFF control codes (as shown above). To avoid conflicts in environments that use these control codes for different purposes the messages can be customized as `flowControlPause: string` and `flowControlResume: string` in the constructor options. `PAUSE` and `RESUME` are not passed to the underlying pseudoterminal if flow control is enabled.\n\n## Troubleshooting\n\n### Powershell gives error 8009001d\n\n> Internal Windows PowerShell error.  Loading managed Windows PowerShell failed with error 8009001d.\n\nThis happens when PowerShell is launched with no `SystemRoot` environment variable present.\n\n### ConnectNamedPipe failed: Windows error 232\n\nThis error can occur due to anti-virus software intercepting winpty from creating a pty. To workaround this you can exclude this file from your anti-virus scanning `node-pty\\build\\Release\\winpty-agent.exe`\n\n## pty.js\n\nThis project is forked from [chjj/pty.js](https://github.com/chjj/pty.js) with the primary goals being to provide better support for later Node.JS versions and Windows.\n\n## License\n\nCopyright (c) 2012-2015, Christopher Jeffrey (MIT License).<br>\nCopyright (c) 2016, Daniel Imms (MIT License).<br>\nCopyright (c) 2018, Microsoft Corporation (MIT License).\n","readmeFilename":"README.md","_id":"node-pty@0.9.0-beta13","_npmVersion":"6.4.1","_nodeVersion":"8.16.0","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"integrity":"sha512-hO1U8Hd4OhSZMryTqfsog2bJnRGh8Ct3yTsfKRbLK8qhUnqmyOdHzLQkGTx5J7aG7iA8mDVcWBSx2YX2MpkDRQ==","shasum":"615cae7447ac232aefa65a263d6821bc04d0f213","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.9.0-beta13.tgz","fileCount":240,"unpackedSize":1078510,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc6CkqCRA9TVsSAnZWagAAF7AQAIfSkjiqeOSie/pWL4Dq\nad2t4EFDZkihr7hzcELXWw+Kzpe6iyLTYHQzlWl8TDMI8a7kYb+yZ+2D/OID\nn2GCaieosJ6ZHJfLeqvVSfhPK4u75EaK3nIqnY1WOXAYsJhzvPHQlaOxtDZ5\n5ZquEGa6ZYGweIxRZhgV3MqJ8UBDaebFT642jlMFeOtEViKxioNUeOzhKKxY\n/Cxq9ZoIgx/uvPiq7T+hhRmGNX6C3A27RlvOUa3fgS5d+yOaydu+AmoXPrxG\n9D7oiKVcS3emmVNXmbLDB4iXC0eRaO5YDhNPStVdMOW67hOeZz4u0N1fAQ95\nHKvMIZCgVeasESq5SdBlj+tbGRuzQoXJFd+d/4bTHF9NbmQOMBaiAvxPvLN8\nUwJtass/4+zkNvC3jUvx1wfLdzHi2kd6bRtPO2sMNygiJoB6DwzStiCk6QcK\nRYPNy7nBlje7j5+tvR0RKE2OvUL70M+W/qN7xL7haWn4YdSZDnRQmbEgpmik\nrUBhAhH9JolHu+k0QgUhOL+lMlSNg5BldqPd+j0Y/AJnWsFdq7cj0RyhSlBM\ns7nBpwHl40mtZydkKRwNli5R5EAIApZt9vh4hj8XKmrdh1D76ac6zBhB7gbT\nBwP+mcL4k2fjAksX7zTex7HeKlBC5/iS2zJimQQ/pX0SGQAJS0iGPCjz4fyR\nHIQo\r\n=/WMm\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"alros@microsoft.com","name":"alexr00"},{"email":"npmjs@microsoft.com","name":"microsoft"},{"email":"tyriar@tyriar.com","name":"tyriar"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty_0.9.0-beta13_1558718762038_0.3936461047677622"},"_hasShrinkwrap":false},"0.9.0-beta14":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Microsoft Corporation"},"version":"0.9.0-beta14","license":"MIT","main":"./lib/index.js","types":"./typings/node-pty.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","watch":"tsc -w","lint":"tslint 'src/**/*.ts'","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec --exit lib/*.test.js","prepare":"npm run tsc","prepublishOnly":"npm run tsc"},"dependencies":{"nan":"^2.13.2"},"devDependencies":{"@types/mocha":"^5.0.0","@types/node":"^6.0.104","cross-env":"^5.1.4","mocha":"^5.0.5","pollUntil":"^1.0.3","ps-list":"^6.0.0","tslint":"^5.12.1","tslint-consistent-codestyle":"^1.15.0","typescript":"3.4"},"gitHead":"9f86ddf20395ca7116938f66a06dd3f8581e1c16","readme":"# node-pty\n\n[![Build Status](https://dev.azure.com/vscode/node-pty/_apis/build/status/Microsoft.node-pty)](https://dev.azure.com/vscode/node-pty/_build/latest?definitionId=11)\n\n`forkpty(3)` bindings for node.js. This allows you to fork processes with pseudoterminal file descriptors. It returns a terminal object which allows reads and writes.\n\nThis is useful for:\n\n- Writing a terminal emulator (eg. via [xterm.js](https://github.com/sourcelair/xterm.js)).\n- Getting certain programs to *think* you're a terminal, such as when you need a program to send you control sequences.\n\n`node-pty` supports Linux, macOS and Windows. Windows support is possible by utilizing the [Windows conpty API](https://blogs.msdn.microsoft.com/commandline/2018/08/02/windows-command-line-introducing-the-windows-pseudo-console-conpty/) on Windows 1809+ and the [winpty](https://github.com/rprichard/winpty) library in older version.\n\n## Real-world Uses\n\n`node-pty` powers many different terminal emulators, including:\n\n- [Microsoft Visual Studio Code](https://code.visualstudio.com)\n- [Hyper](https://hyper.is/)\n- [Upterm](https://github.com/railsware/upterm)\n- [Script Runner](https://github.com/ioquatix/script-runner) for Atom.\n- [Theia](https://github.com/theia-ide/theia)\n- [FreeMAN](https://github.com/matthew-matvei/freeman) file manager\n- [atom-xterm](https://atom.io/packages/atom-xterm) - Atom plugin for providing terminals inside your Atom workspace.\n- [Termination](https://atom.io/packages/termination) - Another Atom plugin that provides terminals inside your Atom workspace.\n- [electerm](https://github.com/electerm/electerm) Terminal/ssh/sftp client(linux, mac, win).\n- [Extraterm](http://extraterm.org/)\n- [Wetty](https://github.com/krishnasrinivas/wetty) Browser based Terminal over HTTP and HTTPS\n\nDo you use node-pty in your application as well? Please open a [Pull Request](https://github.com/Tyriar/node-pty/pulls) to include it here. We would love to have it in our list.\n\n## Example Usage\n\n```js\nvar os = require('os');\nvar pty = require('node-pty');\n\nvar shell = os.platform() === 'win32' ? 'powershell.exe' : 'bash';\n\nvar ptyProcess = pty.spawn(shell, [], {\n  name: 'xterm-color',\n  cols: 80,\n  rows: 30,\n  cwd: process.env.HOME,\n  env: process.env\n});\n\nptyProcess.on('data', function(data) {\n  process.stdout.write(data);\n});\n\nptyProcess.write('ls\\r');\nptyProcess.resize(100, 40);\nptyProcess.write('ls\\r');\n```\n\n## Building\n\n```bash\n# Install dependencies and build C++\nnpm install\n# Compile TypeScript -> JavaScript\nnpm run tsc\n```\n\n## Dependencies\n\n### Linux/Ubuntu\n\n```\nsudo apt install -y make python build-essential\n```\n\nThe following are also needed:\n\n- Node.JS 10+\n\n### Windows\n\n`npm install` requires some tools to be present in the system like Python and C++ compiler. Windows users can easily install them by running the following command in PowerShell as administrator. For more information see https://github.com/felixrieseberg/windows-build-tools:\n\n```sh\nnpm install --global --production windows-build-tools\n```\n\nThe following are also needed:\n\n- [Windows SDK](https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk) - only the \"Desktop C++ Apps\" components are needed to be installed\n- Node.JS 10+\n\n## Debugging\n\n[The wiki](https://github.com/Microsoft/node-pty/wiki/Debugging) contains instructions for debugging node-pty.\n\n## Security\n\nAll processes launched from node-pty will launch at the same permission level of the parent process. Take care particularly when using node-pty inside a server that's accessible on the internet. We recommend launching the pty inside a container to protect your host machine.\n\n## Thread Safety\n\nNote that node-pty is not thread safe so running it across multiple worker threads in node.js could cause issues.\n\n## Flow Control\n\nAutomatic flow control can be enabled by either providing `handleFlowControl = true` in the constructor options or setting it later on:\n\n```js\nconst PAUSE = '\\x13';   // XOFF\nconst RESUME = '\\x11';  // XON\n\nconst ptyProcess = pty.spawn(shell, [], {handleFlowControl: true});\n\n// flow control in action\nptyProcess.write(PAUSE);  // pty will block and pause the slave program\n...\nptyProcess.write(RESUME); // pty will enter flow mode and resume the slave program\n\n// temporarily disable/re-enable flow control\nptyProcess.handleFlowControl = false;\n...\nptyProcess.handleFlowControl = true;\n```\n\nBy default `PAUSE` and `RESUME` are XON/XOFF control codes (as shown above). To avoid conflicts in environments that use these control codes for different purposes the messages can be customized as `flowControlPause: string` and `flowControlResume: string` in the constructor options. `PAUSE` and `RESUME` are not passed to the underlying pseudoterminal if flow control is enabled.\n\n## Troubleshooting\n\n### Powershell gives error 8009001d\n\n> Internal Windows PowerShell error.  Loading managed Windows PowerShell failed with error 8009001d.\n\nThis happens when PowerShell is launched with no `SystemRoot` environment variable present.\n\n### ConnectNamedPipe failed: Windows error 232\n\nThis error can occur due to anti-virus software intercepting winpty from creating a pty. To workaround this you can exclude this file from your anti-virus scanning `node-pty\\build\\Release\\winpty-agent.exe`\n\n## pty.js\n\nThis project is forked from [chjj/pty.js](https://github.com/chjj/pty.js) with the primary goals being to provide better support for later Node.JS versions and Windows.\n\n## License\n\nCopyright (c) 2012-2015, Christopher Jeffrey (MIT License).<br>\nCopyright (c) 2016, Daniel Imms (MIT License).<br>\nCopyright (c) 2018, Microsoft Corporation (MIT License).\n","readmeFilename":"README.md","_id":"node-pty@0.9.0-beta14","_npmVersion":"6.4.1","_nodeVersion":"8.16.0","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"integrity":"sha512-Chiqld3iSGbtBDPlGrhAuk10HljQ4g0Jr5o1iCgEM9XWOAPfRZVeeDmR6bvsts6MTeRWVOXgqP8f4VZlaIQ23w==","shasum":"cecca22bbf7eed6b6731d62c5cd03f4b6df64645","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.9.0-beta14.tgz","fileCount":240,"unpackedSize":1078712,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc7aseCRA9TVsSAnZWagAAhR4P+wRSJGb75sU5THhgQhVF\nQNDPHFu92xh8ttQebNtzTcFIxFdsh1czOUy5xyLCGZ4Xmou7GPrnGHSigNN5\nZ09QZllSIjtAZyIIlFN/5ZlR00277TuWD97PXAYYkRqIxUXh8o3+Ua3wyojP\n+DvRt+WjNVXi5fnkmt9x+WtJTqDwjmeZo3a6DEoaST3069VKDz4imAisuvfh\nZQ38GwJ+w8X2wsWMdRpikJisqWi4FdG2w9Y7y9fBIU1P1kY9wdxM4nk+eHSC\nTG5Qa4V5xUTSUUXM7LXSK37d5mSdjQQ8AmPUaUlOTccdE/2JUCQ3za5qO28w\njHHLPznCMOyw2eOZUnAH/lzqdANExcyyFwGZjp6THAVPqTiJD22SBu89XDCA\nJbTeNsOazQaZxezF8wRGGVaFbDE7nheMG3/gWFSOWawlPwxIIMkhp8E7F0tC\ndW97XDV6i24LCT+gUHY0N7bo2TKq757Q23WHHAzIoDbir14JCQcX/rSDHBRv\n97hudMmeTBpLUXLyql3zLP8AbOVM6pejLiG9Muimi0wyj2zFMb1igwxKKngZ\nXjxHZOXgcdeVIA22O18WYJvif4fqTR+ZORcsMljw4hNEdfWtDb7PW4zWA+gf\n3Xa9JHpo3oGvBq5O2WQ9imb8UWYnaZ+DedwTkCPDgpkxWS3VTay+P0G4+qBG\nslSE\r\n=T7fl\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"alros@microsoft.com","name":"alexr00"},{"email":"npmjs@microsoft.com","name":"microsoft"},{"email":"tyriar@tyriar.com","name":"tyriar"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty_0.9.0-beta14_1559079709729_0.5369663703286411"},"_hasShrinkwrap":false},"0.9.0-beta15":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Microsoft Corporation"},"version":"0.9.0-beta15","license":"MIT","main":"./lib/index.js","types":"./typings/node-pty.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","watch":"tsc -w","lint":"tslint 'src/**/*.ts'","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec --exit lib/*.test.js","prepare":"npm run tsc","prepublishOnly":"npm run tsc"},"dependencies":{"nan":"^2.13.2"},"devDependencies":{"@types/mocha":"^5.0.0","@types/node":"^6.0.104","cross-env":"^5.1.4","mocha":"^5.0.5","pollUntil":"^1.0.3","ps-list":"^6.0.0","tslint":"^5.12.1","tslint-consistent-codestyle":"^1.15.0","typescript":"3.4"},"gitHead":"68cc93e0acc56825b1726fc9631ce55658fbfbc4","readme":"# node-pty\n\n[![Build Status](https://dev.azure.com/vscode/node-pty/_apis/build/status/Microsoft.node-pty)](https://dev.azure.com/vscode/node-pty/_build/latest?definitionId=11)\n\n`forkpty(3)` bindings for node.js. This allows you to fork processes with pseudoterminal file descriptors. It returns a terminal object which allows reads and writes.\n\nThis is useful for:\n\n- Writing a terminal emulator (eg. via [xterm.js](https://github.com/sourcelair/xterm.js)).\n- Getting certain programs to *think* you're a terminal, such as when you need a program to send you control sequences.\n\n`node-pty` supports Linux, macOS and Windows. Windows support is possible by utilizing the [Windows conpty API](https://blogs.msdn.microsoft.com/commandline/2018/08/02/windows-command-line-introducing-the-windows-pseudo-console-conpty/) on Windows 1809+ and the [winpty](https://github.com/rprichard/winpty) library in older version.\n\n## Real-world Uses\n\n`node-pty` powers many different terminal emulators, including:\n\n- [Microsoft Visual Studio Code](https://code.visualstudio.com)\n- [Hyper](https://hyper.is/)\n- [Upterm](https://github.com/railsware/upterm)\n- [Script Runner](https://github.com/ioquatix/script-runner) for Atom.\n- [Theia](https://github.com/theia-ide/theia)\n- [FreeMAN](https://github.com/matthew-matvei/freeman) file manager\n- [atom-xterm](https://atom.io/packages/atom-xterm) - Atom plugin for providing terminals inside your Atom workspace.\n- [Termination](https://atom.io/packages/termination) - Another Atom plugin that provides terminals inside your Atom workspace.\n- [electerm](https://github.com/electerm/electerm) Terminal/ssh/sftp client(linux, mac, win).\n- [Extraterm](http://extraterm.org/)\n- [Wetty](https://github.com/krishnasrinivas/wetty) Browser based Terminal over HTTP and HTTPS\n\nDo you use node-pty in your application as well? Please open a [Pull Request](https://github.com/Tyriar/node-pty/pulls) to include it here. We would love to have it in our list.\n\n## Example Usage\n\n```js\nvar os = require('os');\nvar pty = require('node-pty');\n\nvar shell = os.platform() === 'win32' ? 'powershell.exe' : 'bash';\n\nvar ptyProcess = pty.spawn(shell, [], {\n  name: 'xterm-color',\n  cols: 80,\n  rows: 30,\n  cwd: process.env.HOME,\n  env: process.env\n});\n\nptyProcess.on('data', function(data) {\n  process.stdout.write(data);\n});\n\nptyProcess.write('ls\\r');\nptyProcess.resize(100, 40);\nptyProcess.write('ls\\r');\n```\n\n## Building\n\n```bash\n# Install dependencies and build C++\nnpm install\n# Compile TypeScript -> JavaScript\nnpm run tsc\n```\n\n## Dependencies\n\n### Linux/Ubuntu\n\n```\nsudo apt install -y make python build-essential\n```\n\nThe following are also needed:\n\n- Node.JS 10+\n\n### Windows\n\n`npm install` requires some tools to be present in the system like Python and C++ compiler. Windows users can easily install them by running the following command in PowerShell as administrator. For more information see https://github.com/felixrieseberg/windows-build-tools:\n\n```sh\nnpm install --global --production windows-build-tools\n```\n\nThe following are also needed:\n\n- [Windows SDK](https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk) - only the \"Desktop C++ Apps\" components are needed to be installed\n- Node.JS 10+\n\n## Debugging\n\n[The wiki](https://github.com/Microsoft/node-pty/wiki/Debugging) contains instructions for debugging node-pty.\n\n## Security\n\nAll processes launched from node-pty will launch at the same permission level of the parent process. Take care particularly when using node-pty inside a server that's accessible on the internet. We recommend launching the pty inside a container to protect your host machine.\n\n## Thread Safety\n\nNote that node-pty is not thread safe so running it across multiple worker threads in node.js could cause issues.\n\n## Flow Control\n\nAutomatic flow control can be enabled by either providing `handleFlowControl = true` in the constructor options or setting it later on:\n\n```js\nconst PAUSE = '\\x13';   // XOFF\nconst RESUME = '\\x11';  // XON\n\nconst ptyProcess = pty.spawn(shell, [], {handleFlowControl: true});\n\n// flow control in action\nptyProcess.write(PAUSE);  // pty will block and pause the slave program\n...\nptyProcess.write(RESUME); // pty will enter flow mode and resume the slave program\n\n// temporarily disable/re-enable flow control\nptyProcess.handleFlowControl = false;\n...\nptyProcess.handleFlowControl = true;\n```\n\nBy default `PAUSE` and `RESUME` are XON/XOFF control codes (as shown above). To avoid conflicts in environments that use these control codes for different purposes the messages can be customized as `flowControlPause: string` and `flowControlResume: string` in the constructor options. `PAUSE` and `RESUME` are not passed to the underlying pseudoterminal if flow control is enabled.\n\n## Troubleshooting\n\n### Powershell gives error 8009001d\n\n> Internal Windows PowerShell error.  Loading managed Windows PowerShell failed with error 8009001d.\n\nThis happens when PowerShell is launched with no `SystemRoot` environment variable present.\n\n### ConnectNamedPipe failed: Windows error 232\n\nThis error can occur due to anti-virus software intercepting winpty from creating a pty. To workaround this you can exclude this file from your anti-virus scanning `node-pty\\build\\Release\\winpty-agent.exe`\n\n## pty.js\n\nThis project is forked from [chjj/pty.js](https://github.com/chjj/pty.js) with the primary goals being to provide better support for later Node.JS versions and Windows.\n\n## License\n\nCopyright (c) 2012-2015, Christopher Jeffrey (MIT License).<br>\nCopyright (c) 2016, Daniel Imms (MIT License).<br>\nCopyright (c) 2018, Microsoft Corporation (MIT License).\n","readmeFilename":"README.md","_id":"node-pty@0.9.0-beta15","_npmVersion":"6.4.1","_nodeVersion":"8.16.0","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"integrity":"sha512-OjCEUZ2uyGBD5qo4h4oPUmn2ZL30/CZ1nCGih3X1hKjlUo618nqhxwH5a2BiazPapSyH5L0zr1ZW9FgBgGAjWA==","shasum":"ffcaa998fc6bde984eac868e03728c9778bbfeed","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.9.0-beta15.tgz","fileCount":240,"unpackedSize":1078742,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc8FLPCRA9TVsSAnZWagAANZcP+wcQmjGkO6yBg1JGiYnq\nsOR9h7vCo2RAhtuq/V97v0GP45C4bxHQaHj2Nika4oR96tgoIm5X/H2VmX4f\n72Vfn89sFgdTmowlGqwx5/EKLSUxtMbC+/KxwWRfcXY/UN9gKiC40iMsLREw\neVkWS9prhtMi9SevPDlPIbL9DL7LBpY1d5AQg/+iLUT6KnQ5AR4gTA0drDXB\n7BxMY53jnQ8PRofYt56LHvFmoSFayde/S7IMCCynFz0Q13ryV36z1DgDFmjv\nP1uV7bwqXfHey4L42h/YJm6wFuP6gdv6SyPdfQfdatCW6tl2FynRkkS6PGc0\nJeHLgBAKUX8mMMhcAAk2ofcC35c8mEoZuQZ/3dx9g9EMeri2U1lqmyCP7ezj\nJOU2JfDafSydRVYNB/Gk6QN0zqMVTCOPa2fadw3Sl50U09S5bw8ePyRDBSqj\n7n76hfWB/eCPjoEWWVTomaJGurNceYhsl5I0sTH11YSMjpogZwwDwLQUWw0O\nBlIJF0ChYXKyUSBlxgGyrgE3eeO3T5OER1g4r6QjHpdvSIII63HZTUbHZgir\noMB4YEKFbFOh5VSn18u5Hl+lCD8JO9yKXWdkCIyTDrltaps6fQQkPbS25g+g\nXXo4lclwCnAIcNnfZ/PsWA8JKMZ9DBhMEkyoJVpgz3IlZeXob+VChFuKnrVm\nK6V4\r\n=0oAa\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"alros@microsoft.com","name":"alexr00"},{"email":"npmjs@microsoft.com","name":"microsoft"},{"email":"tyriar@tyriar.com","name":"tyriar"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty_0.9.0-beta15_1559253710307_0.1570303540410416"},"_hasShrinkwrap":false},"0.9.0-beta16":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Microsoft Corporation"},"version":"0.9.0-beta16","license":"MIT","main":"./lib/index.js","types":"./typings/node-pty.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","watch":"tsc -w","lint":"tslint 'src/**/*.ts'","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec --exit lib/*.test.js","prepare":"npm run tsc","prepublishOnly":"npm run tsc"},"dependencies":{"nan":"^2.13.2"},"devDependencies":{"@types/mocha":"^5.0.0","@types/node":"^6.0.104","cross-env":"^5.1.4","mocha":"^5.0.5","pollUntil":"^1.0.3","ps-list":"^6.0.0","tslint":"^5.12.1","tslint-consistent-codestyle":"^1.15.0","typescript":"3.4"},"gitHead":"ff82be6f7e7b06e1f509d37c94b1a4813ceea7ad","readme":"# node-pty\n\n[![Build Status](https://dev.azure.com/vscode/node-pty/_apis/build/status/Microsoft.node-pty)](https://dev.azure.com/vscode/node-pty/_build/latest?definitionId=11)\n\n`forkpty(3)` bindings for node.js. This allows you to fork processes with pseudoterminal file descriptors. It returns a terminal object which allows reads and writes.\n\nThis is useful for:\n\n- Writing a terminal emulator (eg. via [xterm.js](https://github.com/sourcelair/xterm.js)).\n- Getting certain programs to *think* you're a terminal, such as when you need a program to send you control sequences.\n\n`node-pty` supports Linux, macOS and Windows. Windows support is possible by utilizing the [Windows conpty API](https://blogs.msdn.microsoft.com/commandline/2018/08/02/windows-command-line-introducing-the-windows-pseudo-console-conpty/) on Windows 1809+ and the [winpty](https://github.com/rprichard/winpty) library in older version.\n\n## Real-world Uses\n\n`node-pty` powers many different terminal emulators, including:\n\n- [Microsoft Visual Studio Code](https://code.visualstudio.com)\n- [Hyper](https://hyper.is/)\n- [Upterm](https://github.com/railsware/upterm)\n- [Script Runner](https://github.com/ioquatix/script-runner) for Atom.\n- [Theia](https://github.com/theia-ide/theia)\n- [FreeMAN](https://github.com/matthew-matvei/freeman) file manager\n- [atom-xterm](https://atom.io/packages/atom-xterm) - Atom plugin for providing terminals inside your Atom workspace.\n- [Termination](https://atom.io/packages/termination) - Another Atom plugin that provides terminals inside your Atom workspace.\n- [electerm](https://github.com/electerm/electerm) Terminal/ssh/sftp client(linux, mac, win).\n- [Extraterm](http://extraterm.org/)\n- [Wetty](https://github.com/krishnasrinivas/wetty) Browser based Terminal over HTTP and HTTPS\n\nDo you use node-pty in your application as well? Please open a [Pull Request](https://github.com/Tyriar/node-pty/pulls) to include it here. We would love to have it in our list.\n\n## Example Usage\n\n```js\nvar os = require('os');\nvar pty = require('node-pty');\n\nvar shell = os.platform() === 'win32' ? 'powershell.exe' : 'bash';\n\nvar ptyProcess = pty.spawn(shell, [], {\n  name: 'xterm-color',\n  cols: 80,\n  rows: 30,\n  cwd: process.env.HOME,\n  env: process.env\n});\n\nptyProcess.on('data', function(data) {\n  process.stdout.write(data);\n});\n\nptyProcess.write('ls\\r');\nptyProcess.resize(100, 40);\nptyProcess.write('ls\\r');\n```\n\n## Building\n\n```bash\n# Install dependencies and build C++\nnpm install\n# Compile TypeScript -> JavaScript\nnpm run tsc\n```\n\n## Dependencies\n\n### Linux/Ubuntu\n\n```\nsudo apt install -y make python build-essential\n```\n\nThe following are also needed:\n\n- Node.JS 10+\n\n### Windows\n\n`npm install` requires some tools to be present in the system like Python and C++ compiler. Windows users can easily install them by running the following command in PowerShell as administrator. For more information see https://github.com/felixrieseberg/windows-build-tools:\n\n```sh\nnpm install --global --production windows-build-tools\n```\n\nThe following are also needed:\n\n- [Windows SDK](https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk) - only the \"Desktop C++ Apps\" components are needed to be installed\n- Node.JS 10+\n\n## Debugging\n\n[The wiki](https://github.com/Microsoft/node-pty/wiki/Debugging) contains instructions for debugging node-pty.\n\n## Security\n\nAll processes launched from node-pty will launch at the same permission level of the parent process. Take care particularly when using node-pty inside a server that's accessible on the internet. We recommend launching the pty inside a container to protect your host machine.\n\n## Thread Safety\n\nNote that node-pty is not thread safe so running it across multiple worker threads in node.js could cause issues.\n\n## Flow Control\n\nAutomatic flow control can be enabled by either providing `handleFlowControl = true` in the constructor options or setting it later on:\n\n```js\nconst PAUSE = '\\x13';   // XOFF\nconst RESUME = '\\x11';  // XON\n\nconst ptyProcess = pty.spawn(shell, [], {handleFlowControl: true});\n\n// flow control in action\nptyProcess.write(PAUSE);  // pty will block and pause the slave program\n...\nptyProcess.write(RESUME); // pty will enter flow mode and resume the slave program\n\n// temporarily disable/re-enable flow control\nptyProcess.handleFlowControl = false;\n...\nptyProcess.handleFlowControl = true;\n```\n\nBy default `PAUSE` and `RESUME` are XON/XOFF control codes (as shown above). To avoid conflicts in environments that use these control codes for different purposes the messages can be customized as `flowControlPause: string` and `flowControlResume: string` in the constructor options. `PAUSE` and `RESUME` are not passed to the underlying pseudoterminal if flow control is enabled.\n\n## Troubleshooting\n\n### Powershell gives error 8009001d\n\n> Internal Windows PowerShell error.  Loading managed Windows PowerShell failed with error 8009001d.\n\nThis happens when PowerShell is launched with no `SystemRoot` environment variable present.\n\n### ConnectNamedPipe failed: Windows error 232\n\nThis error can occur due to anti-virus software intercepting winpty from creating a pty. To workaround this you can exclude this file from your anti-virus scanning `node-pty\\build\\Release\\winpty-agent.exe`\n\n## pty.js\n\nThis project is forked from [chjj/pty.js](https://github.com/chjj/pty.js) with the primary goals being to provide better support for later Node.JS versions and Windows.\n\n## License\n\nCopyright (c) 2012-2015, Christopher Jeffrey (MIT License).<br>\nCopyright (c) 2016, Daniel Imms (MIT License).<br>\nCopyright (c) 2018, Microsoft Corporation (MIT License).\n","readmeFilename":"README.md","_id":"node-pty@0.9.0-beta16","_npmVersion":"6.4.1","_nodeVersion":"8.16.0","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"integrity":"sha512-5onsCFXGTPcOZFAKh+E+aYalMomMAGqCnz/ibxCEL3xP73VAHRD6L+EadxRXFGbAG9o/EQzT0Wso+xLqhxXtgQ==","shasum":"f11521e73bb4a26df23c40a05f4ca1be93340864","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.9.0-beta16.tgz","fileCount":240,"unpackedSize":1078742,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc8G3OCRA9TVsSAnZWagAA3OwQAKPCyjn9BGOluFxrFH07\nZ9lPNh4Pcdg+u5n0hi1o7K3T1T9b9Ai95OZeTX31lRf+sIuuUdGd8YcamJX+\nq9b1hlb9wA8f2E5w5+1oP4FRGm7nD9MY4TLn/6L9frLvlXwlbYNcT10kiQks\nV4vmlKHfWh9PPynLXkCxH/2cVOrvLTQlKnf5efj1d8Yu2i+amBcY0O/miwne\nRWGnLDkCMMUvu8R6x3MaLnPTcRR5SQkZQI1uMNqSS37GyFmpGt+tamwsmjpa\nf/XDcKUY96rtx3CEHtqZfaJAMtJCZYPPN8IRUHvwCrsf/gILRogsqqtujKPg\n/5Fz2C8+Ex2xIZ8V1oMJR6OjLqqV5G/lxaiICOODa4xTicPpUl3iHLE1oPWo\nFLnTDP5Ve8qikmBVyVvOoZR9qsk254ozAHSuwq5SwNkuAVm06OEgX3qD0R7I\nBRZ8QT1IisTGGxVdr77r/NYwnMpREyuE0OJBT/77xQDRL+Q7BZS8WrbUk53q\nM1DVD0iDLn0jkuAl3+wS2/YBSsvv90L+yX1l3u5k4/JvyzDxZvZDUB2qn0CT\nHAecpLb/qEAxhUJ0R40mcjP9k2sRfcIQm4VBCwH1dJati+nTPVoqgKZpVb9k\nwFrczZuHQEnqP7cfB++XZUW2w6jVAqbh18oY65RqjhMdkLwYDJAhTYdEnFSj\ndRYi\r\n=7/tm\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"alros@microsoft.com","name":"alexr00"},{"email":"npmjs@microsoft.com","name":"microsoft"},{"email":"tyriar@tyriar.com","name":"tyriar"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty_0.9.0-beta16_1559260621498_0.9698199942508752"},"_hasShrinkwrap":false},"0.9.0-beta17":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Microsoft Corporation"},"version":"0.9.0-beta17","license":"MIT","main":"./lib/index.js","types":"./typings/node-pty.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","watch":"tsc -w","lint":"tslint 'src/**/*.ts'","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec --exit lib/*.test.js","prepare":"npm run tsc","prepublishOnly":"npm run tsc"},"dependencies":{"nan":"^2.13.2"},"devDependencies":{"@types/mocha":"^5.0.0","@types/node":"8","cross-env":"^5.1.4","mocha":"^5.0.5","pollUntil":"^1.0.3","ps-list":"^6.0.0","tslint":"^5.12.1","tslint-consistent-codestyle":"^1.15.0","typescript":"3.4"},"gitHead":"3c62cfbdeb485f207e9ed6518d9474c0f4699317","readme":"# node-pty\n\n[![Build Status](https://dev.azure.com/vscode/node-pty/_apis/build/status/Microsoft.node-pty)](https://dev.azure.com/vscode/node-pty/_build/latest?definitionId=11)\n\n`forkpty(3)` bindings for node.js. This allows you to fork processes with pseudoterminal file descriptors. It returns a terminal object which allows reads and writes.\n\nThis is useful for:\n\n- Writing a terminal emulator (eg. via [xterm.js](https://github.com/sourcelair/xterm.js)).\n- Getting certain programs to *think* you're a terminal, such as when you need a program to send you control sequences.\n\n`node-pty` supports Linux, macOS and Windows. Windows support is possible by utilizing the [Windows conpty API](https://blogs.msdn.microsoft.com/commandline/2018/08/02/windows-command-line-introducing-the-windows-pseudo-console-conpty/) on Windows 1809+ and the [winpty](https://github.com/rprichard/winpty) library in older version.\n\n## Real-world Uses\n\n`node-pty` powers many different terminal emulators, including:\n\n- [Microsoft Visual Studio Code](https://code.visualstudio.com)\n- [Hyper](https://hyper.is/)\n- [Upterm](https://github.com/railsware/upterm)\n- [Script Runner](https://github.com/ioquatix/script-runner) for Atom.\n- [Theia](https://github.com/theia-ide/theia)\n- [FreeMAN](https://github.com/matthew-matvei/freeman) file manager\n- [atom-xterm](https://atom.io/packages/atom-xterm) - Atom plugin for providing terminals inside your Atom workspace.\n- [Termination](https://atom.io/packages/termination) - Another Atom plugin that provides terminals inside your Atom workspace.\n- [electerm](https://github.com/electerm/electerm) Terminal/ssh/sftp client(linux, mac, win).\n- [Extraterm](http://extraterm.org/)\n- [Wetty](https://github.com/krishnasrinivas/wetty) Browser based Terminal over HTTP and HTTPS\n\nDo you use node-pty in your application as well? Please open a [Pull Request](https://github.com/Tyriar/node-pty/pulls) to include it here. We would love to have it in our list.\n\n## Example Usage\n\n```js\nvar os = require('os');\nvar pty = require('node-pty');\n\nvar shell = os.platform() === 'win32' ? 'powershell.exe' : 'bash';\n\nvar ptyProcess = pty.spawn(shell, [], {\n  name: 'xterm-color',\n  cols: 80,\n  rows: 30,\n  cwd: process.env.HOME,\n  env: process.env\n});\n\nptyProcess.on('data', function(data) {\n  process.stdout.write(data);\n});\n\nptyProcess.write('ls\\r');\nptyProcess.resize(100, 40);\nptyProcess.write('ls\\r');\n```\n\n## Building\n\n```bash\n# Install dependencies and build C++\nnpm install\n# Compile TypeScript -> JavaScript\nnpm run tsc\n```\n\n## Dependencies\n\n### Linux/Ubuntu\n\n```\nsudo apt install -y make python build-essential\n```\n\nThe following are also needed:\n\n- Node.JS 10+\n\n### Windows\n\n`npm install` requires some tools to be present in the system like Python and C++ compiler. Windows users can easily install them by running the following command in PowerShell as administrator. For more information see https://github.com/felixrieseberg/windows-build-tools:\n\n```sh\nnpm install --global --production windows-build-tools\n```\n\nThe following are also needed:\n\n- [Windows SDK](https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk) - only the \"Desktop C++ Apps\" components are needed to be installed\n- Node.JS 10+\n\n## Debugging\n\n[The wiki](https://github.com/Microsoft/node-pty/wiki/Debugging) contains instructions for debugging node-pty.\n\n## Security\n\nAll processes launched from node-pty will launch at the same permission level of the parent process. Take care particularly when using node-pty inside a server that's accessible on the internet. We recommend launching the pty inside a container to protect your host machine.\n\n## Thread Safety\n\nNote that node-pty is not thread safe so running it across multiple worker threads in node.js could cause issues.\n\n## Flow Control\n\nAutomatic flow control can be enabled by either providing `handleFlowControl = true` in the constructor options or setting it later on:\n\n```js\nconst PAUSE = '\\x13';   // XOFF\nconst RESUME = '\\x11';  // XON\n\nconst ptyProcess = pty.spawn(shell, [], {handleFlowControl: true});\n\n// flow control in action\nptyProcess.write(PAUSE);  // pty will block and pause the slave program\n...\nptyProcess.write(RESUME); // pty will enter flow mode and resume the slave program\n\n// temporarily disable/re-enable flow control\nptyProcess.handleFlowControl = false;\n...\nptyProcess.handleFlowControl = true;\n```\n\nBy default `PAUSE` and `RESUME` are XON/XOFF control codes (as shown above). To avoid conflicts in environments that use these control codes for different purposes the messages can be customized as `flowControlPause: string` and `flowControlResume: string` in the constructor options. `PAUSE` and `RESUME` are not passed to the underlying pseudoterminal if flow control is enabled.\n\n## Troubleshooting\n\n### Powershell gives error 8009001d\n\n> Internal Windows PowerShell error.  Loading managed Windows PowerShell failed with error 8009001d.\n\nThis happens when PowerShell is launched with no `SystemRoot` environment variable present.\n\n### ConnectNamedPipe failed: Windows error 232\n\nThis error can occur due to anti-virus software intercepting winpty from creating a pty. To workaround this you can exclude this file from your anti-virus scanning `node-pty\\build\\Release\\winpty-agent.exe`\n\n## pty.js\n\nThis project is forked from [chjj/pty.js](https://github.com/chjj/pty.js) with the primary goals being to provide better support for later Node.JS versions and Windows.\n\n## License\n\nCopyright (c) 2012-2015, Christopher Jeffrey (MIT License).<br>\nCopyright (c) 2016, Daniel Imms (MIT License).<br>\nCopyright (c) 2018, Microsoft Corporation (MIT License).\n","readmeFilename":"README.md","_id":"node-pty@0.9.0-beta17","_npmVersion":"6.4.1","_nodeVersion":"8.16.0","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"integrity":"sha512-E94XwIs3JxLKAboquHY9Kytbbj/T/tJtRpQoAUdfPE7UXRta/NV+xdmRNhZkeU9jCji+plm656GbYFievgNPkQ==","shasum":"9b490df86a8124dea595e9fbedeaaf4b2eedbbcb","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.9.0-beta17.tgz","fileCount":240,"unpackedSize":1078735,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc9uRlCRA9TVsSAnZWagAA7KIP/A1Ycb6b2DXovylfIPHF\nSJwHfWG5zSsUqvIhfgAFKTOO0vtvSCdORXUn/P2WFT3hePDLHEWRRb5jOSjL\nU8wibZmgb9zYS2ouC3ETAp9W2b/CWFR1vracmKM0OHMqOYZyAPcuhrPHoj/U\njuNSy0Ycw2ZOaihbtwoZFocfP4g9UMg/GmLugj5faX47ULHyp4yYfPLyKIAp\nDAsHeftyauOdkU10YgT+hUn9PqXLUQ14EGtSP4VRu8fhcTsStZkSWKHVPmw8\nVOcy3rIA4S5DX5gEThYQMltSrAGEoqEeXW0rRLGWBYsxXR3ZuAGUfnXoBqYo\nHmm8CbVpWQAql10sDYT67hfWgF8M/ETDJuYV9ku0L5rcdZ1ornLQKtCZrbJv\nKrWV4+zF5gGkmQYvsxqy77lzbAzACoqVA7Jc88qwBimrDUoNLGB9MNgS3vzc\nqcL/qKyULNHT5TPLeoGLLS3kgkFsoLwVLnDJ+d7FYuO9fYpfAgh4nkOutBpc\ncGZYwzUTxCDXqjPBeiB24HQCfcqmXuZNy8BWCxly7reEEFz9UEcJ4L0k/OL3\neZFE/jA3VC64ja7yG0SPiaIEq9P/zuq1VP3TCMWWFRlu8QYdPLMaZs+PVuMa\n+WOPjMF8yNJaRZZaJMaQNSpGWlHFFarwJ9PyY4otCKK+CJ2iP2vqvwYpqQew\nY++1\r\n=cgJK\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"alros@microsoft.com","name":"alexr00"},{"email":"npmjs@microsoft.com","name":"microsoft"},{"email":"tyriar@tyriar.com","name":"tyriar"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty_0.9.0-beta17_1559684196927_0.18183226407170738"},"_hasShrinkwrap":false},"0.9.0-beta18":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Microsoft Corporation"},"version":"0.9.0-beta18","license":"MIT","main":"./lib/index.js","types":"./typings/node-pty.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","watch":"tsc -w","lint":"tslint 'src/**/*.ts'","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec --exit lib/*.test.js","prepare":"npm run tsc","prepublishOnly":"npm run tsc"},"dependencies":{"nan":"^2.13.2"},"devDependencies":{"@types/mocha":"^5.0.0","@types/node":"8","cross-env":"^5.1.4","mocha":"^5.0.5","pollUntil":"^1.0.3","ps-list":"^6.0.0","tslint":"^5.12.1","tslint-consistent-codestyle":"^1.15.0","typescript":"3.4"},"gitHead":"04445ed76f90b4f56a190982ea2d4fcdd22a0ee7","readme":"# node-pty\n\n[![Build Status](https://dev.azure.com/vscode/node-pty/_apis/build/status/Microsoft.node-pty)](https://dev.azure.com/vscode/node-pty/_build/latest?definitionId=11)\n\n`forkpty(3)` bindings for node.js. This allows you to fork processes with pseudoterminal file descriptors. It returns a terminal object which allows reads and writes.\n\nThis is useful for:\n\n- Writing a terminal emulator (eg. via [xterm.js](https://github.com/sourcelair/xterm.js)).\n- Getting certain programs to *think* you're a terminal, such as when you need a program to send you control sequences.\n\n`node-pty` supports Linux, macOS and Windows. Windows support is possible by utilizing the [Windows conpty API](https://blogs.msdn.microsoft.com/commandline/2018/08/02/windows-command-line-introducing-the-windows-pseudo-console-conpty/) on Windows 1809+ and the [winpty](https://github.com/rprichard/winpty) library in older version.\n\n## Real-world Uses\n\n`node-pty` powers many different terminal emulators, including:\n\n- [Microsoft Visual Studio Code](https://code.visualstudio.com)\n- [Hyper](https://hyper.is/)\n- [Upterm](https://github.com/railsware/upterm)\n- [Script Runner](https://github.com/ioquatix/script-runner) for Atom.\n- [Theia](https://github.com/theia-ide/theia)\n- [FreeMAN](https://github.com/matthew-matvei/freeman) file manager\n- [atom-xterm](https://atom.io/packages/atom-xterm) - Atom plugin for providing terminals inside your Atom workspace.\n- [Termination](https://atom.io/packages/termination) - Another Atom plugin that provides terminals inside your Atom workspace.\n- [electerm](https://github.com/electerm/electerm) Terminal/ssh/sftp client(linux, mac, win).\n- [Extraterm](http://extraterm.org/)\n- [Wetty](https://github.com/krishnasrinivas/wetty) Browser based Terminal over HTTP and HTTPS\n\nDo you use node-pty in your application as well? Please open a [Pull Request](https://github.com/Tyriar/node-pty/pulls) to include it here. We would love to have it in our list.\n\n## Example Usage\n\n```js\nvar os = require('os');\nvar pty = require('node-pty');\n\nvar shell = os.platform() === 'win32' ? 'powershell.exe' : 'bash';\n\nvar ptyProcess = pty.spawn(shell, [], {\n  name: 'xterm-color',\n  cols: 80,\n  rows: 30,\n  cwd: process.env.HOME,\n  env: process.env\n});\n\nptyProcess.on('data', function(data) {\n  process.stdout.write(data);\n});\n\nptyProcess.write('ls\\r');\nptyProcess.resize(100, 40);\nptyProcess.write('ls\\r');\n```\n\n## Building\n\n```bash\n# Install dependencies and build C++\nnpm install\n# Compile TypeScript -> JavaScript\nnpm run tsc\n```\n\n## Dependencies\n\n### Linux/Ubuntu\n\n```\nsudo apt install -y make python build-essential\n```\n\nThe following are also needed:\n\n- Node.JS 10+\n\n### Windows\n\n`npm install` requires some tools to be present in the system like Python and C++ compiler. Windows users can easily install them by running the following command in PowerShell as administrator. For more information see https://github.com/felixrieseberg/windows-build-tools:\n\n```sh\nnpm install --global --production windows-build-tools\n```\n\nThe following are also needed:\n\n- [Windows SDK](https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk) - only the \"Desktop C++ Apps\" components are needed to be installed\n- Node.JS 10+\n\n## Debugging\n\n[The wiki](https://github.com/Microsoft/node-pty/wiki/Debugging) contains instructions for debugging node-pty.\n\n## Security\n\nAll processes launched from node-pty will launch at the same permission level of the parent process. Take care particularly when using node-pty inside a server that's accessible on the internet. We recommend launching the pty inside a container to protect your host machine.\n\n## Thread Safety\n\nNote that node-pty is not thread safe so running it across multiple worker threads in node.js could cause issues.\n\n## Flow Control\n\nAutomatic flow control can be enabled by either providing `handleFlowControl = true` in the constructor options or setting it later on:\n\n```js\nconst PAUSE = '\\x13';   // XOFF\nconst RESUME = '\\x11';  // XON\n\nconst ptyProcess = pty.spawn(shell, [], {handleFlowControl: true});\n\n// flow control in action\nptyProcess.write(PAUSE);  // pty will block and pause the slave program\n...\nptyProcess.write(RESUME); // pty will enter flow mode and resume the slave program\n\n// temporarily disable/re-enable flow control\nptyProcess.handleFlowControl = false;\n...\nptyProcess.handleFlowControl = true;\n```\n\nBy default `PAUSE` and `RESUME` are XON/XOFF control codes (as shown above). To avoid conflicts in environments that use these control codes for different purposes the messages can be customized as `flowControlPause: string` and `flowControlResume: string` in the constructor options. `PAUSE` and `RESUME` are not passed to the underlying pseudoterminal if flow control is enabled.\n\n## Troubleshooting\n\n### Powershell gives error 8009001d\n\n> Internal Windows PowerShell error.  Loading managed Windows PowerShell failed with error 8009001d.\n\nThis happens when PowerShell is launched with no `SystemRoot` environment variable present.\n\n### ConnectNamedPipe failed: Windows error 232\n\nThis error can occur due to anti-virus software intercepting winpty from creating a pty. To workaround this you can exclude this file from your anti-virus scanning `node-pty\\build\\Release\\winpty-agent.exe`\n\n## pty.js\n\nThis project is forked from [chjj/pty.js](https://github.com/chjj/pty.js) with the primary goals being to provide better support for later Node.JS versions and Windows.\n\n## License\n\nCopyright (c) 2012-2015, Christopher Jeffrey (MIT License).<br>\nCopyright (c) 2016, Daniel Imms (MIT License).<br>\nCopyright (c) 2018, Microsoft Corporation (MIT License).\n","readmeFilename":"README.md","_id":"node-pty@0.9.0-beta18","_npmVersion":"6.4.1","_nodeVersion":"8.16.0","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"integrity":"sha512-j4E8RYda9cqm+2cGxaAxDlpEmPpuS0dfCuZII8VPRTw6p5gRJRwPJo9oL//YKdtaasRFfRy0/mUaNj8ft3FQVg==","shasum":"d81c1ed96ee2727043abd5ac6666250149c1b606","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.9.0-beta18.tgz","fileCount":240,"unpackedSize":1078356,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc+d+FCRA9TVsSAnZWagAAn1IP/R3n5XKFXn8iBn6xeCbZ\nN23Rm2Vh8le6f8RuXm2tRWGQIqVg0PWP/6+e14LPr9YbMEz6PcmnPRlIRt4i\nuTmYsrJMAvwh7dVVdjw6wXPD+xcJsWkMICwOKd2WYK2g+pmGq1Thdoj/rHCb\nnKEdch6lmPmHTeH9fQmGkve1zZxvyHT8zR5H0QSvoLUtwiHCuZQVJgLxV/tV\nApDq+CCGV5TjxBuyCV7FdbGtxKJKjC2nOkTo2F/d27bbbyWHblLoXT2e6zQQ\n5kV43BbMj8FzylpCeHThGrjgAjIyoyI7Oet+P7Yt0RBoCs6mv51qHl+q79TK\nfAB3vU/jGpmtDtn9DX57R49urEhAx7ZVPJBloq76VDkoM2cfizPBoDScGrL+\nrOroHG5+3jDW8Gm+v2W27MwG/SbE00DME73W6jrAIjQyySKY9tovR8Zg/zKE\nTPwp0XTx8+yHr/wKaKG9h5VIs9Zt7kS1USML4GtMyzwNy9hupyZ3e7tzzbqy\ny1A/+bw8nAhp+gA43w76jCdlo5f/ySf0zJPHsvUJ2L9skCLmR0kgjEzPEMM1\n5LiydXqtBUJfgHDUYR2tT/gx7LvdLcOHbLe4daLhC4jHEW3Y3ZaocIr4HBsD\nccURy0YX0iQXm4ivYVSGUwFYQG6h29AUMFlp/YYfKCrAMChDHzMW2JLB+0vq\nghdF\r\n=2Xme\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"alros@microsoft.com","name":"alexr00"},{"email":"npmjs@microsoft.com","name":"microsoft"},{"email":"tyriar@tyriar.com","name":"tyriar"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty_0.9.0-beta18_1559879556603_0.6083686135430808"},"_hasShrinkwrap":false},"0.9.0-beta19":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Microsoft Corporation"},"version":"0.9.0-beta19","license":"MIT","main":"./lib/index.js","types":"./typings/node-pty.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","watch":"tsc -w","lint":"tslint 'src/**/*.ts'","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec --exit lib/*.test.js","prepare":"npm run tsc","prepublishOnly":"npm run tsc"},"dependencies":{"nan":"^2.13.2"},"devDependencies":{"@types/mocha":"^5.0.0","@types/node":"8","cross-env":"^5.1.4","mocha":"^5.0.5","pollUntil":"^1.0.3","ps-list":"^6.0.0","tslint":"^5.12.1","tslint-consistent-codestyle":"^1.15.0","typescript":"3.4"},"gitHead":"32ea3e47791794a82c58c76bf83dc4d441a93108","readme":"# node-pty\n\n[![Build Status](https://dev.azure.com/vscode/node-pty/_apis/build/status/Microsoft.node-pty)](https://dev.azure.com/vscode/node-pty/_build/latest?definitionId=11)\n\n`forkpty(3)` bindings for node.js. This allows you to fork processes with pseudoterminal file descriptors. It returns a terminal object which allows reads and writes.\n\nThis is useful for:\n\n- Writing a terminal emulator (eg. via [xterm.js](https://github.com/sourcelair/xterm.js)).\n- Getting certain programs to *think* you're a terminal, such as when you need a program to send you control sequences.\n\n`node-pty` supports Linux, macOS and Windows. Windows support is possible by utilizing the [Windows conpty API](https://blogs.msdn.microsoft.com/commandline/2018/08/02/windows-command-line-introducing-the-windows-pseudo-console-conpty/) on Windows 1809+ and the [winpty](https://github.com/rprichard/winpty) library in older version.\n\n## Real-world Uses\n\n`node-pty` powers many different terminal emulators, including:\n\n- [Microsoft Visual Studio Code](https://code.visualstudio.com)\n- [Hyper](https://hyper.is/)\n- [Upterm](https://github.com/railsware/upterm)\n- [Script Runner](https://github.com/ioquatix/script-runner) for Atom.\n- [Theia](https://github.com/theia-ide/theia)\n- [FreeMAN](https://github.com/matthew-matvei/freeman) file manager\n- [atom-xterm](https://atom.io/packages/atom-xterm) - Atom plugin for providing terminals inside your Atom workspace.\n- [Termination](https://atom.io/packages/termination) - Another Atom plugin that provides terminals inside your Atom workspace.\n- [electerm](https://github.com/electerm/electerm) Terminal/ssh/sftp client(linux, mac, win).\n- [Extraterm](http://extraterm.org/)\n- [Wetty](https://github.com/krishnasrinivas/wetty) Browser based Terminal over HTTP and HTTPS\n\nDo you use node-pty in your application as well? Please open a [Pull Request](https://github.com/Tyriar/node-pty/pulls) to include it here. We would love to have it in our list.\n\n## Example Usage\n\n```js\nvar os = require('os');\nvar pty = require('node-pty');\n\nvar shell = os.platform() === 'win32' ? 'powershell.exe' : 'bash';\n\nvar ptyProcess = pty.spawn(shell, [], {\n  name: 'xterm-color',\n  cols: 80,\n  rows: 30,\n  cwd: process.env.HOME,\n  env: process.env\n});\n\nptyProcess.on('data', function(data) {\n  process.stdout.write(data);\n});\n\nptyProcess.write('ls\\r');\nptyProcess.resize(100, 40);\nptyProcess.write('ls\\r');\n```\n\n## Building\n\n```bash\n# Install dependencies and build C++\nnpm install\n# Compile TypeScript -> JavaScript\nnpm run tsc\n```\n\n## Dependencies\n\n### Linux/Ubuntu\n\n```\nsudo apt install -y make python build-essential\n```\n\nThe following are also needed:\n\n- Node.JS 10+\n\n### Windows\n\n`npm install` requires some tools to be present in the system like Python and C++ compiler. Windows users can easily install them by running the following command in PowerShell as administrator. For more information see https://github.com/felixrieseberg/windows-build-tools:\n\n```sh\nnpm install --global --production windows-build-tools\n```\n\nThe following are also needed:\n\n- [Windows SDK](https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk) - only the \"Desktop C++ Apps\" components are needed to be installed\n- Node.JS 10+\n\n## Debugging\n\n[The wiki](https://github.com/Microsoft/node-pty/wiki/Debugging) contains instructions for debugging node-pty.\n\n## Security\n\nAll processes launched from node-pty will launch at the same permission level of the parent process. Take care particularly when using node-pty inside a server that's accessible on the internet. We recommend launching the pty inside a container to protect your host machine.\n\n## Thread Safety\n\nNote that node-pty is not thread safe so running it across multiple worker threads in node.js could cause issues.\n\n## Flow Control\n\nAutomatic flow control can be enabled by either providing `handleFlowControl = true` in the constructor options or setting it later on:\n\n```js\nconst PAUSE = '\\x13';   // XOFF\nconst RESUME = '\\x11';  // XON\n\nconst ptyProcess = pty.spawn(shell, [], {handleFlowControl: true});\n\n// flow control in action\nptyProcess.write(PAUSE);  // pty will block and pause the slave program\n...\nptyProcess.write(RESUME); // pty will enter flow mode and resume the slave program\n\n// temporarily disable/re-enable flow control\nptyProcess.handleFlowControl = false;\n...\nptyProcess.handleFlowControl = true;\n```\n\nBy default `PAUSE` and `RESUME` are XON/XOFF control codes (as shown above). To avoid conflicts in environments that use these control codes for different purposes the messages can be customized as `flowControlPause: string` and `flowControlResume: string` in the constructor options. `PAUSE` and `RESUME` are not passed to the underlying pseudoterminal if flow control is enabled.\n\n## Troubleshooting\n\n### Powershell gives error 8009001d\n\n> Internal Windows PowerShell error.  Loading managed Windows PowerShell failed with error 8009001d.\n\nThis happens when PowerShell is launched with no `SystemRoot` environment variable present.\n\n### ConnectNamedPipe failed: Windows error 232\n\nThis error can occur due to anti-virus software intercepting winpty from creating a pty. To workaround this you can exclude this file from your anti-virus scanning `node-pty\\build\\Release\\winpty-agent.exe`\n\n## pty.js\n\nThis project is forked from [chjj/pty.js](https://github.com/chjj/pty.js) with the primary goals being to provide better support for later Node.JS versions and Windows.\n\n## License\n\nCopyright (c) 2012-2015, Christopher Jeffrey (MIT License).<br>\nCopyright (c) 2016, Daniel Imms (MIT License).<br>\nCopyright (c) 2018, Microsoft Corporation (MIT License).\n","readmeFilename":"README.md","_id":"node-pty@0.9.0-beta19","_npmVersion":"6.4.1","_nodeVersion":"8.16.0","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"integrity":"sha512-MkKEvBnauGnzgXNr/oaoWQLVXm1gheIKZs4YQp8883ZiETmbEnpSvD0FU3bELcPXG5VFPRqIGsQJ4KUMBLzkPA==","shasum":"0fd381b2006f4665c4c2ee0509219e591842371a","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.9.0-beta19.tgz","fileCount":240,"unpackedSize":1078242,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdIKiOCRA9TVsSAnZWagAAW4IP/3foRsW8oJGQZAmB1MXP\n3QyWcz+CtLPgH3Y+Ug5gXhDS+ONxihrtwwME7vVwDOr74FEaZvl2bMSDXzmz\nKqM7MpjabAUOykb01xXlgE02w8CypHxBWvvEto5xw3S/AELAl5Own9N+1MB2\ncCJbogjolMyan2V8F3B3u7zBwzgEo1HiswbjbxXMgKVtFa2SvYjWVu9b/Jcn\njwvhP158rATqEbReUnrun1GzWlUhP8Pjom3t5hO73k6+DWM5ij84ZeS7fwLD\nQyg3gmWLBGJHwCeGarR8AtBNcZ990H1aHjfeUrbdfHYmp+QAM787P6TOw1lC\njt0hlnew8W8Yk1WB/Y7MTGxNn+Du4eIrMC0JU8lfpBOg54ILzikjWR/eSRWE\nOgB/dZEb1INGenVoWsQymYp4FViwVkRxz6LipsBZA86zueGWjOwLEkMrENsw\nRS/b6wX+/nMjQmGbWaO9mdBu+iYRCDcLxhR9KZn1LZR3ouh6ibCs1A+BiXWs\nTTx2/HYXSULy3KRdM/wwuiCNBjWkiDrEuqftbJhn9a1D/OWgB6EnS6HYuo2D\nrpUPSSJ8NYxIyQmtY4/LIGmHxX4kLwyB5hV4FZgXdG/Rr+8CXfjtVv3L3SLR\n+iKoafRb453vUgnqL93lA8S3dtaOrfd/Kdr9ZT/1LfIylUm/IGwD5H0j7W1l\nn2Il\r\n=Ndyp\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"alros@microsoft.com","name":"alexr00"},{"email":"npmjs@microsoft.com","name":"microsoft"},{"email":"tyriar@tyriar.com","name":"tyriar"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty_0.9.0-beta19_1562421389668_0.22380759707968245"},"_hasShrinkwrap":false},"0.9.0-beta20":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Microsoft Corporation"},"version":"0.9.0-beta20","license":"MIT","main":"./lib/index.js","types":"./typings/node-pty.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","watch":"tsc -w","lint":"tslint 'src/**/*.ts'","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec --exit lib/*.test.js","prepare":"npm run tsc","prepublishOnly":"npm run tsc"},"dependencies":{"nan":"^2.13.2"},"devDependencies":{"@types/mocha":"^5.0.0","@types/node":"8","cross-env":"^5.1.4","mocha":"^5.0.5","pollUntil":"^1.0.3","ps-list":"^6.0.0","tslint":"^5.12.1","tslint-consistent-codestyle":"^1.15.0","typescript":"3.4"},"gitHead":"a6bba9e1f02c7b262e5e92b6c43e0ccf1e9ddb0e","readme":"# node-pty\n\n[![Build Status](https://dev.azure.com/vscode/node-pty/_apis/build/status/Microsoft.node-pty)](https://dev.azure.com/vscode/node-pty/_build/latest?definitionId=11)\n\n`forkpty(3)` bindings for node.js. This allows you to fork processes with pseudoterminal file descriptors. It returns a terminal object which allows reads and writes.\n\nThis is useful for:\n\n- Writing a terminal emulator (eg. via [xterm.js](https://github.com/sourcelair/xterm.js)).\n- Getting certain programs to *think* you're a terminal, such as when you need a program to send you control sequences.\n\n`node-pty` supports Linux, macOS and Windows. Windows support is possible by utilizing the [Windows conpty API](https://blogs.msdn.microsoft.com/commandline/2018/08/02/windows-command-line-introducing-the-windows-pseudo-console-conpty/) on Windows 1809+ and the [winpty](https://github.com/rprichard/winpty) library in older version.\n\n## Real-world Uses\n\n`node-pty` powers many different terminal emulators, including:\n\n- [Microsoft Visual Studio Code](https://code.visualstudio.com)\n- [Hyper](https://hyper.is/)\n- [Upterm](https://github.com/railsware/upterm)\n- [Script Runner](https://github.com/ioquatix/script-runner) for Atom.\n- [Theia](https://github.com/theia-ide/theia)\n- [FreeMAN](https://github.com/matthew-matvei/freeman) file manager\n- [atom-xterm](https://atom.io/packages/atom-xterm) - Atom plugin for providing terminals inside your Atom workspace.\n- [Termination](https://atom.io/packages/termination) - Another Atom plugin that provides terminals inside your Atom workspace.\n- [electerm](https://github.com/electerm/electerm) Terminal/ssh/sftp client(linux, mac, win).\n- [Extraterm](http://extraterm.org/)\n- [Wetty](https://github.com/krishnasrinivas/wetty) Browser based Terminal over HTTP and HTTPS\n\nDo you use node-pty in your application as well? Please open a [Pull Request](https://github.com/Tyriar/node-pty/pulls) to include it here. We would love to have it in our list.\n\n## Example Usage\n\n```js\nvar os = require('os');\nvar pty = require('node-pty');\n\nvar shell = os.platform() === 'win32' ? 'powershell.exe' : 'bash';\n\nvar ptyProcess = pty.spawn(shell, [], {\n  name: 'xterm-color',\n  cols: 80,\n  rows: 30,\n  cwd: process.env.HOME,\n  env: process.env\n});\n\nptyProcess.on('data', function(data) {\n  process.stdout.write(data);\n});\n\nptyProcess.write('ls\\r');\nptyProcess.resize(100, 40);\nptyProcess.write('ls\\r');\n```\n\n## Building\n\n```bash\n# Install dependencies and build C++\nnpm install\n# Compile TypeScript -> JavaScript\nnpm run tsc\n```\n\n## Dependencies\n\n### Linux/Ubuntu\n\n```\nsudo apt install -y make python build-essential\n```\n\nThe following are also needed:\n\n- Node.JS 10+\n\n### Windows\n\n`npm install` requires some tools to be present in the system like Python and C++ compiler. Windows users can easily install them by running the following command in PowerShell as administrator. For more information see https://github.com/felixrieseberg/windows-build-tools:\n\n```sh\nnpm install --global --production windows-build-tools\n```\n\nThe following are also needed:\n\n- [Windows SDK](https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk) - only the \"Desktop C++ Apps\" components are needed to be installed\n- Node.JS 10+\n\n## Debugging\n\n[The wiki](https://github.com/Microsoft/node-pty/wiki/Debugging) contains instructions for debugging node-pty.\n\n## Security\n\nAll processes launched from node-pty will launch at the same permission level of the parent process. Take care particularly when using node-pty inside a server that's accessible on the internet. We recommend launching the pty inside a container to protect your host machine.\n\n## Thread Safety\n\nNote that node-pty is not thread safe so running it across multiple worker threads in node.js could cause issues.\n\n## Flow Control\n\nAutomatic flow control can be enabled by either providing `handleFlowControl = true` in the constructor options or setting it later on:\n\n```js\nconst PAUSE = '\\x13';   // XOFF\nconst RESUME = '\\x11';  // XON\n\nconst ptyProcess = pty.spawn(shell, [], {handleFlowControl: true});\n\n// flow control in action\nptyProcess.write(PAUSE);  // pty will block and pause the slave program\n...\nptyProcess.write(RESUME); // pty will enter flow mode and resume the slave program\n\n// temporarily disable/re-enable flow control\nptyProcess.handleFlowControl = false;\n...\nptyProcess.handleFlowControl = true;\n```\n\nBy default `PAUSE` and `RESUME` are XON/XOFF control codes (as shown above). To avoid conflicts in environments that use these control codes for different purposes the messages can be customized as `flowControlPause: string` and `flowControlResume: string` in the constructor options. `PAUSE` and `RESUME` are not passed to the underlying pseudoterminal if flow control is enabled.\n\n## Troubleshooting\n\n### Powershell gives error 8009001d\n\n> Internal Windows PowerShell error.  Loading managed Windows PowerShell failed with error 8009001d.\n\nThis happens when PowerShell is launched with no `SystemRoot` environment variable present.\n\n### ConnectNamedPipe failed: Windows error 232\n\nThis error can occur due to anti-virus software intercepting winpty from creating a pty. To workaround this you can exclude this file from your anti-virus scanning `node-pty\\build\\Release\\winpty-agent.exe`\n\n## pty.js\n\nThis project is forked from [chjj/pty.js](https://github.com/chjj/pty.js) with the primary goals being to provide better support for later Node.JS versions and Windows.\n\n## License\n\nCopyright (c) 2012-2015, Christopher Jeffrey (MIT License).<br>\nCopyright (c) 2016, Daniel Imms (MIT License).<br>\nCopyright (c) 2018, Microsoft Corporation (MIT License).\n","readmeFilename":"README.md","_id":"node-pty@0.9.0-beta20","_npmVersion":"6.4.1","_nodeVersion":"8.16.0","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"integrity":"sha512-mpRXg5/XvAITFUUJ+tp1wzobrPyRRreuE9wbr9AO1m1OUS+BJjlSoDw6cin0wN60warY3Bv8n+8DpB1I6LufDw==","shasum":"76dbe1461873f6ffd306343dd58b9d0c7da27489","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.9.0-beta20.tgz","fileCount":240,"unpackedSize":1078416,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdOzmhCRA9TVsSAnZWagAAeG4P/1FnGqefmAKwwkBNN+sm\nyc1Ib0+hkP2zFsoWgOQ81hnUxCWhwd1+bJpYcfNiG06e/vBWyY15vz5TlCLx\nceC0Y7ouE24//5GW2ccbzvGTIwnEYiMt/GnGZaUQZpYgWXWFTO/QEkpVppaz\nlBR+okwAz+XQQDCD5ZlbtJ7uMazgp2nHXcCX4FqGfZqXlmI0j9Z4JID7IYLz\nP/crIeowNFQ3D0nAKqpfm1iww13miooBYcJKqWnkYzXEVdjGsVRId6w2JFni\nHGm6VQwyx8666spklc4JxeT3owUavOQ0JpnIcHN5i/ICLuPb3B74iC+CRMl3\nWj0yg4KZn/KZoNwIcWyTe8Dc3RPgxgUav95kwKR+vEr4Ke96aB/3qrtmrKI2\nKBwlHdQkJD8e2Fm1XEYH52uJDvUptn2Lxz+jPSm6dGLD4osKnLeWlo/Iqc5F\nhTwzNjPzb/mbCg7O1dw4+xok0rORmfJW1XIW+89hGxuXmU5Xy+wkQ6ADgJO3\nfsKDbXIsv9ZEY1njqXFhXNwu3ks9kiROadfLZIGLRevUx/EnQdMJTL/8mCRm\nQZgMOyV7Ck3dDdm4uxD0E/77U4szHqGCLW1uMW8/CfgdOcB+yamnHRmatifD\nFoFcX9JekxgOcJiG87dIv2efCH3vC+df19KQ7pW0X7n0uAL8n5F18I/QLFhX\nVMMr\r\n=REf1\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"alros@microsoft.com","name":"alexr00"},{"email":"npmjs@microsoft.com","name":"microsoft"},{"email":"tyriar@tyriar.com","name":"tyriar"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty_0.9.0-beta20_1564162464233_0.7119668069547762"},"_hasShrinkwrap":false},"0.9.0-beta21":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Microsoft Corporation"},"version":"0.9.0-beta21","license":"MIT","main":"./lib/index.js","types":"./typings/node-pty.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","watch":"tsc -w","lint":"tslint 'src/**/*.ts'","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec --exit lib/*.test.js","prepare":"npm run tsc","prepublishOnly":"npm run tsc"},"dependencies":{"nan":"^2.14.0"},"devDependencies":{"@types/mocha":"^5.0.0","@types/node":"8","cross-env":"^5.1.4","mocha":"^5.0.5","pollUntil":"^1.0.3","ps-list":"^6.0.0","tslint":"^5.12.1","tslint-consistent-codestyle":"^1.15.0","typescript":"3.4"},"gitHead":"8c89c19271d72c7a61e27f91570c759fc85c8136","readme":"# node-pty\n\n[![Build Status](https://dev.azure.com/vscode/node-pty/_apis/build/status/Microsoft.node-pty)](https://dev.azure.com/vscode/node-pty/_build/latest?definitionId=11)\n\n`forkpty(3)` bindings for node.js. This allows you to fork processes with pseudoterminal file descriptors. It returns a terminal object which allows reads and writes.\n\nThis is useful for:\n\n- Writing a terminal emulator (eg. via [xterm.js](https://github.com/sourcelair/xterm.js)).\n- Getting certain programs to *think* you're a terminal, such as when you need a program to send you control sequences.\n\n`node-pty` supports Linux, macOS and Windows. Windows support is possible by utilizing the [Windows conpty API](https://blogs.msdn.microsoft.com/commandline/2018/08/02/windows-command-line-introducing-the-windows-pseudo-console-conpty/) on Windows 1809+ and the [winpty](https://github.com/rprichard/winpty) library in older version.\n\n## Real-world Uses\n\n`node-pty` powers many different terminal emulators, including:\n\n- [Microsoft Visual Studio Code](https://code.visualstudio.com)\n- [Hyper](https://hyper.is/)\n- [Upterm](https://github.com/railsware/upterm)\n- [Script Runner](https://github.com/ioquatix/script-runner) for Atom.\n- [Theia](https://github.com/theia-ide/theia)\n- [FreeMAN](https://github.com/matthew-matvei/freeman) file manager\n- [atom-xterm](https://atom.io/packages/atom-xterm) - Atom plugin for providing terminals inside your Atom workspace.\n- [Termination](https://atom.io/packages/termination) - Another Atom plugin that provides terminals inside your Atom workspace.\n- [electerm](https://github.com/electerm/electerm) Terminal/ssh/sftp client(linux, mac, win).\n- [Extraterm](http://extraterm.org/)\n- [Wetty](https://github.com/krishnasrinivas/wetty) Browser based Terminal over HTTP and HTTPS\n\nDo you use node-pty in your application as well? Please open a [Pull Request](https://github.com/Tyriar/node-pty/pulls) to include it here. We would love to have it in our list.\n\n## Example Usage\n\n```js\nvar os = require('os');\nvar pty = require('node-pty');\n\nvar shell = os.platform() === 'win32' ? 'powershell.exe' : 'bash';\n\nvar ptyProcess = pty.spawn(shell, [], {\n  name: 'xterm-color',\n  cols: 80,\n  rows: 30,\n  cwd: process.env.HOME,\n  env: process.env\n});\n\nptyProcess.on('data', function(data) {\n  process.stdout.write(data);\n});\n\nptyProcess.write('ls\\r');\nptyProcess.resize(100, 40);\nptyProcess.write('ls\\r');\n```\n\n## Building\n\n```bash\n# Install dependencies and build C++\nnpm install\n# Compile TypeScript -> JavaScript\nnpm run tsc\n```\n\n## Dependencies\n\n### Linux/Ubuntu\n\n```\nsudo apt install -y make python build-essential\n```\n\nThe following are also needed:\n\n- Node.JS 10+\n\n### Windows\n\n`npm install` requires some tools to be present in the system like Python and C++ compiler. Windows users can easily install them by running the following command in PowerShell as administrator. For more information see https://github.com/felixrieseberg/windows-build-tools:\n\n```sh\nnpm install --global --production windows-build-tools\n```\n\nThe following are also needed:\n\n- [Windows SDK](https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk) - only the \"Desktop C++ Apps\" components are needed to be installed\n- Node.JS 10+\n\n## Debugging\n\n[The wiki](https://github.com/Microsoft/node-pty/wiki/Debugging) contains instructions for debugging node-pty.\n\n## Security\n\nAll processes launched from node-pty will launch at the same permission level of the parent process. Take care particularly when using node-pty inside a server that's accessible on the internet. We recommend launching the pty inside a container to protect your host machine.\n\n## Thread Safety\n\nNote that node-pty is not thread safe so running it across multiple worker threads in node.js could cause issues.\n\n## Flow Control\n\nAutomatic flow control can be enabled by either providing `handleFlowControl = true` in the constructor options or setting it later on:\n\n```js\nconst PAUSE = '\\x13';   // XOFF\nconst RESUME = '\\x11';  // XON\n\nconst ptyProcess = pty.spawn(shell, [], {handleFlowControl: true});\n\n// flow control in action\nptyProcess.write(PAUSE);  // pty will block and pause the slave program\n...\nptyProcess.write(RESUME); // pty will enter flow mode and resume the slave program\n\n// temporarily disable/re-enable flow control\nptyProcess.handleFlowControl = false;\n...\nptyProcess.handleFlowControl = true;\n```\n\nBy default `PAUSE` and `RESUME` are XON/XOFF control codes (as shown above). To avoid conflicts in environments that use these control codes for different purposes the messages can be customized as `flowControlPause: string` and `flowControlResume: string` in the constructor options. `PAUSE` and `RESUME` are not passed to the underlying pseudoterminal if flow control is enabled.\n\n## Troubleshooting\n\n### Powershell gives error 8009001d\n\n> Internal Windows PowerShell error.  Loading managed Windows PowerShell failed with error 8009001d.\n\nThis happens when PowerShell is launched with no `SystemRoot` environment variable present.\n\n### ConnectNamedPipe failed: Windows error 232\n\nThis error can occur due to anti-virus software intercepting winpty from creating a pty. To workaround this you can exclude this file from your anti-virus scanning `node-pty\\build\\Release\\winpty-agent.exe`\n\n## pty.js\n\nThis project is forked from [chjj/pty.js](https://github.com/chjj/pty.js) with the primary goals being to provide better support for later Node.JS versions and Windows.\n\n## License\n\nCopyright (c) 2012-2015, Christopher Jeffrey (MIT License).<br>\nCopyright (c) 2016, Daniel Imms (MIT License).<br>\nCopyright (c) 2018, Microsoft Corporation (MIT License).\n","readmeFilename":"README.md","_id":"node-pty@0.9.0-beta21","_npmVersion":"6.4.1","_nodeVersion":"8.16.0","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"integrity":"sha512-+OkCaEjr5xMLEa3IGqph+6jPDtRkZBFU2l0AsXKrGN/28AHoyfy+wrf5ov5KCd6UPjiCxCsJ+qOdBWoXJDHJHA==","shasum":"471656ec870d0d40822637d92cf69019feb7d00f","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.9.0-beta21.tgz","fileCount":240,"unpackedSize":1078416,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdO1P9CRA9TVsSAnZWagAA90sQAIjJOgnVm5BqDh5gAJcw\nKJ4Z6ucBemlLFAQSMFMs9J5Qq5UvixD6gVK0KiFVptMxhOP8sa08+EpMraNp\ni4mIUXlYWt3YhdH1nZhiAypNaRw3k5YNbKi/C6R643N5vVIR7rlZ7dU/PuvL\n0oNq4hsqK21+79Ry0YIHaBbBoLdMXOE4pM6IeSnE1kiNMBgR7/U5NG54tV0h\n9u6jrX1gCvqbuL4Iu40HIod4d7IIwfzQlqzzuqfIcOkX3r3UOljfPt0koJrb\nnReMppzUAt6aeXzv2+tpUTdlGR7WlxnMhBhp8Iw91K8fVi5RHLVSVNPlJBc6\ncnW3mUKY8BbifRmnwtRPvnnNWpZLBxe/qhF+LXLrYtCytlS2FmUHs2kGG0UG\nB6PZT/r+Y6PlCncO4gDO2l4aA8N/61vY9JuUYSy2jXg0mZqhf8GlDFqgo12u\ncNAS1kMa+nH1bep0o5Kk8ql7dleRRkNhFIIm6cFVdjyUF899xEJOmizN9hil\n/gW5TjpcMeJ9rSMD1J9AujZ6BqMBy1e+S6mRuBXd9ii3lOJndVlRG+4J+vsb\no7NV+1DYCdqZ78oSkel74kJ99wxu9ho66OOn+bNLDQJYzBuB2R8xNdJYnsvD\nSBeg5pY84Hv/xh+Dp7SPp5Yw5/Ut/Da/eQUdkaEuLjL8NVqfX/T1sjq70poh\nsGbd\r\n=bVlP\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"alros@microsoft.com","name":"alexr00"},{"email":"npmjs@microsoft.com","name":"microsoft"},{"email":"tyriar@tyriar.com","name":"tyriar"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty_0.9.0-beta21_1564169212794_0.707278826210848"},"_hasShrinkwrap":false},"0.9.0-beta22":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Microsoft Corporation"},"version":"0.9.0-beta22","license":"MIT","main":"./lib/index.js","types":"./typings/node-pty.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","watch":"tsc -w","lint":"tslint 'src/**/*.ts'","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec --exit lib/*.test.js","prepare":"npm run tsc","prepublishOnly":"npm run tsc"},"dependencies":{"nan":"^2.14.0"},"devDependencies":{"@types/mocha":"^5.0.0","@types/node":"8","cross-env":"^5.1.4","mocha":"^5.0.5","pollUntil":"^1.0.3","ps-list":"^6.0.0","tslint":"^5.12.1","tslint-consistent-codestyle":"^1.15.0","typescript":"3.4"},"gitHead":"7bd4c73db47f37f10706defd00c6557bc7020d13","readme":"# node-pty\n\n[![Build Status](https://dev.azure.com/vscode/node-pty/_apis/build/status/Microsoft.node-pty)](https://dev.azure.com/vscode/node-pty/_build/latest?definitionId=11)\n\n`forkpty(3)` bindings for node.js. This allows you to fork processes with pseudoterminal file descriptors. It returns a terminal object which allows reads and writes.\n\nThis is useful for:\n\n- Writing a terminal emulator (eg. via [xterm.js](https://github.com/sourcelair/xterm.js)).\n- Getting certain programs to *think* you're a terminal, such as when you need a program to send you control sequences.\n\n`node-pty` supports Linux, macOS and Windows. Windows support is possible by utilizing the [Windows conpty API](https://blogs.msdn.microsoft.com/commandline/2018/08/02/windows-command-line-introducing-the-windows-pseudo-console-conpty/) on Windows 1809+ and the [winpty](https://github.com/rprichard/winpty) library in older version.\n\n## Real-world Uses\n\n`node-pty` powers many different terminal emulators, including:\n\n- [Microsoft Visual Studio Code](https://code.visualstudio.com)\n- [Hyper](https://hyper.is/)\n- [Upterm](https://github.com/railsware/upterm)\n- [Script Runner](https://github.com/ioquatix/script-runner) for Atom.\n- [Theia](https://github.com/theia-ide/theia)\n- [FreeMAN](https://github.com/matthew-matvei/freeman) file manager\n- [atom-xterm](https://atom.io/packages/atom-xterm) - Atom plugin for providing terminals inside your Atom workspace.\n- [Termination](https://atom.io/packages/termination) - Another Atom plugin that provides terminals inside your Atom workspace.\n- [electerm](https://github.com/electerm/electerm) Terminal/ssh/sftp client(linux, mac, win).\n- [Extraterm](http://extraterm.org/)\n- [Wetty](https://github.com/krishnasrinivas/wetty) Browser based Terminal over HTTP and HTTPS\n\nDo you use node-pty in your application as well? Please open a [Pull Request](https://github.com/Tyriar/node-pty/pulls) to include it here. We would love to have it in our list.\n\n## Example Usage\n\n```js\nvar os = require('os');\nvar pty = require('node-pty');\n\nvar shell = os.platform() === 'win32' ? 'powershell.exe' : 'bash';\n\nvar ptyProcess = pty.spawn(shell, [], {\n  name: 'xterm-color',\n  cols: 80,\n  rows: 30,\n  cwd: process.env.HOME,\n  env: process.env\n});\n\nptyProcess.on('data', function(data) {\n  process.stdout.write(data);\n});\n\nptyProcess.write('ls\\r');\nptyProcess.resize(100, 40);\nptyProcess.write('ls\\r');\n```\n\n## Building\n\n```bash\n# Install dependencies and build C++\nnpm install\n# Compile TypeScript -> JavaScript\nnpm run tsc\n```\n\n## Dependencies\n\n### Linux/Ubuntu\n\n```\nsudo apt install -y make python build-essential\n```\n\nThe following are also needed:\n\n- Node.JS 10+\n\n### Windows\n\n`npm install` requires some tools to be present in the system like Python and C++ compiler. Windows users can easily install them by running the following command in PowerShell as administrator. For more information see https://github.com/felixrieseberg/windows-build-tools:\n\n```sh\nnpm install --global --production windows-build-tools\n```\n\nThe following are also needed:\n\n- [Windows SDK](https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk) - only the \"Desktop C++ Apps\" components are needed to be installed\n- Node.JS 10+\n\n## Debugging\n\n[The wiki](https://github.com/Microsoft/node-pty/wiki/Debugging) contains instructions for debugging node-pty.\n\n## Security\n\nAll processes launched from node-pty will launch at the same permission level of the parent process. Take care particularly when using node-pty inside a server that's accessible on the internet. We recommend launching the pty inside a container to protect your host machine.\n\n## Thread Safety\n\nNote that node-pty is not thread safe so running it across multiple worker threads in node.js could cause issues.\n\n## Flow Control\n\nAutomatic flow control can be enabled by either providing `handleFlowControl = true` in the constructor options or setting it later on:\n\n```js\nconst PAUSE = '\\x13';   // XOFF\nconst RESUME = '\\x11';  // XON\n\nconst ptyProcess = pty.spawn(shell, [], {handleFlowControl: true});\n\n// flow control in action\nptyProcess.write(PAUSE);  // pty will block and pause the slave program\n...\nptyProcess.write(RESUME); // pty will enter flow mode and resume the slave program\n\n// temporarily disable/re-enable flow control\nptyProcess.handleFlowControl = false;\n...\nptyProcess.handleFlowControl = true;\n```\n\nBy default `PAUSE` and `RESUME` are XON/XOFF control codes (as shown above). To avoid conflicts in environments that use these control codes for different purposes the messages can be customized as `flowControlPause: string` and `flowControlResume: string` in the constructor options. `PAUSE` and `RESUME` are not passed to the underlying pseudoterminal if flow control is enabled.\n\n## Troubleshooting\n\n### Powershell gives error 8009001d\n\n> Internal Windows PowerShell error.  Loading managed Windows PowerShell failed with error 8009001d.\n\nThis happens when PowerShell is launched with no `SystemRoot` environment variable present.\n\n### ConnectNamedPipe failed: Windows error 232\n\nThis error can occur due to anti-virus software intercepting winpty from creating a pty. To workaround this you can exclude this file from your anti-virus scanning `node-pty\\build\\Release\\winpty-agent.exe`\n\n## pty.js\n\nThis project is forked from [chjj/pty.js](https://github.com/chjj/pty.js) with the primary goals being to provide better support for later Node.JS versions and Windows.\n\n## License\n\nCopyright (c) 2012-2015, Christopher Jeffrey (MIT License).<br>\nCopyright (c) 2016, Daniel Imms (MIT License).<br>\nCopyright (c) 2018, Microsoft Corporation (MIT License).\n","readmeFilename":"README.md","_id":"node-pty@0.9.0-beta22","_npmVersion":"6.4.1","_nodeVersion":"8.16.0","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"integrity":"sha512-ASvZMaSXVT0ntpAw+nEXjjWplgBKwddjkJ4X0+aDNbTsqSjrNxWvArVdrlk8c7dC5D5tKCBzWtxJuM1a2q8baw==","shasum":"5c26bbad8ccebaf887309f9511b40c8e22465459","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.9.0-beta22.tgz","fileCount":240,"unpackedSize":1080438,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdSY6ECRA9TVsSAnZWagAA/uEP/3yyNNHdSMNVyzIfZ0BR\nPizdQjpmNea2bghb4B087ct8IZN+Ja2VsiyGNpb2P8wXINe+Y7db0mRB5gIL\noK6WNuWNSVn794w8V9UqdgEgItFOub0iSDHldV2WFPCNcGjiPJtqVTgwqOqn\n16YNEBI8MzoYKTJk8o9pnGo4wE8JzLQCzbwk9LJH+/QWKgQ6OF1dmKzmE/jW\nc+tyMVtAf2vj9PweCS1FgKbS8Ib4J+wrzlDNVavq2F4UhWczIYfAMX4znz0v\nrnFi09/EZuFkLL9/DBHoTTi/FCWOZYflIG5l7c1ct7+1urPjGdWL5F8uqAo9\nGVjxs3prUMUDprW8DFocdf9ZJboJJ96DEXwPa2CGoNl3OGEOesRZNdMXffUz\nVleKtQNwYQtA4B/pyw8CXSfwpaMe0nuJess+mtkwwXRrFgM1IbLbJZ7LKXQk\nATjAAr+62rHtzPTEJHN8L9weqsB3FEuMRK+CY7wsSkf8VNfdANPpB8tvsj2Y\n0D5A2wpDZguMTHiJv1JwvTVLG6Y6VIGlm16kKQmqRsDECY8njc1w+lbeevwz\nfN+N3RYoaiGwF8GgAupMy5kBi0ddc1ZAw1zwq1fIqLuY3xywFarq5an1jZ87\nlzoOxJYVzx4+nvYiwbayXSLJjzLSU/VoDAsmoPlFAen6fVa5lfUAlbIBr69Z\nKKNr\r\n=1CEb\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"alros@microsoft.com","name":"alexr00"},{"email":"npmjs@microsoft.com","name":"microsoft"},{"email":"tyriar@tyriar.com","name":"tyriar"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty_0.9.0-beta22_1565101699709_0.7390496899360033"},"_hasShrinkwrap":false},"0.9.0-beta23":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Microsoft Corporation"},"version":"0.9.0-beta23","license":"MIT","main":"./lib/index.js","types":"./typings/node-pty.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","watch":"tsc -w","lint":"tslint 'src/**/*.ts'","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec --exit lib/*.test.js","prepare":"npm run tsc","prepublishOnly":"npm run tsc"},"dependencies":{"nan":"^2.14.0"},"devDependencies":{"@types/mocha":"^5.0.0","@types/node":"8","cross-env":"^5.1.4","mocha":"^5.0.5","pollUntil":"^1.0.3","ps-list":"^6.0.0","tslint":"^5.12.1","tslint-consistent-codestyle":"^1.15.0","typescript":"3.4"},"gitHead":"377e6c4c1fb4e682af528fbb8bd3a046367e6a88","readme":"# node-pty\n\n[![Build Status](https://dev.azure.com/vscode/node-pty/_apis/build/status/Microsoft.node-pty)](https://dev.azure.com/vscode/node-pty/_build/latest?definitionId=11)\n\n`forkpty(3)` bindings for node.js. This allows you to fork processes with pseudoterminal file descriptors. It returns a terminal object which allows reads and writes.\n\nThis is useful for:\n\n- Writing a terminal emulator (eg. via [xterm.js](https://github.com/sourcelair/xterm.js)).\n- Getting certain programs to *think* you're a terminal, such as when you need a program to send you control sequences.\n\n`node-pty` supports Linux, macOS and Windows. Windows support is possible by utilizing the [Windows conpty API](https://blogs.msdn.microsoft.com/commandline/2018/08/02/windows-command-line-introducing-the-windows-pseudo-console-conpty/) on Windows 1809+ and the [winpty](https://github.com/rprichard/winpty) library in older version.\n\n## Real-world Uses\n\n`node-pty` powers many different terminal emulators, including:\n\n- [Microsoft Visual Studio Code](https://code.visualstudio.com)\n- [Hyper](https://hyper.is/)\n- [Upterm](https://github.com/railsware/upterm)\n- [Script Runner](https://github.com/ioquatix/script-runner) for Atom.\n- [Theia](https://github.com/theia-ide/theia)\n- [FreeMAN](https://github.com/matthew-matvei/freeman) file manager\n- [atom-xterm](https://atom.io/packages/atom-xterm) - Atom plugin for providing terminals inside your Atom workspace.\n- [Termination](https://atom.io/packages/termination) - Another Atom plugin that provides terminals inside your Atom workspace.\n- [electerm](https://github.com/electerm/electerm) Terminal/ssh/sftp client(linux, mac, win).\n- [Extraterm](http://extraterm.org/)\n- [Wetty](https://github.com/krishnasrinivas/wetty) Browser based Terminal over HTTP and HTTPS\n\nDo you use node-pty in your application as well? Please open a [Pull Request](https://github.com/Tyriar/node-pty/pulls) to include it here. We would love to have it in our list.\n\n## Example Usage\n\n```js\nvar os = require('os');\nvar pty = require('node-pty');\n\nvar shell = os.platform() === 'win32' ? 'powershell.exe' : 'bash';\n\nvar ptyProcess = pty.spawn(shell, [], {\n  name: 'xterm-color',\n  cols: 80,\n  rows: 30,\n  cwd: process.env.HOME,\n  env: process.env\n});\n\nptyProcess.on('data', function(data) {\n  process.stdout.write(data);\n});\n\nptyProcess.write('ls\\r');\nptyProcess.resize(100, 40);\nptyProcess.write('ls\\r');\n```\n\n## Building\n\n```bash\n# Install dependencies and build C++\nnpm install\n# Compile TypeScript -> JavaScript\nnpm run tsc\n```\n\n## Dependencies\n\n### Linux/Ubuntu\n\n```\nsudo apt install -y make python build-essential\n```\n\nThe following are also needed:\n\n- Node.JS 10+\n\n### Windows\n\n`npm install` requires some tools to be present in the system like Python and C++ compiler. Windows users can easily install them by running the following command in PowerShell as administrator. For more information see https://github.com/felixrieseberg/windows-build-tools:\n\n```sh\nnpm install --global --production windows-build-tools\n```\n\nThe following are also needed:\n\n- [Windows SDK](https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk) - only the \"Desktop C++ Apps\" components are needed to be installed\n- Node.JS 10+\n\n## Debugging\n\n[The wiki](https://github.com/Microsoft/node-pty/wiki/Debugging) contains instructions for debugging node-pty.\n\n## Security\n\nAll processes launched from node-pty will launch at the same permission level of the parent process. Take care particularly when using node-pty inside a server that's accessible on the internet. We recommend launching the pty inside a container to protect your host machine.\n\n## Thread Safety\n\nNote that node-pty is not thread safe so running it across multiple worker threads in node.js could cause issues.\n\n## Flow Control\n\nAutomatic flow control can be enabled by either providing `handleFlowControl = true` in the constructor options or setting it later on:\n\n```js\nconst PAUSE = '\\x13';   // XOFF\nconst RESUME = '\\x11';  // XON\n\nconst ptyProcess = pty.spawn(shell, [], {handleFlowControl: true});\n\n// flow control in action\nptyProcess.write(PAUSE);  // pty will block and pause the slave program\n...\nptyProcess.write(RESUME); // pty will enter flow mode and resume the slave program\n\n// temporarily disable/re-enable flow control\nptyProcess.handleFlowControl = false;\n...\nptyProcess.handleFlowControl = true;\n```\n\nBy default `PAUSE` and `RESUME` are XON/XOFF control codes (as shown above). To avoid conflicts in environments that use these control codes for different purposes the messages can be customized as `flowControlPause: string` and `flowControlResume: string` in the constructor options. `PAUSE` and `RESUME` are not passed to the underlying pseudoterminal if flow control is enabled.\n\n## Troubleshooting\n\n### Powershell gives error 8009001d\n\n> Internal Windows PowerShell error.  Loading managed Windows PowerShell failed with error 8009001d.\n\nThis happens when PowerShell is launched with no `SystemRoot` environment variable present.\n\n### ConnectNamedPipe failed: Windows error 232\n\nThis error can occur due to anti-virus software intercepting winpty from creating a pty. To workaround this you can exclude this file from your anti-virus scanning `node-pty\\build\\Release\\winpty-agent.exe`\n\n## pty.js\n\nThis project is forked from [chjj/pty.js](https://github.com/chjj/pty.js) with the primary goals being to provide better support for later Node.JS versions and Windows.\n\n## License\n\nCopyright (c) 2012-2015, Christopher Jeffrey (MIT License).<br>\nCopyright (c) 2016, Daniel Imms (MIT License).<br>\nCopyright (c) 2018, Microsoft Corporation (MIT License).\n","readmeFilename":"README.md","_id":"node-pty@0.9.0-beta23","_npmVersion":"6.4.1","_nodeVersion":"8.16.0","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"integrity":"sha512-IYGzITtyLS1wswtBbHBZDAS6cJH5mm1ddWWb6R7/159ZjvlPpv1yMBctmaq5XYjRWT9txZGh+x+G/XVN9DhAAA==","shasum":"e9dda1758a3c7322e8171454fc16a2465904aba1","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.9.0-beta23.tgz","fileCount":240,"unpackedSize":1080438,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdS5hOCRA9TVsSAnZWagAARTgP/RAhv8vdWzW9/t9oqkA5\np+P+fQ4AzvmRUbnaklfzxM4ng7aOGbPB9S54KHK/t0CZ2YGp1ag6jRFVgPyj\ntkNlMw2zELOCkXVBdVaNhcrCp5NAVATfItpRhEtFOgcT1fA18uEHrFn82VNt\nW9m9gN5S3q0b7oz+0ZevQg7eoX+xrEx1PCUrxujtqPEDuv5NNrW2PgxZF8i1\nJ/B1hzLG37Vx9jTDHkJp8itogqwfQJaOwaxBlzXVv1uAHm6/k/zdQMlV8sCP\nn50ULQOUCmxk+EHqzsTRcWwd/i6boLtCOrN2OaFazwXKRBe9aBafFvSDVuy1\npgxBYdLTChKggsgGXONdr5LbM5JcA6NOtAsFWr6JgePsxIt4BgsOLC9vMiyT\nDw1IlB2hunCxWasqfuiSUpHAzgjX/Z6hh06ONDs6cItpNaZJO95wr634sz2e\npnINzD3+olduRtWgB3mFeOWt2SDkmXVKDOZvSNk4KjCbCVsNRr0287gj8Gd2\nMdU4DyznlmLPwzkavlV8fceKoqZOZos0dNAmOtWFlyAV4+CQWUo4p5eCKBF9\nMVZYMfTWOdLZRsCCLOiSqKiGk5E2sen5azKfvpUOy1waD6C8mE9AxuSWGBbg\nYeT3Xb/XcX+h26HahVEKqGHxYlPR0bAtJ9GZbnXp0lNoyZnasF7yEcJ2jb33\nOtpn\r\n=Sa4x\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"alros@microsoft.com","name":"alexr00"},{"email":"npmjs@microsoft.com","name":"microsoft"},{"email":"tyriar@tyriar.com","name":"tyriar"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty_0.9.0-beta23_1565235277537_0.19656673204488606"},"_hasShrinkwrap":false},"0.9.0-beta24":{"name":"node-pty","description":"Fork pseudoterminals in Node.JS","author":{"name":"Microsoft Corporation"},"version":"0.9.0-beta24","license":"MIT","main":"./lib/index.js","types":"./typings/node-pty.d.ts","repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"homepage":"https://github.com/Tyriar/node-pty","bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"scripts":{"tsc":"tsc","watch":"tsc -w","lint":"tslint 'src/**/*.ts'","install":"node scripts/install.js","postinstall":"node scripts/post-install.js","test":"cross-env NODE_ENV=test mocha -R spec --exit lib/*.test.js","prepare":"npm run tsc","prepublishOnly":"npm run tsc"},"dependencies":{"nan":"^2.14.0"},"devDependencies":{"@types/mocha":"^5.0.0","@types/node":"8","cross-env":"^5.1.4","mocha":"^5.0.5","pollUntil":"^1.0.3","ps-list":"^6.0.0","tslint":"^5.12.1","tslint-consistent-codestyle":"^1.15.0","typescript":"3.4"},"gitHead":"3e645898f83370db2894cdde09ac180235e1cfb7","readme":"# node-pty\n\n[![Build Status](https://dev.azure.com/vscode/node-pty/_apis/build/status/Microsoft.node-pty)](https://dev.azure.com/vscode/node-pty/_build/latest?definitionId=11)\n\n`forkpty(3)` bindings for node.js. This allows you to fork processes with pseudoterminal file descriptors. It returns a terminal object which allows reads and writes.\n\nThis is useful for:\n\n- Writing a terminal emulator (eg. via [xterm.js](https://github.com/sourcelair/xterm.js)).\n- Getting certain programs to *think* you're a terminal, such as when you need a program to send you control sequences.\n\n`node-pty` supports Linux, macOS and Windows. Windows support is possible by utilizing the [Windows conpty API](https://blogs.msdn.microsoft.com/commandline/2018/08/02/windows-command-line-introducing-the-windows-pseudo-console-conpty/) on Windows 1809+ and the [winpty](https://github.com/rprichard/winpty) library in older version.\n\n## Real-world Uses\n\n`node-pty` powers many different terminal emulators, including:\n\n- [Microsoft Visual Studio Code](https://code.visualstudio.com)\n- [Hyper](https://hyper.is/)\n- [Upterm](https://github.com/railsware/upterm)\n- [Script Runner](https://github.com/ioquatix/script-runner) for Atom.\n- [Theia](https://github.com/theia-ide/theia)\n- [FreeMAN](https://github.com/matthew-matvei/freeman) file manager\n- [atom-xterm](https://atom.io/packages/atom-xterm) - Atom plugin for providing terminals inside your Atom workspace.\n- [Termination](https://atom.io/packages/termination) - Another Atom plugin that provides terminals inside your Atom workspace.\n- [electerm](https://github.com/electerm/electerm) Terminal/ssh/sftp client(linux, mac, win).\n- [Extraterm](http://extraterm.org/)\n- [Wetty](https://github.com/krishnasrinivas/wetty) Browser based Terminal over HTTP and HTTPS\n\nDo you use node-pty in your application as well? Please open a [Pull Request](https://github.com/Tyriar/node-pty/pulls) to include it here. We would love to have it in our list.\n\n## Example Usage\n\n```js\nvar os = require('os');\nvar pty = require('node-pty');\n\nvar shell = os.platform() === 'win32' ? 'powershell.exe' : 'bash';\n\nvar ptyProcess = pty.spawn(shell, [], {\n  name: 'xterm-color',\n  cols: 80,\n  rows: 30,\n  cwd: process.env.HOME,\n  env: process.env\n});\n\nptyProcess.on('data', function(data) {\n  process.stdout.write(data);\n});\n\nptyProcess.write('ls\\r');\nptyProcess.resize(100, 40);\nptyProcess.write('ls\\r');\n```\n\n## Building\n\n```bash\n# Install dependencies and build C++\nnpm install\n# Compile TypeScript -> JavaScript\nnpm run tsc\n```\n\n## Dependencies\n\n### Linux/Ubuntu\n\n```\nsudo apt install -y make python build-essential\n```\n\nThe following are also needed:\n\n- Node.JS 10+\n\n### Windows\n\n`npm install` requires some tools to be present in the system like Python and C++ compiler. Windows users can easily install them by running the following command in PowerShell as administrator. For more information see https://github.com/felixrieseberg/windows-build-tools:\n\n```sh\nnpm install --global --production windows-build-tools\n```\n\nThe following are also needed:\n\n- [Windows SDK](https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk) - only the \"Desktop C++ Apps\" components are needed to be installed\n- Node.JS 10+\n\n## Debugging\n\n[The wiki](https://github.com/Microsoft/node-pty/wiki/Debugging) contains instructions for debugging node-pty.\n\n## Security\n\nAll processes launched from node-pty will launch at the same permission level of the parent process. Take care particularly when using node-pty inside a server that's accessible on the internet. We recommend launching the pty inside a container to protect your host machine.\n\n## Thread Safety\n\nNote that node-pty is not thread safe so running it across multiple worker threads in node.js could cause issues.\n\n## Flow Control\n\nAutomatic flow control can be enabled by either providing `handleFlowControl = true` in the constructor options or setting it later on:\n\n```js\nconst PAUSE = '\\x13';   // XOFF\nconst RESUME = '\\x11';  // XON\n\nconst ptyProcess = pty.spawn(shell, [], {handleFlowControl: true});\n\n// flow control in action\nptyProcess.write(PAUSE);  // pty will block and pause the slave program\n...\nptyProcess.write(RESUME); // pty will enter flow mode and resume the slave program\n\n// temporarily disable/re-enable flow control\nptyProcess.handleFlowControl = false;\n...\nptyProcess.handleFlowControl = true;\n```\n\nBy default `PAUSE` and `RESUME` are XON/XOFF control codes (as shown above). To avoid conflicts in environments that use these control codes for different purposes the messages can be customized as `flowControlPause: string` and `flowControlResume: string` in the constructor options. `PAUSE` and `RESUME` are not passed to the underlying pseudoterminal if flow control is enabled.\n\n## Troubleshooting\n\n### Powershell gives error 8009001d\n\n> Internal Windows PowerShell error.  Loading managed Windows PowerShell failed with error 8009001d.\n\nThis happens when PowerShell is launched with no `SystemRoot` environment variable present.\n\n### ConnectNamedPipe failed: Windows error 232\n\nThis error can occur due to anti-virus software intercepting winpty from creating a pty. To workaround this you can exclude this file from your anti-virus scanning `node-pty\\build\\Release\\winpty-agent.exe`\n\n## pty.js\n\nThis project is forked from [chjj/pty.js](https://github.com/chjj/pty.js) with the primary goals being to provide better support for later Node.JS versions and Windows.\n\n## License\n\nCopyright (c) 2012-2015, Christopher Jeffrey (MIT License).<br>\nCopyright (c) 2016, Daniel Imms (MIT License).<br>\nCopyright (c) 2018, Microsoft Corporation (MIT License).\n","readmeFilename":"README.md","_id":"node-pty@0.9.0-beta24","_npmVersion":"6.4.1","_nodeVersion":"8.16.0","_npmUser":{"name":"tyriar","email":"tyriar@tyriar.com"},"dist":{"integrity":"sha512-JZqAqLbJDClPF2YyK5Ehu1WBOXTwjGSTRzre1e/prOXbdqc+Ev9WrRaSzw64/VmIqc2LdlRYnHB3CBvX1dn2qA==","shasum":"4df9171667b2414999de163fa7f0d67713ad5fbf","tarball":"https://registry.npmjs.org/node-pty/-/node-pty-0.9.0-beta24.tgz","fileCount":240,"unpackedSize":1080384,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdTItPCRA9TVsSAnZWagAAFOgP/28YX9bZhjdH7261MUfl\nTz/+kJjYJUOq5jWbsFQbSdH+tY/g1MfLpdGzSYKHG3ExD/nOH8Kj2onbM/6a\ncvPYk62lYvEJsxeet6140RKOTj6J9575khsgvedNjrQNQyDznUhHhjL9Zabp\ndMDVYR2pO/L19fmbOKwWVglWhPL3+tL+u15lJNclJBbnWimtkiTRpBUonfpn\nGihH5oOtuYTtemU/WaBthEcXh0xGHyTj/Iy52YGRKKqyJQtZ2OAN90N15pI7\nqZqd44ygN/qnOLkoI8Zr7V6Of707kJJPfs7VI9Kmc8CsNfZSx97HnaPlbfTR\n7FwJNg5ncyQEKejDE61P+p7mBoPoocRIrOIJ3neJud5npnBKCy5PKzf+pDUD\nDHNsOQts/dV47KU5Af59WOyCiPWqrQBO6Yflvtf9/wsvaFVrdjz2VBGfMYrB\nj5id6/IGlQTtFv6tuuF/WrIsZsAspts7spDZu4ct9LotrDbzipfn5vQ/7Bql\n4KT/YcKz4NWo2c5XJf4xiltqQgPa/qe4VGUW2IosSPNKyw0IwUy7JG9vexsy\nvI7mNk48NnVqaZu/gDiJo+KEscV+hU5KZWjVn0PO65KG+pV5B0YF3i5+rknQ\nZDbcvPJIFldcpachLTeZFUwPt1dfXPcknmZ+wuJRUahpDUyUwQoMfWQKhIYM\njSeq\r\n=4ws4\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"alros@microsoft.com","name":"alexr00"},{"email":"npmjs@microsoft.com","name":"microsoft"},{"email":"tyriar@tyriar.com","name":"tyriar"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pty_0.9.0-beta24_1565297486882_0.18010672932402727"},"_hasShrinkwrap":false}},"readme":"","maintainers":[{"email":"alros@microsoft.com","name":"alexr00"},{"email":"npmjs@microsoft.com","name":"microsoft"},{"email":"tyriar@tyriar.com","name":"tyriar"}],"time":{"modified":"2019-08-08T20:51:29.654Z","created":"2017-01-07T05:59:41.623Z","0.0.1":"2017-01-07T05:59:41.623Z","0.1.0":"2017-01-07T06:36:54.773Z","0.4.0":"2017-01-07T06:39:15.194Z","0.4.1":"2017-01-07T06:52:55.666Z","0.5.0":"2017-01-08T10:09:25.120Z","0.5.0-beta":"2017-01-08T10:16:07.951Z","0.5.0-beta2":"2017-01-08T10:25:21.858Z","0.5.0-beta3":"2017-01-08T10:29:39.498Z","0.5.0-beta4":"2017-01-08T11:32:08.713Z","0.5.0-beta5":"2017-01-16T04:41:32.557Z","0.5.1":"2017-01-16T04:56:12.154Z","0.6.0-beta1":"2017-01-16T04:59:11.720Z","0.6.0-beta2":"2017-01-16T05:11:37.583Z","0.6.0-beta3":"2017-01-18T16:51:07.696Z","0.6.0":"2017-01-20T04:25:54.998Z","0.6.1":"2017-01-21T22:19:02.189Z","0.6.2-beta1":"2017-01-21T23:48:13.884Z","0.6.2":"2017-01-22T07:47:58.643Z","0.6.3-beta1":"2017-03-13T20:58:03.521Z","0.6.3":"2017-03-13T21:20:06.885Z","0.6.4":"2017-04-23T18:23:59.252Z","0.6.5-beta1":"2017-05-17T17:04:24.210Z","0.6.5":"2017-05-17T17:47:21.775Z","0.6.6":"2017-05-22T03:11:19.845Z","0.6.7":"2017-06-12T21:24:17.257Z","0.6.8":"2017-06-12T21:28:05.925Z","0.6.9":"2017-07-10T00:05:26.603Z","0.6.10":"2017-07-12T19:51:56.013Z","0.7.0":"2017-08-21T17:23:32.052Z","0.7.1":"2017-10-03T20:47:51.386Z","0.7.2":"2017-10-27T18:30:23.212Z","0.7.3-beta1":"2017-11-11T22:02:19.698Z","0.7.3":"2017-11-11T22:06:38.057Z","0.7.4":"2017-12-09T00:03:43.427Z","0.7.4-node-10":"2018-06-21T18:04:54.458Z","0.7.5":"2018-06-21T19:04:45.776Z","0.7.6":"2018-06-25T18:10:27.319Z","0.7.7":"2018-09-05T22:24:36.443Z","0.7.8":"2018-09-28T17:59:35.230Z","0.7.6-conpty1":"2018-10-17T23:05:18.620Z","0.7.6-conpty2":"2018-10-18T22:12:24.053Z","0.7.6-conpty3":"2018-10-18T22:34:12.948Z","0.7.8-conpty1":"2018-12-11T19:02:46.291Z","0.7.8-conpty2":"2018-12-21T18:51:42.908Z","0.8.0":"2018-12-21T20:33:49.721Z","0.8.1":"2019-01-20T19:29:36.611Z","0.8.2-beta1":"2019-05-02T15:43:25.400Z","0.9.0-beta1":"2019-05-10T15:08:41.998Z","0.9.0-beta2":"2019-05-12T04:35:35.934Z","0.9.0-beta3":"2019-05-15T17:40:22.323Z","0.9.0-beta4":"2019-05-16T18:25:27.972Z","0.9.0-alpha1":"2019-05-17T18:02:43.462Z","0.9.0-alpha2":"2019-05-17T18:56:36.674Z","0.9.0-beta5":"2019-05-18T17:12:31.564Z","0.9.0-beta6":"2019-05-19T08:00:00.696Z","0.9.0-alpha3":"2019-05-21T21:57:09.469Z","0.9.0-alpha4":"2019-05-22T04:11:18.935Z","0.9.0-beta7":"2019-05-22T21:50:11.125Z","0.9.0-beta8":"2019-05-22T22:07:48.211Z","0.9.0-beta9":"2019-05-22T22:31:51.154Z","0.9.0-beta10":"2019-05-22T23:24:47.718Z","0.9.0-beta11":"2019-05-22T23:37:28.611Z","0.9.0-beta12":"2019-05-24T17:18:18.127Z","0.9.0-beta13":"2019-05-24T17:26:02.180Z","0.9.0-beta14":"2019-05-28T21:41:49.896Z","0.9.0-beta15":"2019-05-30T22:01:50.502Z","0.9.0-beta16":"2019-05-30T23:57:01.740Z","0.9.0-beta17":"2019-06-04T21:36:37.135Z","0.9.0-beta18":"2019-06-07T03:52:36.876Z","0.9.0-beta19":"2019-07-06T13:56:29.893Z","0.9.0-beta20":"2019-07-26T17:34:24.546Z","0.9.0-beta21":"2019-07-26T19:26:53.087Z","0.9.0-beta22":"2019-08-06T14:28:19.872Z","0.9.0-beta23":"2019-08-08T03:34:37.745Z","0.9.0-beta24":"2019-08-08T20:51:27.117Z"},"homepage":"https://github.com/Tyriar/node-pty","keywords":["pty","tty","terminal","pseudoterminal","forkpty","openpty"],"repository":{"type":"git","url":"git://github.com/Tyriar/node-pty.git"},"author":{"name":"Microsoft Corporation"},"bugs":{"url":"https://github.com/Tyriar/node-pty/issues"},"license":"MIT","readmeFilename":"","users":{"jrop":true,"shanewholloway":true,"phntm":true,"faraoman":true,"seangenabe":true},"_etag":"W/\"77bb27bd96b40a86d0e412bcca61f02a\"","_lastModified":"Thu, 08 Aug 2019 20:51:30 GMT"}